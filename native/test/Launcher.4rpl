# --Launcher-- 8/13/2022 11:16:10 AM

# Must be written exactly as in https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:unit_types
$unit:"emitter"

# Written as Key Value Key Value
# https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitsettings
$unit_Params:"Interval 30 Payload 50"

# Unit parameters if ERNed
$erned_Params:"Interval 30 Payload 100"

# Which parameter to scale with Creeper++, if any
$cpp_Scaler:""

# How long the fire animation should take in total (30/s)
$fire_Duration:180

# How quickly the projectile will accelerate in units/frame
$projectile_Acceleration:0.05

#GetUnitERNState(self) ->newErnState
#if (<-newErnState <-ernState !=)
#	<-newErnState ->ernState
#	
#	# Half resource requirements if ERNed
#	if (<-ernState true ==)
#		SetUnitMaxAmmo(self <-startMaxAmmo 2 /)
#	else
#		SetUnitMaxAmmo(self <-startMaxAmmo)
#	endif
#endif

if (<-firing)
	GetGameUpdateCount <-countOffset - ->updateCount
	
	# Going up
	if (<-updateCount <-halfFire <)
		<-projVelocity <-projectile_Acceleration + ->projVelocity
		<-projHeight <-projVelocity + ->newProjHeight
	
		SetObjPosition(self "Projectile" V3(0 <-newProjHeight 0) false)
		
		<-newProjHeight ->projHeight
	else
		# Flip projectile at halfway point
		if (<-updateCount <-halfFire ==)
			SetObjRotation(self "Projectile" V3(180 0 0) false)
		endif
	
		# Coming down
		if (<-updateCount <-fire_Duration <)
			# y = fallHeight - (finalVelocity * time)
			SetObjPosition(self "Projectile" V3(<-target.x <-fallHeight <-finalVelocity <-updateCount <-halfFire - * - <-target.z) true)
		else
			# Impact
			false ->firing
			
			DestroyTrail(self "Projectile" false)
			
			SetObjPosition(self "Projectile" Vector0 false)
			SetObjRotation(self "Projectile" Vector0 false)
			
			SetObjActive(self "Projectile" false)
			
			PlaySoundAtPosition("Sci Fi Explosion 23" 1 <-target)
			
			Table("unit" <-unit "position" <-target "unitParams" <-currentParams) ->unitData
			SendMverseMsg("SpawnCreeperUnit" <-unitData)
			CreateUnit(<-unit <-target <-currentParams)
		endif
	endif
endif

if (GetUnitEnabled(self) ! GetUnitArmed(self) ! ||) return endif

if (GetUnitAmmo(self) GetUnitMaxAmmo(self) >=)
	SetObjActive(self "Projectile" true)
	SetUnitEnabled(self true) # Prevents projectile from looking unconstructed

	GetUnitSpecifiedTarget(self) ->target
	
	if (<-target V3(-1 0 -1) ==) return endif
	
	if (@IsPositionValid(<-target))
		if (GetUnitERNState(self))
			<-ernedParams ->currentParams
		else
			<-unitParams ->currentParams
		endif
		
		# Scale parameter with Creeper++
		if (<-cpp_Scaler "" !=)
			<-currentParams{<-cpp_Scaler} GetGameUpdateCount <-*CPP_INTERVAL / 1 + * ->currentParams{<-cpp_Scaler}
		endif
		
		true ->firing
		0 ->projVelocity
		0 ->projHeight
		GetUnitPosition(self) ->firePos
		GetGameUpdateCount ->countOffset
		CreateTrail(self "Projectile" 1 0.7)
		
		PlaySoundAtPosition("MissileLaunch" 1 GetUnitPosition(self))
		
		ClearUnitSpecifiedTarget(self)
		
		# Redundancy in case ammo is over max ammo for whatever reason
		SetUnitAmmo(self GetUnitAmmo(self) GetUnitMaxAmmo(self) -)
	else
		ClearUnitSpecifiedTarget(self)
		PlaySoundAtPosition("ErrorBuild" 1 <-currentTarget)
	endif
endif

:FrameAdvance
	if (GetUnitSelected(self) <-selected !=)
		GetUnitSelected(self) ->selected
		SetThemeOverlayEnabled(0 <-selected)
	endif

	# Check if specified target is a valid position
	if (GetUnitSpecifiedTarget(self) <-currentTarget !=)
		GetUnitSpecifiedTarget(self) ->currentTarget
		
		if (<-currentTarget V3(-1 0 -1) ==) return endif
		if (@IsPositionValid(<-currentTarget) !)
			ClearUnitSpecifiedTarget(self)
			PlaySoundAtPosition("ErrorBuild" 1 <-currentTarget)
		endif
	endif

:ReceiveUnitPositions
	GetUnitSpecifiedTarget(self) ->currentTarget
	
	if (<-currentTarget V3(-1 0 -1) ==) return endif
	
	if (@IsPositionValid(<-currentTarget) !)
		ClearUnitSpecifiedTarget(self)
		PlaySoundAtPosition("ErrorBuild" 1 <-currentTarget)
	endif

:IsPositionValid
	->position

	if (GetMversePlayerNum eq0)
		if (<-position.x <-halfX 1 + <) false return endif
	else
		if (<-position.x <-halfX 1 - >) false return endif
	endif
	
	if (GetTerrain(<-position.x <-position.z) 0 ==) false return endif
	
	GetListCount(<-*enemyUnitPositions) 0 do
		SqrMagnitude(<-*enemyUnitPositions[i] <-position -) ->sqrMagnitude

		if (<-sqrMagnitude <-rSquared <)
			false return
		endif
	loop
	
	true return

:Awake
	false ->selected
	false ->firing
	<-fire_Duration 2 / ->halfFire
	
	# v=u+at
	<-projectile_Acceleration <-halfFire * ->finalVelocity
	# s=ut
	<-finalVelocity <-halfFire * ->fallHeight

	<-*EXCLUSION_RADIUS dup * ->rSquared

	GetMapSize ->sizeZ ->sizeX
	<-sizeX 2 / ->halfX

	Split(<-unit_Params " ") ->paramsList
	GetListCount(<-paramsList) 0 do
		<-paramsList[i]
	loop
	Table ->unitParams
	
	Split(<-erned_Params " ") ->paramsList
	GetListCount(<-paramsList) 0 do
		<-paramsList[i]
	loop
	Table ->ernedParams

	SetObjActive(self "Projectile" false)

	#false ->ernState
	GetUnitSpecifiedTarget(self) ->currentTarget
	GetUnitMaxAmmo(self) ->startMaxAmmo

	SetUnitSpecifiedTargetShowPath(self false)
	
	RegisterForMsg("MSG_FrameAdvance" "FrameAdvance")
	RegisterForMsg("ReceiveUnitPositions" dup)

:Destroyed
	SetThemeOverlayEnabled(0 false)
