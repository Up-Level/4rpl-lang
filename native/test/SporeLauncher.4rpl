# --SporeLauncher-- 9/3/2022 5:55:31 PM

# CURRENTLY UNUSED

$spore_Count:1

# Maximum distance away from target a spore can attempt to hit
$accuracy:10

if (GetUnitEnabled(self) ! GetUnitArmed(self) ! ||) return endif

if (GetUnitAmmo(self) GetUnitMaxAmmo(self) >=)
	GetUnitSpecifiedTarget(self) ->target

	if (<-target V3(-1 0 -1) ==) return endif
	
	CreateTable ->sporeData
	GetUnitPosition(self) ->sporeData{"source"}
	
	if (GetUnitErnState(self))
		<-spore_Count 2 * ->sporeCount
	else
		<-spore_Count ->sporeCount
	endif
	
	# Scales the amount of spores with Creeper++
	# sporeCount = (UpdateCount / CPP_INTERVAL + 1) * sporeCount
	<-sporeCount GetGameUpdateCount <-*CPP_INTERVAL / 1 + * ->sporeCount
	
	<-sporeCount 0 do
		RandInt(<-accuracy -1 * <-accuracy 1 +) <-target.x + RandInt(<-accuracy -1 * <-accuracy 1 +) <-target.z + V2	
	loop List ->sporeData{"targets"}
	
	if (GetMversePlayerNum eq0)
		<-sporeCount 0 do
			Table("Target" 2 "TargetLocation" <-sporeData{"targets"}[i] "Payload" <-*SPORE_PAYLOAD) ->params
			if (GetMversePlayerNum neq0) V3(64 128 64) else V3(192 128 64) endif ->sporePos
			CreateUnit("spore" <-sporePos <-params) pop
			
			printallsp(<-sporePos <-params)
		loop
	else
		SendMverseMsg("CreateSpores" <-sporeData)
	endif
	
	# Redundancy in case ammo is over max ammo for whatever reason
	SetUnitAmmo(self GetUnitAmmo(self) GetUnitMaxAmmo(self) -)
endif

:Awake
	GetUnitSpecifiedTarget(self) ->target
	
	SetUnitSpecifiedTargetShowPath(self false)
