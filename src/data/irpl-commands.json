[{"name":"abs","displayName":"abs","usage":"abs(<-var) ->absvar","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:abs","kind":"Function","description":"<p>\nCalculates the absolute value of the item and pushes the result on the stack.\n</p>"},{"name":"acos","displayName":"acos","usage":"acos(-1) ->PiValue","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:acos","kind":"Function","description":"<p>\nCalculates the arccosine of the input, returns the result in radians.\n</p>"},{"name":"add","displayName":"add","usage":"<-a <-b add ->result","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:arithmetic:add","kind":"Function","description":"<p>\nAdds two arguments together and pushes the result on the stack.\n</p>"},{"name":"AddCreeper","displayName":"AddCreeper","usage":"AddCreeper(<-x <-y <-creeper)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:addcreeper","kind":"Function","description":"<p>\nAdds creeper at world location x,y. Creeper is an int amount; 1000000 is equivalent to a creeper depth of 1.0, while -1000000 is equivalent to an anti-creeper depth of 1.0.\n</p>"},{"name":"AddPhysicsForce","displayName":"AddPhysicsForce","usage":"AddPhysicsForce(<-unit <-force <-forceOrImpulse)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:addphysicsforce","kind":"Function","description":"<p>\nAdds a physics force to a unit containing part.  Force is V2. ForceOrImpulse is a bool.\n</p>"},{"name":"AddPlanToInventory","displayName":"AddPlanToInventory","usage":"AddPlanToInventory(<-plan <-amt <-rowHint)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:inventory:addplantoinventory","kind":"Function","description":"<p>\nAdds a plan to the inventory. Amt is the number of to add.  RowHint is the row to add the plan to, if possible.  Pass in -1 for rowHint if you don&#039;t care.\n</p>"},{"name":"and","displayName":"and","usage":"<-bool1 <-bool2 and ->boolResult","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:logic:and","kind":"Function","description":"<p>\nPops two items from the stack and treats them as TRUE/FALSE (0/1 or Boolean) values. If they are both TRUE, 1 is pushed to the stack. Otherwise, 0 is pushed to the stack.\n</p>"},{"name":"AppendListToList","displayName":"AppendListToList","usage":"AppendListToList(<-targetList <-listToAppend  )","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:appendlisttolist","kind":"Function","description":"<p>\nAppends all elements from `listToAppend` to the end of `targetList`.\n</p>"},{"name":"AppendStackToList","displayName":"AppendStackToList","usage":"AppendStackToList","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:appendstacktolist","kind":"Function","description":"<p>\nAdds all values on the stack to the end of a list. The order of the values will be reversed.\n</p>\n\n<p>\nNote that the stack will be empty after this call, so think before using it in functions.\n</p>"},{"name":"AppendToList","displayName":"AppendToList","usage":"AppendToList( <-list <-var)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:appendtolist","kind":"Function","description":"<p>\nAdds a value to the end of a list.\n</p>\n\n<p>\nSynonymous and equivalent to <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:pushlist\" class=\"wikilink1\" title=\"ixe:irpl:lists:pushlist\" data-wiki-id=\"ixe:irpl:lists:pushlist\">PushList</a>\n</p>"},{"name":"approximately","displayName":"approximately","usage":"approximately(<-val1 <-val2)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:approximately","kind":"Function","description":"<p>\nCompares two floating point values and returns true if they are similar.\n</p>\n\n<p>\nFloating point imprecision makes comparing floats using the equals operator inaccurate. For example, (1.0 == 10.0 / 10.0) might not return true every time. Approximately() compares two floats and returns true if they are within a small value (<em>Epsilon</em><sup><a href=\"https://knucklecracker.com#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup>) of each other.\n</p>\n\n<p>\nSee <a href=\"https://docs.unity3d.com/Documentation/ScriptReference/Mathf.Approximately.html\" class=\"urlextern\" title=\"https://docs.unity3d.com/Documentation/ScriptReference/Mathf.Approximately.html\" rel=\"ugc nofollow\"> Mathf.Approximately in Unity3D documentation</a>\n</p>\n\n<p>\nIf you came to this documentation for an <abbr title=\"Application Programming Interface\">API</abbr> to handle an approximation that&#039;s much larger than (<em>Epsilon</em><sup><a href=\"#fn__2\" id=\"fnt__2\" class=\"fn_top\">2)</a></sup>), such as comparing 1.625002 to 1.625000, an alternative is to use <a href=\"/wiki/doku.php?id=4rpl:commands:distance\" class=\"wikilink1\" title=\"4rpl:commands:distance\" data-wiki-id=\"4rpl:commands:distance\">Distance</a> and define your own approximation margin.\n</p>"},{"name":"asfloat","displayName":"asfloat","usage":"asfloat (<-integer1) ->float1","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:data:asfloat","kind":"Function","description":"<p>\nConverts an item on the stack to a floating point number and pushes it back onto the stack.\n</p>\n\n<p>\nThis is useful if one needs a floating-point result from operating on two integers. By default, <abbr title=\"CW4 Scripting Language\">4RPL</abbr> may return an integer value after an arithmetic operation on two integers, but a floating-point value might be desirable. \n</p>"},{"name":"asin","displayName":"asin","usage":"asin(<-one) ->halfPie","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:asin","kind":"Function","description":"<p>\nCalculates the arcsine of the input, returns result angle in radiants.\n</p>"},{"name":"asint","displayName":"asint","usage":"asint (<-floatval) ->intval","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:data:asint","kind":"Function","description":"<p>\nConverts (coerces) an item on the stack to an integer, and pushes it back to the stack.\n</p>\n\n<p>\nIf used on a float, will truncate any decimal value.  i.e. 42.8 asint will return 42.\nIf used on a string, if the string could be numeric (eg. “42”), it will be converted to the corresponding value, if not, the call will return zero.\n</p>"},{"name":"asstring","displayName":"asstring","usage":"asstring (<-someval) ->stringval","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:data:asstring","kind":"Function","description":"<p>\nConverts an item on the stack to a string.\n</p>"},{"name":"atan","displayName":"atan","usage":"atan(<-toTarget)) ->targetRadians","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:atan","kind":"Function","description":"<p>\nCalculates the arctangent of the input, returns the angle in radians.\n</p>"},{"name":"atan2","displayName":"atan2","usage":"atan2(<-targetZ <-targetX) ->angleToTarget","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:atan2","kind":"Function","description":"<p>\nComputes and returns the angle of the point y/x in radians. The return value is between positive pi and negative pi. Note that the first parameter to atan2 is always the z coordinate.\n</p>"},{"name":"avg2","displayName":"avg2","usage":"avg2(<-high <-low) ->average","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:avg2","kind":"Function","description":"<p>\nComputes the average of two numbers.\n</p>"},{"name":"AwardMissionComplete","displayName":"AwardMissionComplete","usage":"AwardMissionComplete","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:awardmissioncomplete","kind":"Function","description":"<p>\nAwards a mission completion.\n</p>"},{"name":"BeamExists","displayName":"BeamExists","usage":"BeamExists(<-partUID <-beamUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:beamexists","kind":"Function","description":"<p>\nReturns is a beam exists.\n</p>"},{"name":"break","displayName":"break","usage":"break","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:break","kind":"Keyword","description":"<p>\nImmediately exits the body of a ‘while/repeat/endwhile’ block or a ‘do/loop’ block.\n</p>"},{"name":"CalculateTrajectoryVelocity","displayName":"CalculateTrajectoryVelocity","usage":"CalculateTrajectoryVelocity(<-Start <-Target <-gravity)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:calculatetrajectoryvelocity","kind":"Function","description":"<p>\nCalculates the velocity to launch an object from start to target with gravity.  Returns a V2.\n</p>"},{"name":"Case","displayName":"Case","usage":"case","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:case","kind":"Function","description":"<p>\ndefines one of the alternative selections in a <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:switch\" class=\"wikilink1\" title=\"ixe:irpl:flow_control:switch\" data-wiki-id=\"ixe:irpl:flow_control:switch\">switch</a> statement that will be evaluated. The first selection that evaluates to <a href=\"/wiki/doku.php?id=ixe:irpl:flow_control:true\" class=\"wikilink2\" title=\"ixe:irpl:flow_control:true\" rel=\"nofollow\" data-wiki-id=\"ixe:irpl:flow_control:true\">true</a> will be executed and evaluation of further alternatives will not be performed. If none of the alternatives evaluate to <a href=\"/wiki/doku.php?id=ixe:irpl:flow_control:true\" class=\"wikilink2\" title=\"ixe:irpl:flow_control:true\" rel=\"nofollow\" data-wiki-id=\"ixe:irpl:flow_control:true\">true</a>, then execution will continue at the first statement following the <a href=\"/wiki/doku.php?id=ixe:irpl:flow_control:endswitch\" class=\"wikilink1\" title=\"ixe:irpl:flow_control:endswitch\" data-wiki-id=\"ixe:irpl:flow_control:endswitch\">endswitch</a> statement.\n</p>"},{"name":"ceil","displayName":"ceil","usage":"ceil(<-number) ->number","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:ceil","kind":"Function","description":"<p>\nTakes one number from the stack, rounds it up, and pushes that number back on the stack.\n</p>"},{"name":"clamp","displayName":"clamp","usage":"clamp(<-val <-min <-max)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:clamp","kind":"Function","description":"<p>\nClamps the given value between the given minimum and maximum values. Returns the given value if it is within the min and max range.\nReturns the min value if the given value is less than the min. Returns the max value if the given value is greater than the max value.\nUse Clamp to restrict a value to a range that is defined by the min and max values.\nIf the value is a vector, each element of the vector is clamped separately.\n</p>"},{"name":"clamp01","displayName":"clamp01","usage":"clamp01(<-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:clamp01","kind":"Function","description":"<p>\nClamps value between 0 and 1 and returns value.\nIf the value is negative then zero is returned. If value is greater than one then one is returned.\nIf the value is a vector, each element of the vector is clamped separately.\n</p>"},{"name":"ClearConsole","displayName":"ClearConsole","usage":"ClearConsole()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:clearconsole","kind":"Function","description":"<p>\nClears the console window.\n</p>"},{"name":"ClearGlobals","displayName":"ClearGlobals","usage":"","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:variables:clearglobals","kind":"Function","description":"<p>\nClearGlobals\n</p>"},{"name":"ClearInventory","displayName":"ClearInventory","usage":"ClearInventory","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:inventory:clearinventory","kind":"Function","description":"<p>\nClears the inventory.\n</p>"},{"name":"ClearLegalUnitCells","displayName":"ClearLegalUnitCells","usage":"ClearLegalUnitCells","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:clearlegalunitcells","kind":"Function","description":"<p>\nRemoves all legal unit cells.\n</p>"},{"name":"ClearList","displayName":"ClearList","usage":"ClearList(<-list)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:clearlist","kind":"Function","description":"<p>\nTakes a list from the stack and removes all elements from the list.\n</p>"},{"name":"ClearLocals","displayName":"ClearLocals","usage":"","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:variables:clearlocals","kind":"Function","description":"<p>\nClearLocals\n</p>"},{"name":"ClearPrintLog","displayName":"ClearPrintLog","usage":"ClearPrintLog","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:clearprintlog","kind":"Function","description":"<p>\nClears the rpl.txt file of any previous output written to it. \n</p>"},{"name":"ClearStack","displayName":"ClearStack","usage":"ClearStack","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:stack:clearstack","kind":"Function","description":"<p>\nRemove all items from the stack leaving it empty.\n</p>"},{"name":"ClearTable","displayName":"ClearTable","usage":"ClearTable(<-table)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:cleartable","kind":"Function","description":"<p>\nClears all entries from the specified table.\n</p>"},{"name":"ClearTraceLog","displayName":"ClearTraceLog","usage":"ClearTraceLog","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:cleartracelog","kind":"Function","description":"<p>\nRemoves all messages from the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"CloseBubbleMessage","displayName":"CloseBubbleMessage","usage":"CloseBubbleMessage(<-BubbleMessageUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:closebubblemessage","kind":"Function","description":"<p>\nCloses a bubble message.\n</p>"},{"name":"CloseGameMessage","displayName":"CloseGameMessage","usage":"CloseGameMessage(<-unpause)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:closegamemessage","kind":"Function","description":"<p>\nCloses an open game message.  Will unpause the game if unpause it true and the game message had paused the game.\n</p>"},{"name":"Concat","displayName":"Concat","usage":"Concat(“abc” “def”) ->sixLetters","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:concat","kind":"Function","description":"<p>\nTakes the top two items from the stack, treats them as strings, and concatenates them to a single string.\n</p>"},{"name":"Concat3","displayName":"Concat3","usage":"Concat3(“abc” “def” “ghi”) ->nineLetters","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:concat3","kind":"Function","description":"<p>\nTakes the top three items from the stack, treates them as strings, and concatenates them to a single string.\n</p>"},{"name":"Concat4","displayName":"Concat4","usage":"Concat4(“abc” “def” “ghi” “jkl”) ->twelveLetters","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:concat4","kind":"Function","description":"<p>\nTakes the top four items from the stack, treates them as strings, and concatenates them to a single string.\n</p>"},{"name":"ConsumeAmmo","displayName":"ConsumeAmmo","usage":"ConsumeAmmo(<-partUID <-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:consumeammo","kind":"Function","description":"<p>\nConsume ammo on the unit containing the part.\n</p>"},{"name":"ConvertAcToCreeper","displayName":"ConvertAcToCreeper","usage":"ConvertAcToCreeper(<-x <-y <-range <-isSquare)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:convertactocreeper","kind":"Function","description":"<p>\nConverts any AC in range of the specified integer map coordinates to creeper.\n</p>"},{"name":"ConvertCreeperToAc","displayName":"ConvertCreeperToAc","usage":"ConvertCreeperToAc(<-x <-y <-range <-isSquare)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:convertcreepertoac","kind":"Function","description":"<p>\nConverts any creeper in range of the specified integer map coordinates to anticreeper.\n</p>"},{"name":"Copy","displayName":"Copy","usage":"Copy (<-var) ->copiedVar","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:variables:copy","kind":"Function","description":"<p>\nCreates a copy of the item on the stack with the same contents. Note that if the data is a table or list and contains other tables or lists, they will shared not copied.\n</p>"},{"name":"cos","displayName":"cos","usage":"cos(<-angle) ->cosAngleRadians","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:cos","kind":"Function","description":"<p>\nCalculates the cosine of the input angle in radians\n</p>"},{"name":"CountSandInArea","displayName":"CountSandInArea","usage":"CountSandInArea(<-area <-sandDef)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:countsandinarea","kind":"Function","description":"<p>\nReturns the count of sand def in the specified V4 area. The area specifies the lower left and upper right of a rectangular area.\n</p>"},{"name":"CreateBeam","displayName":"CreateBeam","usage":"CreateBeam(<-partUID <-beamType)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:createbeam","kind":"Function","description":"<p>\nCreates a beam associated with a part of type beamType. Returns the beamUID. Returns -1 if beam is not created. <br>\n\nBeamType is one of: <br>\n\n“basic”,“terp”,“nullifier”,“darkray”,“darkrayoff”\n</p>"},{"name":"CreateEffect","displayName":"CreateEffect","usage":"CreateEffect(<-pos <-vfx)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:effects:createeffect","kind":"Function","description":"<p>\nCreate a visual effect. <br>\n\nPos is a V2 coordinate.<br>\n\nVFX is one of: <br>\n\n“jump”,“arrive”,“mortartrail”,“emitterexplosion”,“nullifierbomb”,“rocketexplosion”,“unitexplosion”,“particulateshotexplosion”\n</p>"},{"name":"CreateFc","displayName":"CreateFc","usage":"CreateFc(<-size <-pos)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:createfc","kind":"Function","description":"<p>\nCreates a Field Container of V2 size and at V2 position.  Returns the field container <abbr title=\"Unique Identifier.\">UID</abbr>.\n</p>"},{"name":"CreateList","displayName":"CreateList","usage":"CreateList ->list","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:createlist","kind":"Function","description":"<p>\nCreates an empty list and pushes it onto the stack. If saved in a variable, then whatever was in that variable previously gets dropped (and garbage collected) and replaced with the new list just created.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/warning-yellow.png\" class=\"icon smiley\" alt=\":WARNING:\" > If you do the following, or something similar: <code> CreateList dup ->list1 ->list2 </code> The list assigned to each var will ALWAYS be the same. Therefore, any changes applied to either variable will affect both.\n</p>"},{"name":"CreateListStartingSize","displayName":"CreateListStartingSize","usage":"createliststartingsize (<-size) ->list","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:createliststartingsize","kind":"Function","description":"<p>\nCreates a list containing a specified number of null elements.\n</p>"},{"name":"CreateParticulateShot","displayName":"CreateParticulateShot","usage":"CreateParticulateShot(<-image <-start <-target <-speed <-damageAmt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:shots:createparticulateshot","kind":"Function","description":"<p>\nCreates a shot to damage particulate. <br>\n\nimage: The name of an image to use for the rocket. <br>\n\nstart: V2 for the starting position. <br>\n\ntarget: V2 for the target position. <br>\n\nspeed: Float for the speed of the shot. <br>\n\ndamageAmt: The int amount of damage to do to the particulate<br>\n\n</p>"},{"name":"CreateRaRocket","displayName":"CreateRaRocket","usage":"CreateRaRocket(<-image <-start <-target <-damageAC <-ownerPartUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:shots:createrarocket","kind":"Function","description":"<p>\nCreates a rocket. <br>\n\nimage: The name of an image to use for the rocket. <br>\n\nstart: V2 for the starting position. <br>\n\ntarget: V2 for the target position. <br>\n\ndamageAC: A boolean indicating whether to damage AC. <br>\n\nownerPartUID: The part used for calculating the path from start to target. This is necessary because the RA (reachable area) around the part will be used to calculate the rockets travel path.\n</p>"},{"name":"CreateSand","displayName":"CreateSand","usage":"CreateSand(<-x <-y <-sandDef)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:createsand","kind":"Function","description":"<p>\nCreates sand of sandDef type at the specified x,y coordinate.\n</p>"},{"name":"CreateSandExplosion","displayName":"CreateSandExplosion","usage":"CreateSandExplosion(<-x <-y <-lowerVelocity <-upperVelocity <-amt <-color0 <-color1 <-age0 <-age1 <-sandDef <-creeper <-ignoreOccupied <-createSandWhenOccupied)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:effects:createsandexplosion","kind":"Function","description":"<p>\nCreates a sand particle explosion. Does not create sand directly. It creates sand particles that will permute into sand if sandDef is not 255.<br>\n\nx: X coordinate of explosion. <br>\n\ny: Y coordinate of explosion. <br>\n\nlowerVelocity: The minimum speed of a sand particle to create. <br>\n\nupperVelocity: The maximum speed of a sand particle to create. <br>\n\namt: The number of sand particles to create. <br>\n\ncolor0: The color of the particles, lerped a random amount with color1. <br>\n\ncolor1: The color of the particles, lerped a random amount with color0. <br>\n\nage0: The minimum age for a sand particle to live. <br>\n\nage1: The maximum age for a sand particle to live. <br>\n\nsandDef: The type of sand to create when a sand particle ends. Set to 255 to not create sand. <br>\n\ncreeper: The int amount of creeper for the sand particle to carry. <br>\n\nignoreOccupied: If the sand particle should ignore sand occupied cells as it moves. <br>\n\ncreateSandWhenOccupied: If the sand particle should create sand when it hits a cell occipied with sand. <br>\n\n</p>"},{"name":"CreateSandInArea","displayName":"CreateSandInArea","usage":"CreateSandInArea(<-area <-sandDef)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:createsandinarea","kind":"Function","description":"<p>\nCreates sand of sandDef type in the area. Area is a V4 that specifies the lower left and upper right coordinates of a region. \n</p>"},{"name":"CreateSandInAreaRand","displayName":"CreateSandInAreaRand","usage":"CreateSandInAreaRand(<-area <-sandDef <-probability)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:createsandinarearand","kind":"Function","description":"<p>\nCreates sand of sandDef type in the area. Area is a V4 that specifies the lower left and upper right coordinates of a region. Probability is a float in the range of 0 to 1 indicating the probability of any cell in the area being filled with sand.\n</p>"},{"name":"CreateSandInRoundArea","displayName":"CreateSandInRoundArea","usage":"CreateSandInRoundArea(<-area <-sandDef <-probability)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:createsandinroundarea","kind":"Function","description":"<p>\nCreates sand of sandDef type in the area. Area is a V4 that specifies the lower left and upper right coordinates of a region. An ellipse area within the bounds will be filled. Probability is a float in the range of 0 to 1 indicating the probability of any cell in the area being filled with sand.\n</p>"},{"name":"CreateSandParticle","displayName":"CreateSandParticle","usage":"CreateSandParticle(<-tableOfParams)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sandparticle:createsandparticle","kind":"Function","description":"<p>\nCreates a sand particle based on the tableOfParams.  Returns a V2 represeting the next position for the sand particle. The next position factors in the pos, lasPos, and gravity.<br>\n\nIf the sand particle creation fails, the returned V2 will be (float.minValue, float.minValue).<br>\n\n<br>\n\nThe tableOfParams can contain these values:<br>\n\n“sandDef: int in range of 0 to 255.<br>\n\n“creeper”: int for the amount of creeper contained in the sand particle.<br>\n\n“pos”: Vector2 specifying the world position for the sand particle.<br>\n\n“lastPos”: Vector2 specifying the previouls position for the sand particle. This is useful for imparting a velovity to the sand particle.<br>\n\n“color”: Vector4 specifying the color of the sand particle.<br>\n\n“glow”: Vector4 specifying the glow multiplier for the sand particle.<br>\n\n“maxAge: int for the max number of game updates for the sand particle to live.<br>\n\n“ignoreOccupied”: bool indicating if the sand particle should check for collision with sand.<br>\n\n“createSandWhenOccupied”: bool indicating of the sand particle should convert to sand when colliding with sand.<br>\n\n“damagesUnits”: int that is 0,1,2,3.  0 Means no unit damage. 1 means damage enemy units, 2 means damages non-enemy units. 3 (or larger) means damages any unit.\n“damageUnitsAmt”: int for the amount of damage to do to a unit.\n</p>"},{"name":"CreateShot","displayName":"CreateShot","usage":"CreateShot(<-image <-start <-target <-speed <-lifetime <-damageCount <-damageMaxDist <-damageAmt <-damageDigiAmt <-damageAC <-hitsTargets <-colliderHitDamage <-sound)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:shots:createshot","kind":"Function","description":"<p>\nCreates a shot, or bullet. <br>\n\nimage: The name of an image to use for the shot. <br>\n\nstart: V2 for the starting position. <br>\n\ntarget: V2 for the target position. <br>\n\nspeed: Float for the speed of the shot. <br>\n\nlifetime: Max number of updates for the shot to live. <br>\n\ndamageCount: Max number of cells of creeper for the shot to damage. <br>\n\ndamageMaxDist: Maximum distance from the point of impact that creeper can be damaged. <br>\n\ndamageAmt: The int amount of damage to deliver to creeper per cell. <br>\n\ndamageDigiAmt: The int amount of damage to deliver to digitalis. <br>\n\ndamageAC: A boolean indicating whether to damage AC. <br>\n\nhitsTargets: An int, 0,1,2 indicating whether to hit units. 0 means hit no units. 1 and 2 indicate different hits layers and specified on units via their “shothitlayer” setting. <br>\n\ncolliderHitDamage: The internal damage to deliver to a hit unit. Defaults to 1. <br>\n\nsound: A string specifying the sound name to play when the shot is created. <br>\n\n</p>"},{"name":"CreateSprite","displayName":"CreateSprite","usage":"CreateSprite(<-image <-origin)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:createsprite","kind":"Function","description":"<p>\nCreates a sprite with image and origin. Origin is a V2 that represents the sprite&#039;s pivot point as a fraction of its size. For instance, an origin of (0,0) causes the sprite to pivot around its bottom-left corner, while an origin of (0.5,0.5) causes it to pivot around its center. Returns the <abbr title=\"Unique Identifier.\">UID</abbr> for the sprite.\n</p>"},{"name":"CreateTable","displayName":"CreateTable","usage":"createTable ->table","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:createtable","kind":"Function","description":"<p>\nCreates an empty table and pushes it to the stack. Tables are Dictionaries that map string keys to values.\n</p>"},{"name":"CreateUI","displayName":"CreateUI","usage":"CreateUi(<-UIName <-json <-data)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:createui","kind":"Function","description":"<p>\nCreates a custom ui with the string UIName as an identifier.  The JSON data specifes the <abbr title=\"User Interface\">UI</abbr>. Data should be a table of name value pairs that the <abbr title=\"User Interface\">UI</abbr> uses.\n</p>"},{"name":"CreateUnit","displayName":"CreateUnit","usage":"CreateUnit(<-unit <-pos <-forceBuilt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:createunit","kind":"Function","description":"<p>\nCreates a new unit as pos. Pos is a V2 position.  ForceBuilt is a boolean that specified is the unit should be completely built when created. <br>\n\nThe “unit” argument is a path to the unit to build.\n</p>"},{"name":"Cross","displayName":"Cross","usage":"Cross(<-vector1 <-vector2) ->crossProduct","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:cross","kind":"Function","description":"<p>\nCalculates the cross product of two vectors. The result is a new vector.\nNOTE:  This routine works with 3 dimensional vectors and less. It does not work with 4 dimensional vectors (the 4th number, w, will be treated as zero).\n</p>"},{"name":"DamageCreeper","displayName":"DamageCreeper","usage":"DamageCreeper(<-x <-y <-count <-dist <-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:damagecreeper","kind":"Function","description":"<p>\nDamages creeper at a map cell.<br>\n\nThe count argument limits the total number of cells that can be damaged.<br>\n\nThe dist specifies the range outwards from the start cell that will be damaged.<br>\n\nThe amt is how much damage to do to each cell.<br>\n\n</p>"},{"name":"DamageInternalHealth","displayName":"DamageInternalHealth","usage":"DamageInternalHealth(<-partUID <-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:damageinternalhealth","kind":"Function","description":"<p>\nDamages the internal health of a unit.\n</p>"},{"name":"Debug","displayName":"Debug","usage":"Debug (“ABC”)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:debug","kind":"Function","description":"<p>\nPrints a value into the game&#039;s log file. Only works when the game is in edit mode!\n</p>\n\n<p>\nThe location of RPL.txt can be found in <a href=\"https://knucklecracker.com/wiki/doku.php?id=cw4:info:player_log\" class=\"wikilink1\" title=\"cw4:info:player_log\" data-wiki-id=\"cw4:info:player_log\">player_log</a>.\n</p>"},{"name":"DebugAllSp","displayName":"DebugAllSp","usage":"DebugAllSp","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:debugallsp","kind":"Function","description":"<p>\nRemoves all the values from the stack and prints them into the game&#039;s log file. The values will be on a single line and <strong>will</strong> be separated by a space when printed.\nOnly works when the game is in edit mode!\n</p>"},{"name":"DeepCopy","displayName":"DeepCopy","usage":"DeepCopy ( <-var) ->deepCopiedVar","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:variables:deepcopy","kind":"Function","description":"<p>\nCreates a copy of the item on the stack with the same contents. Unlike &#039;Copy&#039;, if the copied item is a table or list and contains other lists or tables, those lists and tables will be copied as well (etc, etc).\n</p>"},{"name":"DefaultConfig","displayName":"DefaultConfig","usage":"DefaultConfig(<-partUID <-configName <-configValue)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:defaultconfig","kind":"Function","description":"<p>\nSets the default config data on a unit. <br>\n\nConfig data exists on a unit (not on each part) so the unit associated with the partUID will be referenced.<br>\n\n</p>"},{"name":"Deg2Rad","displayName":"Deg2Rad","usage":"mul(Deg2Rad <-angle)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:deg2rad","kind":"Function","description":"<p>\nPushes the constant to use in converting from degrees to radians to the stack. Multiply this value with a value expressed as degrees to obtain radians.\n</p>"},{"name":"DeployFc","displayName":"DeployFc","usage":"DeployFc(<-FCUID <-deployed)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:deployfc","kind":"Function","description":"<p>\nDeploys/undeploys a field container.\n</p>"},{"name":"DeregisterForMsg","displayName":"DeregisterForMsg","usage":"DeregisterForMSG(<-channel)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:deregisterformsg","kind":"Function","description":"<p>\nDeregisters a script from receiving message callbacks.\n</p>"},{"name":"DeregisterScript","displayName":"DeregisterScript","usage":"DeregisterScript","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:deregisterscript","kind":"Function","description":"<p>\nDeregisters the current script instance. If the script instance is not registered, this call does nothing. \n</p>"},{"name":"Destroy","displayName":"Destroy","usage":"Destroy(<-partUID <-destroyActionEnabled)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:destroy","kind":"Function","description":"<p>\nDestroys a part. If DestroyActionEnabled is false, any associated destroy actions will be skipped.\n</p>"},{"name":"DestroyBeam","displayName":"DestroyBeam","usage":"DestroyBeam(<-partUID <-beamUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:destroybeam","kind":"Function","description":"<p>\nDestroys a beam.\n</p>"},{"name":"DestroyFc","displayName":"DestroyFc","usage":"DestroyFc(<-FCUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:destroyfc","kind":"Function","description":"<p>\nDestroys a field container.\n</p>"},{"name":"DestroySandFromList","displayName":"DestroySandFromList","usage":"DestroySandFromList(<-listOfCoordinates)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:destroysandfromlist","kind":"Function","description":"<p>\nDestroys sand based on the list of coodinates.\n</p>"},{"name":"DestroySandInArea","displayName":"DestroySandInArea","usage":"DestroySandInArea(<-area <-isRound <-sandDefs <-inclusive)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:destroysandinarea","kind":"Function","description":"<p>\nDestroys sand found in the area.<br>\n\nArea is a V4 that specifies the lower left and upper right of an area.<br>\n\nIsRound is a bool that indicates whether the full rectangular area should be used or an elliptical area.<br>\n\nSandDefs is a list that specifes the sand defs to match against.<br>\n\nInclusive is a bool. It indicates where to find only the sand specified in sandDefs, or to find only the sand NOT specified in sandDefs.<br>\n\n</p>"},{"name":"DestroySprite","displayName":"DestroySprite","usage":"DestroySprite(<-spriteUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:destroysprite","kind":"Function","description":"<p>\nDestroys a sprite.\n</p>"},{"name":"DestroyUI","displayName":"DestroyUI","usage":"DestroyUI(<-UIName)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:destroyui","kind":"Function","description":"<p>\nDestroys a custom <abbr title=\"User Interface\">UI</abbr> by name.\n</p>"},{"name":"Distance","displayName":"Distance","usage":"Distance(<-start <-end) ->dist","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:distance","kind":"Function","description":"<p>\nReturns the distance between two given vector positions.\nNote that the vectors can be 1,2,3, or 4 dimensional.\n</p>"},{"name":"DistanceCell","displayName":"DistanceCell","usage":"DistanceCell(<-x <-z <-tX <-tZ) ->dist","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:distancecell","kind":"Function","description":"<p>\nReturns the 2D distance between two given pairs of coordinates. (Or two sets of number pairs on the coordinate plane)\nTypically the passed in values are integers. However, this routine accepts floats and returns a float.\n</p>"},{"name":"DistancePointLine","displayName":"DistancePointLine","usage":"DistancePointLine(<-point <-startLine <-endLine) ->dist","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:distancepointline","kind":"Function","description":"<p>\nReturns the shortest distance between a point and a line.\nThe point, startLine, and endLine are treated as Vector3.\n</p>"},{"name":"div","displayName":"div","usage":"<-a <-b div ->result","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:arithmetic:div","kind":"Function","description":"<p>\nDivides the two arguments together and pushes the result on the stack. the output type (integer or float) depends on the input, except is the result is explicitly cast. See examples.\n</p>"},{"name":"do","displayName":"do","usage":"do(<-limit <-start)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:do","kind":"Keyword","description":"<p>\nThe statements following the do, up to the <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:loop\" class=\"wikilink1\" title=\"ixe:irpl:flow_control:loop\" data-wiki-id=\"ixe:irpl:flow_control:loop\">loop</a> statement, are executed repeatedly.\nAn index counter is initialized to (start). The index will be incremented, or decremented, by one at the bottom of the loop.\nWhen the index counter is one away from the limit, execution will proceed at the first statement following Loop. Loops can be nested, but no more than 3 deep.\n</p>\n\n<p>\nNOTE: If (limit) is less than (start), the the loop decrements rather than increments.\nThe range of a do loop is always [start->limit] (inclusive of start and exclusive of limit).\n</p>"},{"name":"Dot","displayName":"Dot","usage":"Dot(<-vector1 <-vector2) ->dotProduct","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:dot","kind":"Function","description":"<p>\nCalculates the dot product of two vectors\n</p>"},{"name":"dup","displayName":"dup","usage":"dup","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:stack:dup","kind":"Function","description":"<p>\nDuplicates the item currently on the stack without removing the original item.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/warning-yellow.png\" class=\"icon smiley\" alt=\":WARNING:\" > If you do the following, or something similar: <code>CreateList dup ->list1 ->list2</code> This will create a <strong>shallow</strong> copy of the list, so that any changes made to them will affect both. Use <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:variables:deepcopy\" class=\"wikilink1\" title=\"ixe:irpl:variables:deepcopy\" data-wiki-id=\"ixe:irpl:variables:deepcopy\">DeepCopy</a>.\n</p>"},{"name":"dup2","displayName":"dup2","usage":"dup2","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:stack:dup2","kind":"Function","description":"<p>\nDuplicates the top two items currently on the stack without removing the original pair.\n</p>"},{"name":"E","displayName":"E","usage":"e","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:e","kind":"Function","description":"<p>\nPushes the value of Euler’s number (e) to the stack (2.71828…)\n</p>"},{"name":"ElapsedTime","displayName":"ElapsedTime","usage":"ElapsedTime ->time","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:elapsedtime","kind":"Function","description":"<p>\nPushes to the stack the number of milliseconds, as a floating point number, since the application started.\n</p>"},{"name":"else","displayName":"else","usage":"else","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:else","kind":"Keyword","description":"<p>\nWhen an if statement evaluates to false, then the statements following the else, up to the endif, are executed instead.\n</p>"},{"name":"EnableLos","displayName":"EnableLos","usage":"EnableLos(<-partUID <-enable)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:enablelos","kind":"Function","description":"<p>\nWhether or not a part should calculate LOS (line of site) data. LOS calculations incur some computational costs so should only be enabled on parts that need them. The range can be set using the SetLOSRange api.\n</p>"},{"name":"EnableRa","displayName":"EnableRa","usage":"EnableRa(<-partUID <-enabled)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:enablera","kind":"Function","description":"<p>\nEnables/disables the RA (reachable area) calculation for a part. This is used for path calculations like used by rockets as well as for finding deepest creeper.\n</p>"},{"name":"EnableTerpScan","displayName":"EnableTerpScan","usage":"EnableTerpScan(<-partUID <-enabled)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:enableterpscan","kind":"Function","description":"<p>\nEnables/Disables scanning for terrain marked for digging.\n</p>"},{"name":"endcase","displayName":"endcase","usage":"endcase","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:endcase","kind":"Keyword","description":"<p>\nDelimits each <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:case\" class=\"wikilink1\" title=\"ixe:irpl:flow_control:case\" data-wiki-id=\"ixe:irpl:flow_control:case\">case</a> statement that needs to be evaluated.\n</p>"},{"name":"endif","displayName":"endif","usage":"endif","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:endif","kind":"Keyword","description":"<p>\nDeimits the scope of an if-else-statement. Instructions between the if and endif statement are conditionally executed, depending on the results of the if evaluation.\n</p>"},{"name":"endonce","displayName":"endonce","usage":"endonce","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:endonce","kind":"Keyword","description":"<p>\nEnds a block defined by once.\n</p>"},{"name":"endswitch","displayName":"endswitch","usage":"endswitch","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:endswitch","kind":"Keyword","description":"<p>\nDelimits (ends) the <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:switch\" class=\"wikilink1\" title=\"ixe:irpl:flow_control:switch\" data-wiki-id=\"ixe:irpl:flow_control:switch\">switch</a> construct.\n</p>"},{"name":"EndsWith","displayName":"EndsWith","usage":"EndsWith","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:endswith","kind":"Function","description":"<p>\nTakes two strings from the stack and returns whether the first string ends with the second (case sensitive)\n</p>"},{"name":"eq","displayName":"eq","usage":"eq","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:eq","kind":"Function","description":"<p>\nTwo items are popped from the stack and compared for equality. 0 or 1 is pushed back to the stack where 1 indicates equal and 0 (zero) indicates not equal. <br>\n\nThe equal/not equal evaluation can also be performed with “true” (1) and false(0), respectively. <br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n If either item being compared is a float, a float comparison is performed.<br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n If both items being compared are strings, a string comparison is performed.<br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n If both items being compared are vectors, a vector comparison is performed.<br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n If one item is a float and one item is a vector, the float is compared to the vector length.<br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n If none of the above conditions are true, an integer comparison is performed.\n</div></li>\n</ul>\n\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"eq0","displayName":"eq0","usage":"eq0","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:eq0","kind":"Function","description":"<p>\nTop item is popped from the stack and Compared to 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"EV2","displayName":"EV2","usage":"EV2(<-vector) ->vectorY ->vectorX","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:ev2","kind":"Function","description":"<p>\nExpands a vector. Pops a vector from the stack, and pushes back to the stack the first two float elements of the vector.\n</p>"},{"name":"EV3","displayName":"EV3","usage":"EV3(<-vector) ->vectorZ ->vectorY ->vectorX","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:ev3","kind":"Function","description":"<p>\nExpands a vector. Pops a vector from the stack, and pushes back to the stack the first three float elements of the vector.\n</p>"},{"name":"EV4","displayName":"EV4","usage":"EV4(<-vector) ->vectorW ->vectorZ ->vectorY ->vectorX","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:ev4","kind":"Function","description":"<p>\nExpands a vector. Pops a vector from the stack, and pushes back to the stack all four float elements of the vector.\n</p>"},{"name":"false","displayName":"false","usage":"false","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:logic:false","kind":"Constant","description":"<p>\nPushes a 0 (false) onto the stack.\n</p>"},{"name":"FillFcIsland","displayName":"FillFcIsland","usage":"FillFcIsland(<-FCUID <-range <-strength)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:fillfcisland","kind":"Function","description":"<p>\nFills the field container with fields that point to the center of the field container but only where no sand is present and outward from any sand up to range.\n</p>"},{"name":"FillFcLinear","displayName":"FillFcLinear","usage":"FillFcLinear(<-FCUID <-dir)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:fillfclinear","kind":"Function","description":"<p>\nFills the field container with direction fields pointing in dir direction.\n</p>"},{"name":"FillFcPin","displayName":"FillFcPin","usage":"FillFcPin(<-FCUID <-isEllipse)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:fillfcpin","kind":"Function","description":"<p>\nFills in the field container with pin fields.  If isEllipse is false the whole rectangular area is filled, otherwise an elliptical area is used.\n</p>"},{"name":"FillFcRadial","displayName":"FillFcRadial","usage":"FillFcRadial(<-FCUID <-innerRadius <-innerStrength <-outerStrength)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:fillfcradial","kind":"Function","description":"<p>\nFills in a field container with radial fields. InnerRadius is the minimum range to apply fields from the center of the field container.  Inner and OuterStrength specify the strength of the range fields and lerp from inner to outer.  Strength can be negative to reverse the direction of the radial fields.\n</p>"},{"name":"FlashScreen","displayName":"FlashScreen","usage":"FlashScreen(<-frames)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:flashscreen","kind":"Function","description":"<p>\nCauses the screen to flash bright for “frames” duration.\n</p>"},{"name":"floor","displayName":"floor","usage":"floor (<-num) ->num","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:floor","kind":"Function","description":"<p>\nTakes one number from the stack, rounds it down, and pushes that number back on the stack.\n</p>"},{"name":"FromCell","displayName":"FromCell","usage":"FromCell(<-cellZ <-cellX)  ->vector","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:fromcell","kind":"Function","description":"<p>\nTakes a pair of x and y coordinates and creates a vector from them. The values will be placed in the x and y positions of the vector. The inverse operation is <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:tocell\" class=\"wikilink1\" title=\"ixe:irpl:vectors:tocell\" data-wiki-id=\"ixe:irpl:vectors:tocell\">ToCell</a>\n</p>"},{"name":"GetActive","displayName":"GetActive","usage":"GetActive(<-partUID) ->active","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getactive","kind":"Function","description":"<p>\nReturns whether or not the part game object is active or not.\n</p>"},{"name":"GetAcTotal","displayName":"GetAcTotal","usage":"GetAcTotal()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getactotal","kind":"Function","description":"<p>\nReturns the total AC on the map.\n</p>"},{"name":"GetAllMcsKeys","displayName":"GetAllMcsKeys","usage":"GetAllMcsKeys","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getallmcskeys","kind":"Function","description":"<p>\nONLY WORKS FROM THE CONSOLE. Returns a list of all mission completion stat keys.\n</p>"},{"name":"GetAllPixelCount","displayName":"GetAllPixelCount","usage":"GetAllPixelCount(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getallpixelcount","kind":"Function","description":"<p>\nSame as GetPixelCount, except for the entire unit that partUID is a part of. <br>\n\nReturns a V4 with the counts of various pixel states in the part. <br>\n\nThe counts in the V4 are: [NONE, ONBOARD, INROUTE, DEAD]\n</p>"},{"name":"GetAmmo","displayName":"GetAmmo","usage":"GetAmmo(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getammo","kind":"Function","description":"<p>\nReturns the current ammo for the unit that contains partUID.\n</p>"},{"name":"GetApex","displayName":"GetApex","usage":"GetApex","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getapex","kind":"Function","description":"<p>\nReturns the <abbr title=\"Unique Identifier.\">UID</abbr> of the apex ship or -1 if there is no apex.\n</p>"},{"name":"GetArgs","displayName":"GetArgs","usage":"GetArgs()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getargs","kind":"Function","description":"<p>\nReturns a list of the args used to start a console command.\n</p>"},{"name":"GetCameraPosition","displayName":"GetCameraPosition","usage":"GetCameraPosition","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getcameraposition","kind":"Function","description":"<p>\nReturns a V2 with the current camera position.\n</p>"},{"name":"GetCameraZoom","displayName":"GetCameraZoom","usage":"GetCameraZoom","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getcamerazoom","kind":"Function","description":"<p>\nReturns the camera zoom. The zoom is the orthographic size for the camera.\n</p>"},{"name":"GetCategory","displayName":"GetCategory","usage":"GetCategory()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getcategory","kind":"Function","description":"<p>\nReturns a string representing the category this mission is executing in. Almost always “colonies”.<br>\n\nPossible values: regions, tanget, gen, colonies, editor, finalized, demo, none <br>\n\n</p>"},{"name":"GetChild","displayName":"GetChild","usage":"GetChild(<-partUID <-childLookupNameString)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getchild","kind":"Function","description":"<p>\nRetrieves a child by lookup name for a given part. A lookup name is assigned to a part in the json via the “name” attribute. If not present the lookup name defaults to a number that is the count of the part.\n</p>"},{"name":"GetChildren","displayName":"GetChildren","usage":"GetChildren(<-partUID) ->childrenList","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getchildren","kind":"Function","description":"<p>\nPushes a list to the stack that contains all of the children parts.\n</p>"},{"name":"GetControllerArg","displayName":"GetControllerArg","usage":"GetControllerArg(<-partUID <-controllerName <-arg)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getcontrollerarg","kind":"Function","description":"<p>\nGets a controller arg for a part. ControllerName is the string name of the controller. Arg is the string name of the arg.\n</p>"},{"name":"GetControllerArg2","displayName":"GetControllerArg2","usage":"GetControllerArg2(<-partUID <-controllerNumber <-argName)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getcontrollerarg2","kind":"Function","description":"<p>\nGets the value of an arg on a specific part&#039;s controller.  The partUID is the <abbr title=\"Unique Identifier.\">UID</abbr> of a unit or part. The controllerNumer is a number 0,1,2… It specifies the number of the controller. For a part with only one controller, it would be 0. The argName is the string name of the argument.\n</p>"},{"name":"GetConversationOpen","displayName":"GetConversationOpen","usage":"GetConversationOpen","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:getconversationopen","kind":"Function","description":"<p>\nReturns a bool indicating if any conversation is open.\n</p>"},{"name":"GetCreeper","displayName":"GetCreeper","usage":"GetCreeper(<-x <-y) ->creeperAmt","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getcreeper","kind":"Function","description":"<p>\nGets the creeper amount in the cell x,y.  Returns an int creeper amount.\n</p>"},{"name":"GetCreeperInArea","displayName":"GetCreeperInArea","usage":"GetCreeperInArea(<-area <-ac <-withdamage)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getcreeperinarea","kind":"Function","description":"<p>\nAdds up the creeper, or AC, in the specified area.  The area is a V4 that specifies the world position. It specifies the lower left and top right corners of a rectangular area.\nIf “AC” is true, then AC is summed.  If “withDamage” is true then any pending damages is subtracted from the calculated creeper total.\n</p>"},{"name":"GetCreeperOnline","displayName":"GetCreeperOnline","usage":"GetCreeperOnline(<-part <-angle <-range <-hardTarget <-targetAC)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getcreeperonline","kind":"Function","description":"<p>\nLooks for creeper along a line outward from the specified part. HardTarget is a vector representing a world position. If it is non negative, it is specified the end of a line from the part to check for creeper.  If it is negative, then angle and range are used to check along a line. Angle is in degrees.  NOTE: The LOS range limits the check. If you specify a line that exceeds the parts current LOS, cells outside the LOS will not be checked. Use SetLOSRange to increase the LOS range for a part.  \nReturns a vector world position for nearest creeper on the line, or -1,-1 if not found.\n</p>"},{"name":"GetCreeperTotal","displayName":"GetCreeperTotal","usage":"GetCreeperTotal()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getcreepertotal","kind":"Function","description":"<p>\nReturns the total creeper on the map.\n</p>"},{"name":"GetDeepestCreeper","displayName":"GetDeepestCreeper","usage":"GetDeepestCreeper(<-part <-ac <-withDamage)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getdeepestcreeper","kind":"Function","description":"<p>\nFinds the deepest creeper, or AC, within the RA (reachable area) range of a part.  If “withDamage” is true then any pending damages is factored in for determining the deepest creeper. The Reachable Area defaults to 40 but can be changed with the SetRARange api.\n</p>"},{"name":"GetDestroyed","displayName":"GetDestroyed","usage":"GetDestroyed(<-partUID) ->destroyed","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getdestroyed","kind":"Function","description":"<p>\nReturns whether or not the part exists.\n</p>"},{"name":"GetDirRight","displayName":"GetDirRight","usage":"GetDirRight(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:getdirright","kind":"Function","description":"<p>\nReturns a vector for the x axis for the specified part. The value depends on the current rotation of the part.\n</p>"},{"name":"GetDirUp","displayName":"GetDirUp","usage":"GetDirUp(<-i0)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:getdirup","kind":"Function","description":"<p>\nReturns a vector for the y axis for the specified part. The value depends on the current rotation of the part.\n</p>"},{"name":"GetEditMode","displayName":"GetEditMode","usage":"GetEditMode","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:geteditmode","kind":"Function","description":"<p>\nReturns a bool indicating if the game is running in edit mode.\n</p>"},{"name":"GetFc","displayName":"GetFc","usage":"GetFc(<-FCUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:getfc","kind":"Function","description":"<p>\nReturns two V2.  The first is the pos and the second is the size of the field container. Pos will be [int.minValue, int.minValue] if the field container is not found.\n</p>"},{"name":"GetFcs","displayName":"GetFcs","usage":"GetFcs","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:getfcs","kind":"Function","description":"<p>\nReturns a list of all field containers.\n</p>"},{"name":"GetFowRange","displayName":"GetFowRange","usage":"GetFowRange(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getfowrange","kind":"Function","description":"<p>\nGets the FOW (fog of war) range for a part. \n</p>"},{"name":"GetGameMessageOpen","displayName":"GetGameMessageOpen","usage":"GetGameMessageOpen","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:getgamemessageopen","kind":"Function","description":"<p>\nReturns a bool indicating if a game message is currently open.\n</p>"},{"name":"GetGameTickCount","displayName":"GetGameTickCount","usage":"GetGameTickCount","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getgametickcount","kind":"Function","description":"<p>\nPushes the game&#039;s tick count to the stack. The tick count is similar to the game update count, except it always increments even when the game is paused.\nIt only ever goes up through a mission. Ideally, it increases at 30 fps.\n</p>\n\n<p>\nAlso refer to <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getgameupdatecount\" class=\"wikilink1\" title=\"ixe:irpl:game:getgameupdatecount\" data-wiki-id=\"ixe:irpl:game:getgameupdatecount\">GetGameUpdateCount</a> for additional timer-based commands.\n</p>"},{"name":"GetGameUpdateCount","displayName":"GetGameUpdateCount","usage":"GetGameUpdateCount","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getgameupdatecount","kind":"Function","description":"<p>\nReturns the update count for the game. The update count increases by 1 for every game update. It does not increase while the game is paused.\n</p>"},{"name":"GetGlobalList","displayName":"GetGlobalList","usage":"GetGlobalList(<-index) ->data","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:getgloballist","kind":"Function","description":"<p>\nReturns an entry from the global list. The global list is a single list per mission.\n</p>"},{"name":"GetGlobalTable","displayName":"GetGlobalTable","usage":"GetGlobalTable(“key”) ->data","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:getglobaltable","kind":"Function","description":"<p>\nReturns an entry from the global table. The global table is a single table per mission.\n</p>"},{"name":"GetHelpOpen","displayName":"GetHelpOpen","usage":"GetHelpOpen","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:gethelpopen","kind":"Function","description":"<p>\nReturns a bool indicating of the video help is open.\n</p>"},{"name":"GetInternalHealth","displayName":"GetInternalHealth","usage":"GetInternalHealth(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getinternalhealth","kind":"Function","description":"<p>\nReturns the current internal health for the unit that contains partUID.\n</p>"},{"name":"GetInventory","displayName":"GetInventory","usage":"GetInventory","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:inventory:getinventory","kind":"Function","description":"<p>\nReturns a list of tables representing the inventory. Each entry in the list is a table with three keys:<br>\n\nplan, count, maxcount.\n</p>"},{"name":"GetKey","displayName":"GetKey","usage":"GetKey(<-key <-ignoreWhenOverUI)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getkey","kind":"Function","description":"<p>\nReturns a boolean indicating if the specified key is held down.<br>\n\nNote: This returns true for as long as the key is pressed.<br>\n\nThe first argument is a string and specifies which key to check.<br>\n\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.<br>\n\nThe list possible string for the first argument can be derived from the properties here: <br>\n\n<a href=\"https://knucklecracker.comhttps://docs.unity3d.com/ScriptReference/KeyCode.html\" class=\"urlextern\" title=\"https://docs.unity3d.com/ScriptReference/KeyCode.html\" rel=\"ugc nofollow\"> KeyCode</a>.<br>\n\n</p>"},{"name":"GetKeyDown","displayName":"GetKeyDown","usage":"GetKeyDown(<-key <-ignoreWhenOverUI)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getkeydown","kind":"Function","description":"<p>\nReturns a boolean indicating if the specified Key was pressed during the game frame.<br>\n\nNote: This only return true once until the key is released and pressed again.<br>\n\nThe first argument is a string that specifies which key to check.<br>\n\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.<br>\n\nThe list possible string for the first argument can be derived from the properties here: <br>\n\n<a href=\"https://knucklecracker.com/wiki/doku.php?id=https:docs.unity3d.com_scriptreference_keycode.html\" class=\"wikilink2\" title=\"https:docs.unity3d.com_scriptreference_keycode.html\" rel=\"nofollow\" data-wiki-id=\"https:docs.unity3d.com_scriptreference_keycode.html\"> Keys</a><br>\n\n</p>"},{"name":"GetListCount","displayName":"GetListCount","usage":"GetListCount(<-list) ->listSize","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:getlistcount","kind":"Function","description":"<p>\nReturns the number of entries in a list.\n</p>"},{"name":"GetListElement","displayName":"GetListElement","usage":"GetListElement (<-list I) ->element","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:getlistelement","kind":"Function","description":"<div class=\"li\"><a href=\"https://knucklecracker.com#description\">Description</a></div>"},{"name":"GetListIndex","displayName":"GetListIndex","usage":"GetListIndex(<-list <-item) ->index","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:getlistindex","kind":"Function","description":"<p>\nReturns the index of the first occurrence of item in the list.  Returns -1 if not found\n</p>"},{"name":"GetListIndices","displayName":"GetListIndices","usage":"GetListIndices(<-list <-item) ->indices","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:getlistindices","kind":"Function","description":"<p>\nReturns a list containing the indices for each occurrence of item in the list.  Returns an empty list if item is not found\n</p>"},{"name":"GetLocalPosition","displayName":"GetLocalPosition","usage":"GetLocalPosition(<-partUID) ->localPositionVector","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getlocalposition","kind":"Function","description":"<p>\nReturns the local position of the part as a vector2. The local position is relative to the parent the part is a child of.\n</p>"},{"name":"GetLocalRotation","displayName":"GetLocalRotation","usage":"GetLocalRotation(<-partUID) ->localRotationInDegrees","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getlocalrotation","kind":"Function","description":"<p>\nGets the local rotation, in degrees, for the part.\n</p>"},{"name":"GetLog","displayName":"GetLog","usage":"GetLog(<-part <-num)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getlog","kind":"Function","description":"<p>\nReturns a string that represents the last “num” number of line of a log for any specified part. A part can have a script attached and this is a way to get the log for a part&#039;s script.\n</p>"},{"name":"GetLos","displayName":"GetLos","usage":"GetLos(<-partUID <-cellX <-cellY)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getlos","kind":"Function","description":"<p>\nReturns a bool indicating if the specified coordinates has LOS from the part.  Note that LOS calculations must be enabled on the part and the coordinates must be in range \nas determined by the part&#039;s LOS range.\n</p>"},{"name":"GetLosRange","displayName":"GetLosRange","usage":"GetLosRange(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getlosrange","kind":"Function","description":"<p>\nReturns the current LOS range for a part.\n</p>"},{"name":"GetLosSandPassBits","displayName":"GetLosSandPassBits","usage":"GetLosSandPassBits(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getlossandpassbits","kind":"Function","description":"<p>\nReturns the LOS sand pass bits.<br>\n\nBits is an int where the bits determine which sand blocks LOS. A sand def contains a “blocks los” field consisting of a byte. The bits of this byte are matched against\nthe bits passed into this <abbr title=\"Application Programming Interface\">API</abbr> to determine if a LOS calcuation is blocked by the sand.\n</p>"},{"name":"GetMappedKey","displayName":"GetMappedKey","usage":"GetMappedKey(<-key <-ignoreWhenOverUI)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getmappedkey","kind":"Function","description":"<p>\nReturns a boolean indicating if the specified key is held down.<br>\n\nNote: This returns true for as long as the key is pressed.<br>\n\nThe first argument is a string that specifies the key mapping constant, as defined in Settings/Controls. <br>\n\nTo see the mappings, bring up Settings/Controls and point at one of the key mapping buttons. The Mapping name will appear on the left under the name.<br>\n\nNote that the mapping name is case sensitive.<br>\n\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.<br>\n\n</p>"},{"name":"GetMappedKeyDown","displayName":"GetMappedKeyDown","usage":"GetMappedKeyDown(<-key <-ignoreWhenOverUI)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getmappedkeydown","kind":"Function","description":"<p>\nReturns a boolean indicating if the specified Key was pressed during the game frame.<br>\n\nNote: This only return true once until the key is released and pressed again.<br>\n\nThe first argument is a string that specifies the key mapping constant, as defined in Settings/Controls. <br>\n\nTo see the mappings, bring up Settings/Controls and point at one of the key mapping buttons. The Mapping name will appear on the left under the name.<br>\n\nNote that the mapping name is case sensitive.<br>\n\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.<br>\n\n</p>"},{"name":"GetMappedKeyStrings","displayName":"GetMappedKeyStrings","usage":"GetMappedKeyStrings(<-key)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getmappedkeystrings","kind":"Function","description":"<p>\nGiven the name of a mapped key, returnns the primary and secondary bindings, if defined.\n</p>"},{"name":"GetMapSandCount","displayName":"GetMapSandCount","usage":"GetMapSandCount(<-sandDef)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:getmapsandcount","kind":"Function","description":"<p>\nReturns the count across the whole map for the specified sand def.\n</p>"},{"name":"GetMaxAmmo","displayName":"GetMaxAmmo","usage":"GetMaxAmmo(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getmaxammo","kind":"Function","description":"<p>\nReturns the current max ammo for the unit that contains partUID.\n</p>"},{"name":"GetMaxInternalHealth","displayName":"GetMaxInternalHealth","usage":"GetMaxInternalHealth(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getmaxinternalhealth","kind":"Function","description":"<p>\nReturns the current max internal health for the unit that contains partUID.\n</p>"},{"name":"GetMcsItem","displayName":"GetMcsItem","usage":"GetMcsItem(<-item)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getmcsitem","kind":"Function","description":"<p>\nONLY WORKS FROM THE CONSOLE. Gets an item by name from the mission completion stats.\n</p>"},{"name":"GetMissionCompletionDialogOpen","displayName":"GetMissionCompletionDialogOpen","usage":"GetMissionCompletionDialogOpen","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getmissioncompletiondialogopen","kind":"Function","description":"<p>\nReturns a bool indicating if the mission completion dialog is currently open.\n</p>"},{"name":"GetMissionRequirementsMet","displayName":"GetMissionRequirementsMet","usage":"GetMissionRequirementsMet()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getmissionrequirementsmet","kind":"Function","description":"<p>\nReturns a bool indicating if mission requiresment are met.\n</p>"},{"name":"GetMouseButton","displayName":"GetMouseButton","usage":"GetMouseButton(<-mouseButton <-ignoreWhenOverUI)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getmousebutton","kind":"Function","description":"<p>\nReturns a bool when the mouse button is pressed.  MouseButton is 0,1,2,3,4 where 0 is left mouse and 1 is right mouse.\n</p>"},{"name":"GetMouseButtonDown","displayName":"GetMouseButtonDown","usage":"GetMouseButtonDown(<-mouseButton)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getmousebuttondown","kind":"Function","description":"<p>\nReturns a bool during the frame that the mouse button is pressed.  MouseButton is 0,1,2,3,4 where 0 is left mouse and 1 is right mouse.\n</p>"},{"name":"GetMouseButtonUp","displayName":"GetMouseButtonUp","usage":"GetMouseButtonUp(<-mouseButton)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getmousebuttonup","kind":"Function","description":"<p>\nReturns a bool during the frame that the mouse button is released.  MouseButton is 0,1,2,3,4 where 0 is left mouse and 1 is right mouse.\n</p>"},{"name":"GetMouseCell","displayName":"GetMouseCell","usage":"GetMouseCell()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getmousecell","kind":"Function","description":"<p>\nReturns a V2 world position for the mouse. The V2 will contain ints.\n</p>"},{"name":"GetMousePos","displayName":"GetMousePos","usage":"GetMousePos()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:getmousepos","kind":"Function","description":"<p>\nReturns a V2 world position for the mouse.\n</p>"},{"name":"GetName","displayName":"GetName","usage":"GetName(<-partUID) ->partName","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getname","kind":"Function","description":"<p>\nGets the name of the part. This is not the lookup name, it is the actual part name consisting of the full path to the part.\n</p>"},{"name":"GetNearestCreeper","displayName":"GetNearestCreeper","usage":"GetNearestCreeper(<-partUID <-isAC)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getnearestcreeper","kind":"Function","description":"<p>\nReturns a vector world position for the creeper nearest the specified part. Returns -1,-1 if there creeper.\nIf isAC is true, then AC is checked for. Otherwise, creeper is checked for. The range that is used for the check is determined by the LOS range of the part. \nThe LOS range defaults to 34 but can be changed with the SetLOSRange call.\n</p>"},{"name":"GetNullifiableUnitsInRange","displayName":"GetNullifiableUnitsInRange","usage":"GetNullifiableUnitsInRange(<-x <-y <-range)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getnullifiableunitsinrange","kind":"Function","description":"<p>\nScans through all units and returns a list containg units that are nullifiable and in “range” of [x,y].\n</p>"},{"name":"GetOnBoardComplete","displayName":"GetOnBoardComplete","usage":"GetOnBoardComplete(<-part <-slack <-includeChildren)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getonboardcomplete","kind":"Function","description":"<p>\nReturns a bool indicating if pixels are all present in a part. Slack is the number that can be absent and the part still counts as complete.  IncludeChildren means to look at all of the parts children as well.\n</p>"},{"name":"GetOverAc","displayName":"GetOverAc","usage":"GetOverAc(<-partUID <-wholeUnit)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getoverac","kind":"Function","description":"<p>\nReturns true when the part is over AC.  If “wholeUnit” is true, the the entire unit for the part will be checked. If false, then only the part&#039;s pixels are checked.\n</p>"},{"name":"GetOverCreeper","displayName":"GetOverCreeper","usage":"GetOverCreeper(<-partUID <-wholeUnit)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:getovercreeper","kind":"Function","description":"<p>\nReturns true when the part is over creeper.  If “wholeUnit” is true, the the entire unit for the part will be checked. If false, then only the part&#039;s pixels are checked.\n</p>"},{"name":"GetOverSand","displayName":"GetOverSand","usage":"GetOverSand(<-partUID <-wholeUnit)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:getoversand","kind":"Function","description":"<p>\nReturns true when the part is over sand of any type.  If “wholeUnit” is true, the the entire unit for the part will be checked. If false, then only the part&#039;s pixels are checked.\n</p>"},{"name":"GetParent","displayName":"GetParent","usage":"GetParent(<-partUID) ->parentUID","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getparent","kind":"Function","description":"<p>\nPushes the <abbr title=\"Unique Identifier.\">UID</abbr> of the part&#039;s parent to the stack\n</p>"},{"name":"GetPartData","displayName":"GetPartData","usage":"GetPartData(<-i0)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getpartdata","kind":"Function","description":"<p>\nReturns a table containing these keys: “uid”, “name”, “parts”. “uid” is the uid of the part, “name” is the string name of the part, and “parts” is a list containing the uid of any children parts.\n</p>"},{"name":"GetPause","displayName":"GetPause","usage":"GetPause","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getpause","kind":"Function","description":"<p>\nReturns a boolean indicating if the game is paused.\n</p>"},{"name":"GetPhysicsVelocity","displayName":"GetPhysicsVelocity","usage":"GetPhysicsVelocity(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getphysicsvelocity","kind":"Function","description":"<p>\nGets the physics velocity (V2) of a unit containing part.\n</p>"},{"name":"GetPixelCount","displayName":"GetPixelCount","usage":"GetPixelCount(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getpixelcount","kind":"Function","description":"<p>\nReturns a V4 with the counts of various pixel states in the part. <br>\n\nThe counts in the V4 are: [NONE, ONBOARD, INROUTE, DEAD]\n</p>"},{"name":"GetPosition","displayName":"GetPosition","usage":"GetPosition(<-partUID) ->positionVector","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getposition","kind":"Function","description":"<p>\nReturns the world position of the part as a vector2.\n</p>"},{"name":"GetPositionHelpButton","displayName":"GetPositionHelpButton","usage":"GetPositionHelpButton()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getpositionhelpbutton","kind":"Function","description":"<p>\nReturns a V2 for the screen position of the help control.\n</p>"},{"name":"GetPositionInventoryButton","displayName":"GetPositionInventoryButton","usage":"GetPositionInventoryButton(<-plan)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getpositioninventorybutton","kind":"Function","description":"<p>\nLookup the button in the inventory based on the type  passed in.  If found return a V2 for the center of the button in screen coordinates. If not, return -1,-1.\n</p>"},{"name":"GetPositionPauseControl","displayName":"GetPositionPauseControl","usage":"GetPositionPauseControl()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getpositionpausecontrol","kind":"Function","description":"<p>\nReturns a V2 for the screen position of the pause control.\n</p>"},{"name":"GetPositionTerpControls","displayName":"GetPositionTerpControls","usage":"GetPositionTerpControls()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getpositionterpcontrols","kind":"Function","description":"<p>\nReturns a V2 for the screen position of the digging controls.\n</p>"},{"name":"GetPowerGeneration","displayName":"GetPowerGeneration","usage":"GetPowerGeneration(<-i0)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getpowergeneration","kind":"Function","description":"<p>\nReturns the power generation of a single partUID.\n</p>"},{"name":"GetPrintPrefixEnabled","displayName":"GetPrintPrefixEnabled","usage":"GetPrintPrefixEnabled ->enabled","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:getprintprefixenabled","kind":"Function","description":"<p>\nGets if print statements should prefix each output with the name of the script. On by default.\n</p>"},{"name":"GetRandPixelDataPos","displayName":"GetRandPixelDataPos","usage":"GetRandPixelDataPos(<-part <-pixelState <-sandDef)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getrandpixeldatapos","kind":"Function","description":"<p>\nFor a specified part, returns the vector world position of a random location that contains a part pixel in the specified pixelState and that is over the specified sandDef.\nThe sandDef can be -1 to ignore the sand type. The pixelState should be one of:\n0 = NONE, 1 = ONBOARD, 2 = INROUTE, 3 = DEAD\n</p>"},{"name":"GetRaPath","displayName":"GetRaPath","usage":"GetRaPath(<-partUID <-locationVector)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getrapath","kind":"Function","description":"<p>\nReturns a list consisting of V2 coordinates representing the RA (reachable area) path from the part to the location, a V2 coordinate. This is the same sort of path that a rocket might follow.\n</p>"},{"name":"GetRaRange","displayName":"GetRaRange","usage":"GetRaRange(<-i0)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getrarange","kind":"Function","description":"<p>\nGets the RA (reachable area) range.\n</p>"},{"name":"GetRegisteredScriptVar","displayName":"GetRegisteredScriptVar","usage":"GetRegisteredScriptVar(<-RegisteredScriptName <-varName) ->val","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getregisteredscriptvar","kind":"Function","description":"<p>\nGets the named variable on the specified registered script. The value returned will be a direct instance of the var held by registered script instance. If the registered script not exist, a null value (equivalent to 0) is returned.\n</p>"},{"name":"GetReturningToOrbit","displayName":"GetReturningToOrbit","usage":"GetReturningToOrbit","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getreturningtoorbit","kind":"Function","description":"<p>\nReturns a bool indicating if the mission is ending.\n</p>"},{"name":"GetRotation","displayName":"GetRotation","usage":"GetRotation(<-partUID) ->rotationInDegrees","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getrotation","kind":"Function","description":"<p>\nGets the world rotation, in degrees, for the part.\n</p>"},{"name":"GetSand","displayName":"GetSand","usage":"GetSand(<-x <-y)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:getsand","kind":"Function","description":"<p>\nReturns the integer sand def of the sand at the specified coordinates.\n</p>"},{"name":"GetSandDef","displayName":"GetSandDef","usage":"GetSandDef(<-sandName)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:getsanddef","kind":"Function","description":"<p>\nDeprecated <abbr title=\"Application Programming Interface\">API</abbr>. Do not use.\n</p>"},{"name":"GetSandDefData","displayName":"GetSandDefData","usage":"GetSandDefData(<-sandDef)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:getsanddefdata","kind":"Function","description":"<p>\nReturns a table of sand definition data for the specified sand type. The sand definition data is the same as found in the editor when editor a sand definition.\nbyte simulator <br>\n\nbyte colorMode; [fixed, texture, blend, flicker, ab, checker, liquid, liquid creeper gravity, pulsate, lerp] <br>\n\nColor32 color <br>\n\nColor32 color2 <br>\n\nColor32 glow <br>\n\nfloat lightNormal <br>\n\nbool contrastEdge <br>\n\nbool creeperBlocks <br>\n\nushort ttlLower <br>\n\nushort ttlUpper <br>\n\nbool ttlNeighbors <br>\n\nbyte ttlConvertToSandDef <br>\n\nint creeperFlowHeight <br>\n\nbyte canTerp <br>\n\nint2 creeperGravity <br>\n\nsbyte creeperDamages <br>\n\nbool blocksUnits <br>\n\nbool blocksUnitMovement <br>\n\nbyte blocksLOS <br>\n\nbyte breederType; [1: C/AC,   2: C,   3: AC,   4: C Absorber, 5: C Maker, 6: AC Maker] <br>\n\nushort maxHealth <br>\n\nbool shield <br>\n\nbool onFire <br>\n\nbool cold <br>\n\nushort fireAmt <br>\n\nbyte spreadRate <br>\n\nbyte pinCreeper <br>\n\nbyte energyAmt <br>\n\nbool isAcid <br>\n\nbool damagedByAcid <br>\n\nbyte damagesUnitAmt <br>\n\nbyte damageUnitConvertToSandDef<br>\n\nbyte damagesEnemyUnitAmt<br>\n\nbyte damageEnemyUnitConvertToSandDef <br>\n\nbyte density <br>\n\nbool splashes <br>\n\nbyte creeperDamageConvertToSandDef <br>\n\nint embeddedCreeper <br>\n\nbool actionsEnabled <br>\n\nbyte fireSpreadRate <br>\n\nbyte explosionAmt <br>\n\nbyte explosionAffects <br>\n\n</p>"},{"name":"GetSandInArea","displayName":"GetSandInArea","usage":"GetSandInArea(<-area <-isRound <-sandDefs <-inclusive)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:getsandinarea","kind":"Function","description":"<p>\nReturns a list of sand found in the area.  Each entry in the list is a V3 where x and y are the position of the sand and z is the sand def.<br>\n\nArea is a V4 that specifies the lower left and upper right of an area.<br>\n\nIsRound is a bool that indicates whether the full rectangular area should be used or an elliptical area.<br>\n\nSandDefs is a list that specifes the sand defs to match against.<br>\n\nInclusive is a bool. It indicates where to find only the sand specified in sandDefs, or to find only the sand NOT specified in sandDefs.<br>\n\n</p>"},{"name":"GetSandParticle","displayName":"GetSandParticle","usage":"GetSandParticle(<-x <-y)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sandparticle:getsandparticle","kind":"Function","description":"<p>\nReturns a table for the sand particle found at the specified x,y coordinates.  The table contains the following keys:<br>\n\n“sandDef”, “creeper”, “pos”, “lastPos”, “color”, “glow”, “maxAge”, “ignoreOccupied”, “createSandWhenOccupied”, “damagesUnits”, “damagesUnitsAmt”, “alive”\n</p>"},{"name":"GetSandParticleCountInRange","displayName":"GetSandParticleCountInRange","usage":"GetSandParticleCountInRange(<-partUID <-range <-sandDef <-destroy)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sandparticle:getsandparticlecountinrange","kind":"Function","description":"<p>\nReturns a count of the specified sand particles in range. Can also optionally destroy them.  The sandDef can be 255, which means to match any sand particle. or specify a particular sand type for the sand particles to match.\n</p>"},{"name":"GetScreenSize","displayName":"GetScreenSize","usage":"GetScreenSize","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getscreensize","kind":"Function","description":"<p>\nReturns a V2 that is the screen width, height.\n</p>"},{"name":"GetScript1Var","displayName":"GetScript1Var","usage":"GetScript1Var(<-unit <-varName) ->val","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getscript1var","kind":"Function","description":"<p>\nGets the named variable on the specified unit&#039;s first script.\nThe value returned will be a direct instance of the var held by the unit.\nIf the unit or var does not exit, a null value (equivalent to 0) is returned.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" > Although input/init variables ($varName:&lt;VARIABLE TYPE&gt;) are technically the unit settings of a custom unit, they are still variables and applicable to this <abbr title=\"Application Programming Interface\">API</abbr>.\n</p>"},{"name":"GetScriptVar","displayName":"GetScriptVar","usage":"GetScriptVar(<-unit <-scriptName <-varName) ->val","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getscriptvar","kind":"Function","description":"<p>\nGets the named variable on the specified unit and script.<br>\n\nThe script is referenced by name. If the name is an empty string, the first (possibly only) script on the unit will be referenced. The extention “.irpl” must be included.<br>\n\nThe value returned will be a direct instance of the var held by the unit. If the unit or var does not exit, a null value (equivalent to 0) is returned.\n</p>"},{"name":"GetSelectedUnits","displayName":"GetSelectedUnits","usage":"GetSelectedUnits","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getselectedunits","kind":"Function","description":"<p>\nReturns a list with the UIDs of all selected units.\n</p>"},{"name":"GetShieldsEnabled","displayName":"GetShieldsEnabled","usage":"GetShieldsEnabled","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getshieldsenabled","kind":"Function","description":"<p>\nReturns a bool indicating if shields can be built in the mission.\n</p>"},{"name":"GetShotHitUnitsInRange","displayName":"GetShotHitUnitsInRange","usage":"GetShotHitUnitsInRange(<-x <-y <-range)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getshothitunitsinrange","kind":"Function","description":"<p>\nScans through all units and returns a list containg units that can be hit by shots and in “range” of [x,y].\n</p>"},{"name":"GetShowRange","displayName":"GetShowRange","usage":"GetShowRange(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getshowrange","kind":"Function","description":"<p>\nReturns the range indicator distance for a part.\n</p>"},{"name":"GetShowRangeColor","displayName":"GetShowRangeColor","usage":"GetShowRangeColor(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getshowrangecolor","kind":"Function","description":"<p>\nReturns the color for the range indicator for a part.\n</p>"},{"name":"GetTableCount","displayName":"GetTableCount","usage":"GetTableCount(<-table) ->count","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:gettablecount","kind":"Function","description":"<p>\nReturns the number of keys (and hence values) in a table.\n</p>"},{"name":"GetTableElement","displayName":"GetTableElement","usage":"GetTableElement(<-table <-key) ->value","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:gettableelement","kind":"Function","description":"<p>\nRetrieves an element from a table and pushes it to the stack. Note that keys are case sensitive strings.\nA special syntax can also be used to retrieve a table element. See the example below.\n</p>\n\n<p>\nIf the specified element (key) does not exists in the table, the return value will have a type of NULL and can be tested with the <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:gettype\" class=\"wikilink2\" title=\"ixe:irpl:tables:gettype\" rel=\"nofollow\" data-wiki-id=\"ixe:irpl:tables:gettype\">GetType</a> command.\n</p>"},{"name":"GetTableKeys","displayName":"GetTableKeys","usage":"GetTableKeys(<-table) ->keysList","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:gettablekeys","kind":"Function","description":"<p>\nReturns a list containing the keys of the specified table.\n</p>"},{"name":"GetTableValues","displayName":"GetTableValues","usage":"GetTableValues(<-table) ->valuesList","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:gettablevalues","kind":"Function","description":"<p>\nReturns a list containing the values of the specified table.\n</p>"},{"name":"GetTerpControlsOpen","displayName":"GetTerpControlsOpen","usage":"GetTerpControlsOpen()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getterpcontrolsopen","kind":"Function","description":"<p>\nReturns a bool indicating of the digging controls are open.\n</p>"},{"name":"GetTerpScanHarvestResult","displayName":"GetTerpScanHarvestResult","usage":"GetTerpScanHarvestResult(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getterpscanharvestresult","kind":"Function","description":"<p>\nReturns a V2 for the coordinate of a found harvest sand. If Terp Scanning is enabled for a part the nearest harvest sand in range will be found and returned by this <abbr title=\"Application Programming Interface\">API</abbr>. A vector of [-1,-1] will be returned if there is no harvest sand found.\n</p>"},{"name":"GetTerpScanResult","displayName":"GetTerpScanResult","usage":"GetTerpScanResult(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getterpscanresult","kind":"Function","description":"<p>\nReturns a V2 for the coordinate to dig. If Terp Scanning is enabled for a part, nearby areas marked for digging will be found and this <abbr title=\"Application Programming Interface\">API</abbr> can return the result of the location to dig. A vector of [-1,-1] will be returned if there is no cell found to dig.\n</p>"},{"name":"GetTimer0","displayName":"GetTimer0","usage":"GetTimer0 ->val","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:gettimer0","kind":"Function","description":"<p>\nGets the current value of timer 0. Timers are set to some value, and the decrease by 1 each game frame.\n</p>"},{"name":"GetTimer1","displayName":"GetTimer1","usage":"GetTimer1 ->val","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:gettimer1","kind":"Function","description":"<p>\nGets the current value of timer 1. Timers are set to some value, and the decrease by 1 each game frame.\n</p>"},{"name":"GetTimer2","displayName":"GetTimer2","usage":"GetTimer2 ->val","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:gettimer2","kind":"Function","description":"<p>\nGets the current value of timer 2. Timers are set to some value, and the decrease by 1 each game frame.\n</p>"},{"name":"GetTimer3","displayName":"GetTimer3","usage":"GetTimer3 ->val","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:gettimer3","kind":"Function","description":"<p>\nGets the current value of timer 3. Timers are set to some value, and the decrease by 1 each game frame.\n</p>"},{"name":"GetTimeString","displayName":"GetTimeString","usage":"GetTimeString(<-frameCount)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:gettimestring","kind":"Function","description":"<p>\nTake a framecount and returns a string representing a time in seconds, accurate to 0.1 seconds.\n</p>"},{"name":"GetTotalPowerGeneration","displayName":"GetTotalPowerGeneration","usage":"GetTotalPowerGeneration(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:gettotalpowergeneration","kind":"Function","description":"<p>\nReturns the power generation of a unit containing partUID.\n</p>"},{"name":"GetType","displayName":"GetType","usage":"GetType (<-something) ->typeOfSomething","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:data:gettype","kind":"Function","description":"<p>\nTakes a value and returns a string of what type of value it is. Types: STRING INT FLOAT VECTOR LIST TABLE NULL\n</p>"},{"name":"GetUIExists","displayName":"GetUIExists","usage":"GetUIExists(<-UIName)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:getuiexists","kind":"Function","description":"<p>\nReturns a bool if the named <abbr title=\"User Interface\">UI</abbr> exists.\n</p>"},{"name":"GetUnitsByName","displayName":"GetUnitsByName","usage":"GetUnitsByName(<-unitName)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getunitsbyname","kind":"Function","description":"<p>\nScans through all units and returns a list contaning units that match unitName.\n</p>"},{"name":"GetUnitsInRange","displayName":"GetUnitsInRange","usage":"GetUnitsInRange(<-x <-y <-range <-nameList)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getunitsinrange","kind":"Function","description":"<p>\nScans through all units and returns a list containg units that are in “range” of [x,y]. <br>\n\nNameList, which can be empty, is a list of acceptable unit names to match.\n</p>"},{"name":"GetUnitUpdateCount","displayName":"GetUnitUpdateCount","usage":"GetUnitUpdateCount(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getunitupdatecount","kind":"Function","description":"<p>\nReturns the unit update count for the unit containing partUID.\n</p>"},{"name":"GetUpgradeBoost","displayName":"GetUpgradeBoost","usage":"GetUpgradeBoost()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getupgradeboost","kind":"Function","description":"<p>\nReturns the current upgrade boost in the form of an integer equal to the number of upgrade gems collected.\n</p>"},{"name":"GetZoomForWidth","displayName":"GetZoomForWidth","usage":"GetZoomForWidth(<-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:getzoomforwidth","kind":"Function","description":"<p>\nReturns (val * Screen.height) / (Screen.width * 2)\n</p>"},{"name":"gt","displayName":"gt","usage":"5 gt (4)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:gt","kind":"Function","description":"<p>\nThe first item on the stack is compared to the second item on the stack. Both items are removed from the stack. If the first item is greater than the second, True (1) is pushed to the stack. If not, False (o) is pushed to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"gt0","displayName":"gt0","usage":"gt0","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:gt0","kind":"Function","description":"<p>\nTop item is popped from the stack and compared if greater than 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"gte","displayName":"gte","usage":"5 gte (5)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:gte","kind":"Function","description":"<p>\nThe first item on the stack is compared to the second item on the stack. Both items are removed from the stack. If the first item is greater than or equal to the second, True (1) is pushed to the stack. If not, False (o) is pushed to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"gte0","displayName":"gte0","usage":"gte0","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:gte0","kind":"Function","description":"<p>\nTop item is popped from the stack and compared if greater than or equal 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"HalfPI","displayName":"HalfPI","usage":"HALFPI","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:halfpi","kind":"Function","description":"<p>\nPushes the value of PI/2 to the stack.\n</p>"},{"name":"HasInventory","displayName":"HasInventory","usage":"HasInventory(<-plan <-minCount <-IsMax)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:inventory:hasinventory","kind":"Function","description":"<p>\nReturns a bool if the plan is available.  MinCount is the minimum count that must be available.  If IsMax is true, then the maxCount is compared to minCount rather than available count.\n</p>"},{"name":"HasSandParticle","displayName":"HasSandParticle","usage":"HasSandParticle(<-x <-y)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sandparticle:hassandparticle","kind":"Function","description":"<p>\nReturns a bool if the x,y position has a sand particle.\n</p>"},{"name":"HasSelectedUnit","displayName":"HasSelectedUnit","usage":"HasSelectedUnit(<-type)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:hasselectedunit","kind":"Function","description":"<p>\nScans through selected units and returns a bool indicating if any are of the specified string type.\n</p>"},{"name":"I","displayName":"I","usage":"I","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:i","kind":"Function","description":"<p>\nCurrent loop index. Pushes the value of the current “do” loop onto the stack. Only use within loops.\n</p>\n\n<p>\nNote that I refers to the innermost loop. As loops are nested, I will continue to reference the innermost of the nested loops.\n</p>"},{"name":"if","displayName":"if","usage":"if (<-var1 eq (<-var2))","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:if","kind":"Keyword","description":"<p>\nEvaluate the first element on the stack. If True, then execute statements that follow, up to the endif or else statement. If False, execution skips to the first statement following the endif or else statement. Any nonzero value is considered True, a value of zero is False.\n</p>"},{"name":"InsertListElement","displayName":"InsertListElement","usage":"InsertListElement(<-list 3 <-value)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:insertlistelement","kind":"Function","description":"<p>\nStores a value at the specified index of a list. The previously stored value, and all subsequent values have their indices shifted up by one.\n</p>\n\n<p>\nNote that insertion beyond the current list size is not supported. Use <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:appendtolist\" class=\"wikilink1\" title=\"ixe:irpl:lists:appendtolist\" data-wiki-id=\"ixe:irpl:lists:appendtolist\">AppendToList</a> or <a href=\"/wiki/doku.php?id=ixe:irpl:lists:pushlist\" class=\"wikilink1\" title=\"ixe:irpl:lists:pushlist\" data-wiki-id=\"ixe:irpl:lists:pushlist\">Pushlist</a> in that instance. \n</p>"},{"name":"IsDestroyActionEnabled","displayName":"IsDestroyActionEnabled","usage":"IsDestroyActionEnabled(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:isdestroyactionenabled","kind":"Function","description":"<p>\nReturn a bool indicating if destroy actions are enabled on a part.\n</p>"},{"name":"IsNull","displayName":"IsNull","usage":"IsNull (<-something) ->isNull","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:data:isnull","kind":"Function","description":"<pre class=\"code 4rpl\">CreateList <span class=\"re0\">-&gt;emptyList</span>\nPopList<span class=\"br0\">&#40;</span><span class=\"re0\">&lt;-emptyList</span><span class=\"br0\">&#41;</span> <span class=\"re0\">-&gt;nulItem</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">&#40;</span>isNull<span class=\"br0\">&#40;</span><span class=\"re0\">&lt;-nullItem</span><span class=\"br0\">&#41;</span><span class=\"br0\">&#41;</span>\n   trace<span class=\"br0\">&#40;</span><span class=\"st0\">&quot;Null Item&quot;</span><span class=\"br0\">&#41;</span>\n<span class=\"kw1\">endif</span></pre>"},{"name":"IsPassable","displayName":"IsPassable","usage":"IsPassable(<-pos1 <-pos2 <-boundingRect <-allowDigToPass)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:ispassable","kind":"Function","description":"<p>\nChecks to see if there is a sand passable path between two points, constrained by a bounds. Returns a bool. <br>\n\npos1 and pos2 are vectors specifying the start and end world locations. <br>\n\nThe boundingRect is a V4 that specifies the area to check in. It specifies the lower left and upper right world positions of a rectangle. <br>\n\nThe “allowDigToPass” bool means that area marked for digging will count as passable.\n</p>"},{"name":"IsSandEmpty","displayName":"IsSandEmpty","usage":"IsSandEmpty(<-x <-y)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:issandempty","kind":"Function","description":"<p>\nReturns a bool indicating if the specified coordinates contain sand.\n</p>"},{"name":"J","displayName":"J","usage":"J","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:j","kind":"Function","description":"<p>\nFirst outer loop index. When loops are nested, this pushes the value of the first (or only) outer “do” loop onto the stack. Do not use outside nested loops.\n</p>\n\n<p>\nNote: after the inner loop finishes, this value is accessed with I, it being now the innermost loop.\n</p>"},{"name":"Jump","displayName":"Jump","usage":"Jump()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:jump","kind":"Function","description":"<p>\nExits the mission.\n</p>"},{"name":"K","displayName":"K","usage":"K","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:k","kind":"Function","description":"<p>\nOuter loop index. When “do” loops are nested, this pushes the value of the third-innermost loop onto the stack. Do not use outside of triply-nested loops.\n</p>\n\n<p>\nNote that before the inner loops begin, after they end, or between inner loops, this value may need to be referred to with J or even I.\n</p>"},{"name":"List","displayName":"List","usage":"List ->list","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:list","kind":"Function","description":"<p>\nCreates a list and populates it with the contents of the stack. The entire contents of the stack will be added to a newly created list.\nThe top item on the stack will be the last item in the list.\n</p>"},{"name":"ListContains","displayName":"ListContains","usage":"ListContains(<-list <-item) ->contained","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:listcontains","kind":"Function","description":"<p>\nReturns a bool indicating if the item is contained in the list\n</p>"},{"name":"ListN","displayName":"ListN","usage":"ListN(<-N) ->list","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:listn","kind":"Function","description":"<p>\nCreates a list and populates it with N items from the stack.\nThe top item on the stack (after N) will be the last item in the list.\n</p>"},{"name":"ListToStack","displayName":"ListToStack","usage":"ListToStack(<-list)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:listtostack","kind":"Function","description":"<p>\nPushes all elements from `list` onto the stack. Elements are pushed in the order they appear in the list.\n</p>"},{"name":"ln","displayName":"ln","usage":"LN","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:ln","kind":"Function","description":"<p>\nThe natural logarithm. Gives the magnitude of the number. On zero, returns -inf. Below zero, returns NaN, a special value that always causes failure when compared to other numbers. Eg. (NaN&lt;0) -> false, (Nan&gt;=0) -> false\n</p>\n\n<p>\nother logarithms\n</p>\n<div class=\"wrap_indent wrap__dark plugin_wrap\">\n<p>\nln(x) = log(x, e) <br>\n\nln(x)/ln(10) = log10(x) <br>\n\nln(2)=0.6931… <br>\n\nln(e)=.999999 <br>\n\nln(10)=2.3026… \n</p>\n</div>"},{"name":"log","displayName":"log","usage":"log(<-value <-base)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:log","kind":"Function","description":"<p>\nAllows the performance of arbitrary based logarithms. See examples. On zero, returns -inf. Below zero, returns NaN, a special value that always causes failure when compared to other numbers. Eg. (NaN&lt;0) -> false, (Nan&gt;=0) -> false\n</p>\n\n<p>\nother logarithms \n</p>\n<div class=\"wrap_indent wrap__dark plugin_wrap\">\n<p>\nlog(x,10) = log10(x) <br>\n\nlog(x,e) = ln(x)\n</p>\n</div>"},{"name":"log10","displayName":"log10","usage":"LOG10","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:log10","kind":"Function","description":"<p>\nThe base ten logarithm. Gives the number of digits in the number before the decimal point. On zero, returns -inf. Below zero, returns NaN, a special value that always causes failure when compared to other numbers. Eg. (NaN&lt;0) -> false, (Nan&gt;=0) -> false\n</p>\n\n<p>\nother logarithms:\n</p>\n<div class=\"wrap_indent wrap__dark plugin_wrap\">\n<p>\nlog10(x) = log(x, 10) <br>\n\nlog10(x)/log10(e) = ln(x) <br>\n\nlog10(2)=0.3010-<em>ish</em> <br>\n\nlog10(e)=0.4343-<em>ish</em> <br>\n\nlog10(10)=1 <br>\n\n</p>\n</div>"},{"name":"loop","displayName":"loop","usage":"loop","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:loop","kind":"Keyword","description":"<p>\nTerminates the ‘do’ instruction loop . Control flow will return to the ‘do’ instruction until the Index is equal to the Limit.\n</p>"},{"name":"lt","displayName":"lt","usage":"LT","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:lt","kind":"Function","description":"<p>\nFirst item on the stack is compared to the second item on the stack.<br>\n\n0 (fasle) or 1 (true) is pushed to the stack depending on whether the first value was less than the second or not.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"lt0","displayName":"lt0","usage":"lt0","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:lt0","kind":"Function","description":"<p>\nTop item is popped from the stack and compared if less than 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"lte","displayName":"lte","usage":"LTE","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:lte","kind":"Function","description":"<p>\nFirst item on the stack is compared to the second item on the stack.<br>\n\n0 (false) or 1 (true) is pushed to the stack depending on whether the first value was less or equal to the second or not. ## Examples\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>\n<pre class=\"code 4rpl\"><span class=\"kw1\">if</span> <span class=\"br0\">&#40;</span><span class=\"nu0\">1</span> <span class=\"kw3\">lte</span> <span class=\"br0\">&#40;</span><span class=\"nu0\">1</span><span class=\"br0\">&#41;</span><span class=\"br0\">&#41;</span>\n    trace<span class=\"br0\">&#40;</span><span class=\"st0\">&quot;1 is less than or equal to 1&quot;</span><span class=\"br0\">&#41;</span>\n<span class=\"kw1\">endif</span></pre>"},{"name":"lte0","displayName":"lte0","usage":"lte0","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:lte0","kind":"Function","description":"<p>\nTop item is popped from the stack and compared if less than or equal 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"Magnitude","displayName":"Magnitude","usage":"Magnitude(<-vector) ->length","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:magnitude","kind":"Function","description":"<p>\nReturns the length of the specified vector\n</p>"},{"name":"max","displayName":"max","usage":"max(<-number1 <-number2)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:max","kind":"Function","description":"<p>\nPush the greater of two arguments to the stack.\n</p>"},{"name":"MaxInt","displayName":"MaxInt","usage":"MaxInt","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:maxint","kind":"Function","description":"<p>\nReturns the maximum possible value for an integer in the system, which is typically 2,147,483,647.\n</p>"},{"name":"min","displayName":"min","usage":"MIN","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:min","kind":"Function","description":"<p>\nPush the smaller of two arguments to the stack.\n</p>"},{"name":"MinInt","displayName":"MinInt","usage":"MinInt","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:minint","kind":"Function","description":"<p>\nReturns the minimum possible value for an integer in the system, which is typically  -2,147,483,648.\n</p>"},{"name":"MissionLoss","displayName":"MissionLoss","usage":"MissionLoss","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:missionloss","kind":"Function","description":"<p>\nFails a mission.\n</p>"},{"name":"mod","displayName":"mod","usage":"<-a <-b mod ->result","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:arithmetic:mod","kind":"Function","description":"<p>\nPerform integer division and returns the value (modulo) of the difference.\n</p>"},{"name":"mod2","displayName":"mod2","usage":"<-a <-b mod2 ->result","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:arithmetic:mod2","kind":"Function","description":"<p>\nPerform integer division and returns the value (modulo) of the difference. <br>\n\nWorks differently with negative numbers than <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:arithmetic:mod\" class=\"wikilink1\" title=\"ixe:irpl:arithmetic:mod\" data-wiki-id=\"ixe:irpl:arithmetic:mod\">mod</a>, if the result of the modulo operation is negative, the divisor will be added to the result.<br>\n\nPerforms this calculation: <code>result = a % b; if (result &lt; 0) result += b;</code> <br>\n\n</p>\n\n<p>\nWhen using a positive number as divisor, mod2 is useful for &#039;wrapping&#039; a value between 0 and the divisor.<br>\n\nFor example: -50 mod(360) will normally return -50, but using mod2 it will return 310.\n</p>\n\n<p>\nIf the divisor is a negative number and the result of the normal modulo operation is too, then the divisor still gets added. <br>\n\nThis means -50 mod2(-360) will return -410 rather than -50\n</p>"},{"name":"MoveRotation","displayName":"MoveRotation","usage":"MoveRotation(<-partUID <-rotationInDegrees)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:moverotation","kind":"Function","description":"<p>\nRotates the part using the rigid body system. This should be used to rotate parts that have physics.\n</p>"},{"name":"MoveTowards","displayName":"MoveTowards","usage":"MoveTowards(<-current <-target <-maxDistance) ->result","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:movetowards","kind":"Function","description":"<p>\nCalculate a position between the points specified by current and target, moving no farther than the distance specified by maxDistance.\nCurrent, target are treated as vector3.  MaxDistance is a float. Result is a vector3.\n</p>"},{"name":"MoveUnit","displayName":"MoveUnit","usage":"MoveUnit(<-partUID <-pos)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:moveunit","kind":"Function","description":"<p>\nMoves the unit that contains partUID to the V2 pos. This is not an instantenous move, but rather a move order to move as ships typically move.\n</p>"},{"name":"mul","displayName":"mul","usage":"<-a <-b mul ->result","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:arithmetic:mul","kind":"Function","description":"<p>\nMultiplies the two arguments together and pushes the result on the stack.\n</p>"},{"name":"neg","displayName":"neg","usage":"NEG","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:neg","kind":"Function","description":"<p>\nCalculates the negative value of the item and pushes the result on the stack. The result is effectively the same as multiplying the original number by -1.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > From V 1.9, NEG will also operate against a Vector.\n</p>"},{"name":"neq","displayName":"neq","usage":"NEQ","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:neq","kind":"Function","description":"<p>\nTop two items are popped from the stack and compared for equality. 0 or 1 is pushed back to the stack where 0 indicates false and 1 indicates true.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"neq0","displayName":"neq0","usage":"NEQ0","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:comparators:neq0","kind":"Function","description":"<p>\nfirst item on the stack is compared to zero. If zero, true (1) is pushed on the stack, otherwise false (0) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>"},{"name":"Normalize","displayName":"Normalize","usage":"Normalize(<-vector) ->normVector","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:normalize","kind":"Function","description":"<p>\nNormalizes a vector. To normalize a vector is to take a vector of any length and, keeping it pointing in the same direction, change its length to 1, turning it into what is called a unit vector.\n</p>"},{"name":"not","displayName":"not","usage":"NOT","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:logic:not","kind":"Function","description":"<p>\nTreats first item on the stack as a boolean value (true/false (1/0) , ‘nots’ it, and pushes 0 or 1 back to the stack. If the item is TRUE, 0 is pushed to the stack. If the item is FALSE, 1 is pushed to the stack.\n</p>"},{"name":"NotPersist","displayName":"NotPersist","usage":"NotPersist(“var_name”)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:variables:notpersist","kind":"Function","description":"<p>\nBy default, variables persist across saves. Using this command makes them not persist across saves.\n</p>"},{"name":"NULL","displayName":"NULL","usage":"NULL ->thisIsNull","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:data:null","kind":"Function","description":"<p>\nPushes an &#039;empty&#039; data item to the stack. The item has an internal type of &#039;null&#039;.\n</p>"},{"name":"NumRepeat","displayName":"NumRepeat","usage":"NumRepeat(<-value <-period)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:numrepeat","kind":"Function","description":"<p>\nLoops <-value, so that it is never larger than <-period and never smaller than 0.\n</p>\n\n<p>\nThis is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for <-value and 2.5 for <-period, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that the behavior is not defined for negative numbers as it is for the modulo operator.\n</p>\n\n<p>\nIn the example below, the value of time is restricted between 0.0 and just under 3.0. When the value of time is 3, the x position will go back to 0, and go back to 3 as time increases, in a continuous loop.\n</p>"},{"name":"once","displayName":"once","usage":"ONCE","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:once","kind":"Keyword","description":"<p>\nStart a block of instructions that are executed once only for the lifetime of the entity the script is associated with.\n</p>"},{"name":"or","displayName":"or","usage":"OR","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:logic:or","kind":"Function","description":"<p>\nPops two items from the stack, treats them as boolean values, ‘ors’ them, and pushes 0 or 1 back to the stack. If one or both items evaluate to True, it returns TRUE (1) to the stack. If both items evaluate to FALSE, FALSE (0) is returned to the stack.\n</p>"},{"name":"PI","displayName":"PI","usage":"PI","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:pi","kind":"Function","description":"<p>\nPushes the value of PI (3.14159265…) to the stack.\n</p>"},{"name":"PingPong","displayName":"PingPong","usage":"PingPong (<-t <-length)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:pingpong","kind":"Function","description":"<p>\nPingPong returns a value that increments and decrements between zero and the length. It follows the triangle wave formula where the bottom is set to zero and the peak is set to length.\n</p>\n\n<p>\nPingPong requires the value t to be a self-incrementing value. \n</p>\n\n<p>\nThis is similar to <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:signalgenerator\" class=\"wikilink1\" title=\"ixe:irpl:math_utility:signalgenerator\" data-wiki-id=\"ixe:irpl:math_utility:signalgenerator\">SignalGenerator</a> for a triangular wave form, but more performant. \n</p>"},{"name":"PlaySound","displayName":"PlaySound","usage":"PlaySound(<-sound <-volume)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sound:playsound","kind":"Function","description":"<p>\nPlays a sound by name at a volume.  Volume is a float between 0 and 1. <br>\n\nValid sound names are: <br>\n\nfire, rocketfire, rocketexplosion, uniteexplosion, collect, portalplaced, retro_impact_hit_02, UIClick, UIClickError, UINotification, UIOpen, SoundLoop_alarm0, SoundLoop_alarm1, SoundLoop_alarm2, SoundLoop_alarm3, SoundLoop_alarm4, SoundLoop_alarm5, SoundLoop_alarm6, SoundLoop_alarm7, SoundLoop_alarm8, SoundLoop_alarm9, SoundLoop_alarm10, SoundLoop_alarm12, SoundLoop_alarm13, SoundLoop_alarm14, SoundLoop_alarm15, SoundLoop_alarm16, SoundLoop_hum1, SoundLoop_hum2, SoundLoop_hum3, SoundLoop_hum4, SoundLoop_hum5, SoundLoop_hum6, SoundLoop_hum7, SoundLoop_hum8, SoundLoop_hum9, SoundLoop_hum10, SoundLoop_hum11, SoundLoop_hum12, SoundLoop_hum13, SoundLoop_hum14, SoundLoop_hum15, SoundLoop_hum16, SoundLoop_hum17, SoundLoop_hum18, retro_explosion_deep_16, retro_explosion_bass_01, phantomlaunch, retro_explosion_general_13, acfire, accump, UIConversationOpen, sentryfire, BubbleMessageOpen, BubbleMessageClose, jump, jumpout, AwardObjective, UISuccess, alarm, TerminatorStarCharging, IXEcoreActivated, IXEcoreDeactivated, CreditsCollected, UpgradeGemCollected, Prologue_voice, GalaxyShipMove, GalaxyShipWarp, developer, Imperator1, Imperator2, consul1, consul2, opendoor, pickup, retro_explosion_general_16, retro_explosion_short_10, retro_impact_colorfull_08, retro_impact_hit_15, retro_impact_hit_general_06, retro_laser_gun_shoot_04, retro_laser_gun_shoot_06, retro_laser_gun_shoot_25, retro_laser_gun_shoot_36, retro_weapon_gun_misc_shot_01, retro_weapon_gun_misc_shot_04, retro_weapon_gun_misc_shot_06, retro_weapon_gun_misc_shot_08, retro_impact_hit_21, retro_shield_pickup_item_03, retro_support_warn_effect_23, retro_simple_click, retro_explosion_general_10, Achievement\n</p>"},{"name":"PlaySoundLoop","displayName":"PlaySoundLoop","usage":"PlaySoundLoop(<-sound <-volume <-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sound:playsoundloop","kind":"Function","description":"<p>\nPlays a looping sound at a volume.  Looping sounds must be attached to some unit part.\n</p>"},{"name":"pop","displayName":"pop","usage":"POP","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:stack:pop","kind":"Function","description":"<p>\nRemoves the item at the top of the stack.\n</p>"},{"name":"PopList","displayName":"PopList","usage":"PopList(<-list)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:poplist","kind":"Function","description":"<p>\nPops an item from the end of a list. Popping will remove the list item from the list and place it on the stack.\nIf the list is empty, an null item is added to the stack.\n</p>"},{"name":"pow","displayName":"pow","usage":"pow(<-number <-power) ->result","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:arithmetic:pow","kind":"Function","description":"<p>\nPops two arguments from the stack and raises the first to the second and pushes the result to the stack.\n</p>"},{"name":"PrependListToList","displayName":"PrependListToList","usage":"PrependListToList(<-targetList <-listToPrepend  )","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:prependlisttolist","kind":"Function","description":"<p>\nPrepends all elements from `listToPrepend` to the beginning of `targetList`.\n</p>"},{"name":"PrependStackToList","displayName":"PrependStackToList","usage":"PrependStackToList (“Hello” “Creeper” “World” <-list)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:prependstacktolist","kind":"Function","description":"<p>\nInserts the contents of the stack at the beginning of L1 (at index 0) and shifts the index of all other elements in the list up by the number of elements on the stack.\n</p>"},{"name":"PrependToList","displayName":"PrependToList","usage":"PrependToList(<-list <-item)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:prependtolist","kind":"Function","description":"<p>\nAdds a value to the beginning of a list. Any values previously stored in the list are shifted up by one.\n</p>"},{"name":"Print","displayName":"Print","usage":"Print (“Hello World”)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:print","kind":"Function","description":"<p>\nTakes one item from the stack and writes it on a new line in a file called RPL.txt in the game’s root content folder, preceded by the identifying information that indicates which unit or component called the PRINT function. Note that this file is truncated (cleared) each time a map is loaded.\n</p>\n\n<p>\nTo avoid having to constantly re-open the RPL.txt file to refresh it, a Windows Powershell commad (or Linus shell command) can be written to monitor the file and show new output.\n</p>\n\n<p>\nEg. Create a file in the game’s root directory named ShowRPL.PS1. Put this single line in the file\n</p>\n<pre class=\"code\">Get-Content RPL.txt -wait</pre>\n\n<p>\nNow, in the context menu for the file, click on “Run with PowerShell”.\n</p>"},{"name":"Print2","displayName":"Print2","usage":"Print2 (“Hello” “World”)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:print2","kind":"Function","description":"<p>\nPrints 2 values from the stack into the rpl.txt output file.\n</p>"},{"name":"Print3","displayName":"Print3","usage":"Print3 (“Hello” “World” “ Again”)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:print3","kind":"Function","description":"<p>\nPrints 3 values from the stack into the rpl.txt output file.\n</p>"},{"name":"Print4","displayName":"Print4","usage":"Print4 (“Oh” “Hello” “World” “ Again”)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:print4","kind":"Function","description":"<p>\nPrints 4 values from the stack into the rpl.txt output file.\n</p>"},{"name":"Print5","displayName":"Print5","usage":"Print5 (“not” “another” “Hello” “world” “example”)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:print5","kind":"Function","description":"<p>\nPrints 5 values from the stack into the rpl.txt output file.\n</p>"},{"name":"PrintAll","displayName":"PrintAll","usage":"PrintAll","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:printall","kind":"Function","description":"<p>\nRemoves all values from the stack and prints them in the RPL.txt file The values will be on a single line and <strong>not</strong> separated by a space when printed.\n</p>"},{"name":"PrintAllSp","displayName":"PrintAllSp","usage":"PrintAllSp","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:printallsp","kind":"Function","description":"<p>\nRemoves all values from the stack and prints them into the RPL.txt file The values will be on a single line and <strong>will</strong> be separated by a space when printed.\n</p>"},{"name":"PrintStack","displayName":"PrintStack","usage":"PrintStack","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:printstack","kind":"Function","description":"<p>\nPrints all the values from the stack to the RPL.txt file without removing them. The top and bottom of the stack will be identified, and the data type of each item will be provided.\n</p>"},{"name":"PushList","displayName":"PushList","usage":"PushList( <-list <-var)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:pushlist","kind":"Function","description":"<p>\nAdds a value to the end of a list. Same as <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:appendtolist\" class=\"wikilink1\" title=\"ixe:irpl:lists:appendtolist\" data-wiki-id=\"ixe:irpl:lists:appendtolist\">AppendToList</a>. Convenience routine when treating a list as a stack.\n</p>"},{"name":"QuarterPI","displayName":"QuarterPI","usage":"QuarterPI","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:quarterpi","kind":"Function","description":"<p>\nPushes the value of PI/4 to the stack.\n</p>"},{"name":"QuickLoad","displayName":"QuickLoad","usage":"QuickLoad","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:quickload","kind":"Function","description":"<p>\nQuick loads from the first save slot.\n</p>"},{"name":"QuickSave","displayName":"QuickSave","usage":"QuickSave","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:quicksave","kind":"Function","description":"<p>\nCreates a quick save for the mission. Saves to the first save slot.\n</p>"},{"name":"Rad2Deg","displayName":"Rad2Deg","usage":"Rad2Deg","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:rad2deg","kind":"Function","description":"<p>\nPushes the constant to use in converting radians to degrees onto the stack. Multiply this value with a value expressed in radians to obtain degrees.\n</p>"},{"name":"RandFloat","displayName":"RandFloat","usage":"randfloat ->rand","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:randfloat","kind":"Function","description":"<p>\nGives a random floating-point number between 0 and 1\n</p>"},{"name":"RandInt","displayName":"RandInt","usage":"randInt(<-first <-second) ->randi","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:randint","kind":"Function","description":"<p>\nReturns a random integer from a range of two numbers inclusive of the first number, but exclusive of the second number. A workaround for between 0 and 10 both inclusive is in the example below. It is to do 0 11 RandInt, so 11 will exclude but 10 will include [basically, 0 10 1 add RandInt]\n</p>\n\n<p>\nGeneral convention would be having the first number be lower, but it does also work in reverse, but the second number stays as the exclusive one.  I.e. RandInt (1 -1) can return 1 or 0.\n</p>"},{"name":"ReadConfig","displayName":"ReadConfig","usage":"ReadConfig(<-partUID <-configName)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:readconfig","kind":"Function","description":"<p>\nReads a config item on a unit. Config data is the same data shown on a unit in the <abbr title=\"User Interface\">UI</abbr> when selecting the unit in the editor. It is defined in the JSON for a unit. <br>\n\nConfig data exists on a unit (not on each part) so the unit associated with the partUID will be referenced.<br>\n\n</p>"},{"name":"refcall","displayName":"refcall","usage":"refcall","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:functions:refcall","kind":"Function","description":"<p>\nTakes a string from the stack and invokes a function of that name. Note that the string is case insensitive.\n</p>"},{"name":"RegisterForMsg","displayName":"RegisterForMsg","usage":"RegisterForMSG(<-channel <-callbackFunction)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:registerformsg","kind":"Function","description":"<p>\nRegisters a script to receive callbacks whenever somethings sends a message to &#039;channel&#039;. \nThe channel is just a string.\n</p>\n\n<p>\nCallbacks are made at the time sending happens. Note that some callbacks can be made from system objects, like the InfoCache.\nThe callback is made to the function specified by &#039;callbackFunction&#039;. It is not case sensitive. A var named “_DATA” will be set before the function\nis invoked on the script. That var can have any type, it depends what type the sender sent.<br>\n\n</p>\n\n<p>\nMessages are registered by channel. So if you call RegisterForMSG more than once with the same channel, but different callbackFunctions, only one registration is performed.  Subsequent calls to register on the same channel will replace any previous registrations. Multiple scripts can register to a single channel, but a single script can only have one registration for a particular channel at one time.    \n</p>\n\n<p>\nRegisterForMSG is persistent, so you only need to call it once.\n</p>"},{"name":"RegisterScript","displayName":"RegisterScript","usage":"RegisterScript(<-name)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:registerscript","kind":"Function","description":"<p>\nRegisters the current script instance with a name. This name can be used with <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:getregisteredscriptvar\" class=\"wikilink1\" title=\"ixe:irpl:unit:getregisteredscriptvar\" data-wiki-id=\"ixe:irpl:unit:getregisteredscriptvar\">GetRegisteredScriptVar</a>. If the same name is used as another script instance, this call will deregister the other script instance and replace it with the new one. A script on a unit is a unique instance. Each global script instance is also unique. \n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > Note that registering a script is NOT persistent. It will not be saved in a save game file. You must reregister a script.\n</p>"},{"name":"RemoveListElement","displayName":"RemoveListElement","usage":"RemoveListElement(<-list, <-index)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:removelistelement","kind":"Function","description":"<p>\nRemoves an element from a list at a given position. Position are indexed from 0.\n</p>\n\n<p>\nElements after the removed one will be shifted towards the start of the list.\n</p>"},{"name":"RemovePlanFromInventory","displayName":"RemovePlanFromInventory","usage":"RemovePlanFromInventory(<-plan <-amt <-removeWhenZero)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:inventory:removeplanfrominventory","kind":"Function","description":"<p>\nTakes a plan from the inventory. If removeWhenZero is true, the plan will be completely removed when it reaches zero.\n</p>"},{"name":"RemoveTableElement","displayName":"RemoveTableElement","usage":"RemoveTableElement(<-table <-key)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:removetableelement","kind":"Function","description":"<p>\nRemoves an element from a table. Note that keys are case sensitive strings.\n</p>"},{"name":"RemoveWhiteSpace","displayName":"RemoveWhiteSpace","usage":"RemoveWhiteSpace (<-inputString) ->newString","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:removewhitespace","kind":"Function","description":"<p>\nRemoves whitespace from the specified string and returns a new string sans whitespace. Line feed, carriage returns, tabs, spaces all count as whitespace.\n</p>"},{"name":"repeat","displayName":"repeat","usage":"Repeat","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:repeat","kind":"Keyword","description":"<p>\nPart of the “while: loop construct. Pops an item from the stack. If true, execute the following statements. If false, jump to the statement following ‘endwhile’.\n</p>"},{"name":"return","displayName":"return","usage":"return","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:return","kind":"Keyword","description":"<p>\nStops execution of a function call and returns immediately. If called from some place other than a function, it will stop the script execution and ‘return’ immediately. Useful for aborting function execution or script execution when necessary.\n</p>"},{"name":"ReverseList","displayName":"ReverseList","usage":"ReverseList(<-list) ->reversedList","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:reverselist","kind":"Function","description":"<p>\nTakes a list from the stack, makes a deep copy, reverses its contents, then pushes the new list back to the stack.\n</p>"},{"name":"Rotate","displayName":"Rotate","usage":"Rotate(<-partUID <-degrees)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:rotate","kind":"Function","description":"<p>\nRotates the specified part by degrees.\n</p>"},{"name":"RotateTowards","displayName":"RotateTowards","usage":"RotateTowards(<-startDir <-targetDir <-maxDegrees) ->newDir","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:rotatetowards","kind":"Function","description":"<ul>\n<li class=\"level1\"><div class=\"li\">\n <strong>startDir</strong>: The directional vector to start at.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>targetDir</strong>: The directional vector to end up at.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>maxDegrees</strong>: The maximum amount of degrees the start direction will rotate towards the target direction.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>newDir</strong>: The new directional vector (normalized).\n</div></li>\n</ul>\n\n\n<p>\nA directional vector is defined as a line drawn from the origin <code>(0, 0, 0)</code> to a coordinate at the xyz values of the vector. This means 4 dimensional vectors are not supported. The magnitude of the vector (distance from origin to point) is ignored.\n</p>\n\n<p>\nThe <strong>startDir</strong> vector will be rotated round toward the <strong>targetDir</strong> by an angle of <strong>maxDegrees</strong>, although it will land exactly on the target rather than overshoot. If a negative value is used for <strong>maxDegrees</strong>, the vector will rotate away from <strong>targetDir</strong> until it is pointing in exactly the opposite direction, then stops.\n</p>\n\n<p>\nThe resulting vector <strong>newDir</strong> is normalized, meaning its magnitude will always be exactly 1. Inputting <strong>targetDir</strong> <code>(1, 1, 1)</code> and successfully rotating towards it will therefore output <code>(0.5773503, 0.5773503, 0.5773503)</code>, not <code>(1, 1, 1)</code>.\n</p>"},{"name":"RotateTowardsCell","displayName":"RotateTowardsCell","usage":"RotateTowardsCell(<-sx <-sz <-tx <-tz <-maxDegrees) ->angZ ->angX","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:rotatetowardscell","kind":"Function","description":"<p>\nSimilar to RotatedTowards but operations only in 2 dimensions.\nRotates a start vector (ss, sz) towards a target vector (tx,tz). Will not move more than maxDegrees.  The resulting vector is pushed to the stack as two floats.\nEach vector is treated as a direction rather than a position.\nIf negative maxDegrees is specified, the result is a vector that rotates away from the target vector.\n</p>"},{"name":"RotateUnitTowards","displayName":"RotateUnitTowards","usage":"RotateUnitTowards(<-partUID <-pos <-maxDegrees)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:rotateunittowards","kind":"Function","description":"<p>\nRotates a unit containing partUID towards the world position pos.  The unit will not rotate more than maxDegrees.\n</p>"},{"name":"round","displayName":"round","usage":"Round (<-value <-decimalPlaces)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:round","kind":"Function","description":"<p>\nRounds off a number to the specified number of decimal places. This always returns a float, even when you are rounding to a whole number.\n</p>"},{"name":"Self","displayName":"Self","usage":"Self","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:self","kind":"Function","description":"<p>\nPushes the partUID of the current part to the stack. Every ship consists of at least a &#039;unit&#039; and a &#039;part&#039;. Optional nested parts may also exist. Any part may have an attached script. Use &#039;self&#039; to reference the part that the script is attached to. Note that unit <abbr title=\"Unique Identifier.\">UID</abbr>&#039;s are permanent and persist over save/load.\n</p>\n\n<p>\nNote: When run in Console scripts, or in Global Control (Pre or Post), -1 is returned. \n</p>"},{"name":"SendMsg","displayName":"SendMsg","usage":"SendMsg(<-channel <-sentData)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:sendmsg","kind":"Function","description":"<p>\nSends a message. A message can contain any &#039;data&#039; type. Any script registered to receive messages on the specified &#039;channel&#039; will receive the message and contain the sentData within the <-_DATA variable.<br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:registerformsg\" class=\"wikilink1\" title=\"ixe:irpl:unit:registerformsg\" data-wiki-id=\"ixe:irpl:unit:registerformsg\">RegisterForMSG</a> for more information on the callbacks.<br>\n\nSendMSG is primarily intended for sending message between different scripts.  Prior to the 2.0 release of CW4, any call to SendMSG that ends up calling backing into the same script that SendMSG was called from, will produce errors in some cases.  This can happen,for instance, if you destroy some other unit from script A. Script B (on the destroyed unit) has a :Destroyed handler that calls SendMSG on a channel that script A listens on.  \n</p>"},{"name":"SetActive","displayName":"SetActive","usage":"SetActive(<-partUID <-active)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setactive","kind":"Function","description":"<p>\nSets a part active/inactive.\n</p>"},{"name":"SetAmmo","displayName":"SetAmmo","usage":"SetAmmo(<-partUID <-ammo)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setammo","kind":"Function","description":"<p>\nSets the ammo on the unit that contains partUID.\n</p>"},{"name":"SetBeamAutoDisable","displayName":"SetBeamAutoDisable","usage":"SetBeamAutoDisable(<-partUID <-beamUID <-autoDisable)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:setbeamautodisable","kind":"Function","description":"<p>\nSet beam auto disable. Defaults to false. When true, a beam will disable each frame automatically.\n</p>"},{"name":"SetBeamCapVertices","displayName":"SetBeamCapVertices","usage":"SetBeamCapVertices(<-partUID <-beamUID <-numVertices)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:setbeamcapvertices","kind":"Function","description":"<p>\nSets the number of vertices in a beam cap (the end of a beam).\n</p>"},{"name":"SetBeamColor","displayName":"SetBeamColor","usage":"SetBeamColor(<-partUID <-beamUID <-color)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:setbeamcolor","kind":"Function","description":"<p>\nSets beam color.\n</p>"},{"name":"SetBeamEnabled","displayName":"SetBeamEnabled","usage":"SetBeamEnabled(<-partUID <-beamUID <-enabled)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:setbeamenabled","kind":"Function","description":"<p>\nEnables/Disabled a beam.\n</p>"},{"name":"SetBeamEnd","displayName":"SetBeamEnd","usage":"SetBeamEnd(<-partUID <-beamUID <-pos)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:setbeamend","kind":"Function","description":"<p>\nSets the end position (V2) of a beam.\n</p>"},{"name":"SetBeamStart","displayName":"SetBeamStart","usage":"SetBeamStart(<-partUID <-beamUID <-pos)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:setbeamstart","kind":"Function","description":"<p>\nSets the start position (V2) of a beam.\n</p>"},{"name":"SetBeamWidth","displayName":"SetBeamWidth","usage":"SetBeamWidth(<-partUID <-beamUID <-width)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:beams:setbeamwidth","kind":"Function","description":"<p>\nSets the width of a beam.\n</p>"},{"name":"SetCameraPosition","displayName":"SetCameraPosition","usage":"SetCameraPosition(<-camPos)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setcameraposition","kind":"Function","description":"<p>\nSets the camera position.\n</p>"},{"name":"SetCameraZoom","displayName":"SetCameraZoom","usage":"SetCameraZoom(<-zoom)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setcamerazoom","kind":"Function","description":"<p>\nSets the camera zoom. The zoom is equal to half the vertical size of the viewport in world (sand) pixels.\n</p>"},{"name":"SetColor","displayName":"SetColor","usage":"SetColor(<-partUID <-color)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setcolor","kind":"Function","description":"<p>\nSets the color for a part. The color is the shader color, so it will be multiplied by each image pixel color.\n</p>"},{"name":"SetControllerArg","displayName":"SetControllerArg","usage":"SetControllerArg(<-partUID <-controllerName <-arg <-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setcontrollerarg","kind":"Function","description":"<p>\nSets a controller arg for a part. ControllerName is the string name of the controller. Arg is the string name of the arg.\n</p>"},{"name":"SetControllerArg2","displayName":"SetControllerArg2","usage":"Available in version 43 and later.\n\n\n\nSetControllerArg2(<-partUID <-controllerNumber <-arg <-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setcontrollerarg2","kind":"Function","description":"<p>\nSets a controller arg for a part. ControllerNumber is the int position of the controller. For a part with only one controller, it the controllerNumber would be 0. Arg is the string name of the arg. If arg does not already exist, it is created and attached to the specified part, then assigned value val.\n</p>"},{"name":"SetCreeper","displayName":"SetCreeper","usage":"SetCreeper(<-x <-y <-creeper)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:setcreeper","kind":"Function","description":"<p>\nSets the creeper at cell x,y. Creeper is an int amount; 1000000 is equivalent to a creeper depth of 1.0, while -1000000 is equivalent to an anti-creeper depth of 1.0.\n</p>"},{"name":"SetCreeperGlobalGrowth","displayName":"SetCreeperGlobalGrowth","usage":"SetCreeperGlobalGrowth(<-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:setcreeperglobalgrowth","kind":"Function","description":"<p>\nThe creeper int amount that creeper will increase automatically.  Every cell, that contains creeper, will increase by this amount each update. The default is 0.\n</p>"},{"name":"SetCreeperGravity","displayName":"SetCreeperGravity","usage":"SetCreeperGravity(<-gravityVector)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:setcreepergravity","kind":"Function","description":"<p>\nSets creeper gravity direction.  Gravity is a vector of ints that specifies the x and y direction of gravity. Positive Y points upwards. The default gravity is 0,-700.\n</p>"},{"name":"SetCreeperInArea","displayName":"SetCreeperInArea","usage":"SetCreeperInArea(<-area <-creeper <-probability <-isRound)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:setcreeperinarea","kind":"Function","description":"<p>\nSets creeper in area.<br>\n\nArea: A V4 specifying the lower left and upper right of an area.<br>\n\nCreeper: An int amount; 1000000 is equivalent to a creeper depth of 1.0, while -1000000 is equivalent to an anti-creeper depth of 1.0.<br>\n\nProbability: A float in the range of 0 to 1 indicating the probability creeper will be deposited in a cell.<br>\n\nIsRound: When true, the area specifies an elliptical area. When false, a rectangular area.<br>\n\n</p>"},{"name":"SetCreeperMin","displayName":"SetCreeperMin","usage":"SetCreeperMin(<-minCreeper)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:creeper:setcreepermin","kind":"Function","description":"<p>\nSets the creeper evaporation limit as a int. The default is 5000. Creeper is stored internally as an integer 0 to maxInt.  This is the value at which it will clip to zero if below.\n</p>"},{"name":"SetDirRight","displayName":"SetDirRight","usage":"SetDirRight(<-partUID <-vectorDir)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:setdirright","kind":"Function","description":"<p>\nSets the direction of the x axis for a part. Can be use to rotate a part.\n</p>"},{"name":"SetDirUp","displayName":"SetDirUp","usage":"SetDirUp(<-i0 <-v0)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:setdirup","kind":"Function","description":"<p>\nSets the direction of the y axis for a part. Can be use to rotate a part.\n</p>"},{"name":"SetFcApplyAc","displayName":"SetFcApplyAc","usage":"SetFcApplyAc(<-FCUID <-applyAC)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:setfcapplyac","kind":"Function","description":"<p>\nSets whether or not the field container affects AC.\n</p>"},{"name":"SetFcApplyCreeper","displayName":"SetFcApplyCreeper","usage":"SetFcApplyCreeper(<-FCUID <-applyCreeper)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:setfcapplycreeper","kind":"Function","description":"<p>\nSets whether or not the field container affects creeper.\n</p>"},{"name":"SetFcIsPin","displayName":"SetFcIsPin","usage":"SetFcIsPin(<-FCUID <-isPin)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:setfcispin","kind":"Function","description":"<p>\nSets if the field container is a pin field container.  Pin fields lock creeper/ac in place as opposed to applying a direction force.\n</p>"},{"name":"SetFcPosition","displayName":"SetFcPosition","usage":"SetFcPosition(<-FCUID <-pos <-moveCreeper)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:setfcposition","kind":"Function","description":"<p>\nSets the postion of a field container.  If moveCreeper is true, the creeper will be teleported along with the field container.\n</p>"},{"name":"SetFcSave","displayName":"SetFcSave","usage":"SetFcSave(<-FCUID <-shouldSave)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:setfcsave","kind":"Function","description":"<p>\nSets whether a field container should save or not as part of a save game. Defaults to false.\n</p>"},{"name":"SetFcVisible","displayName":"SetFcVisible","usage":"SetFcVisible(<-FCUID <-visible)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:fields:setfcvisible","kind":"Function","description":"<p>\nSets whether or not the field container is visible to the player.\n</p>"},{"name":"SetFowRange","displayName":"SetFowRange","usage":"SetFowRange(<-partUID <-range)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setfowrange","kind":"Function","description":"<p>\nSets the FOW (fog of war) range for a part. When non-zero, this part will reveal FOW obscured terrain.\n</p>"},{"name":"SetGlobalTable","displayName":"SetGlobalTable","usage":"SetGlobalTable(“key” <-data)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:setglobaltable","kind":"Function","description":"<p>\nSets an entry in the global table. The global table is a single table per mission.\n</p>"},{"name":"SetHarvestSandDef","displayName":"SetHarvestSandDef","usage":"SetHarvestSandDef(<-partUID <-sandDef)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setharvestsanddef","kind":"Function","description":"<p>\nThe secondary sandDef to find as part of a terp scan. A Terp scan looks for area marked for digging but also looks for a “harvest sand def”. This api can be used to set the definition. The default is 245 (AC Ore by default).\n</p>"},{"name":"SetHelpOpen","displayName":"SetHelpOpen","usage":"SetHelpOpen(<-open <-Video <-Section)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:sethelpopen","kind":"Function","description":"<p>\nShows the video help. <br>\n\nopen: Must be true. Legacy purpose.\nvideo: The int video index.\nsection: The int section index.\n</p>"},{"name":"SetInternalHealth","displayName":"SetInternalHealth","usage":"SetInternalHealth(<-partUID <-amt <-destroyOnZero)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setinternalhealth","kind":"Function","description":"<p>\nSets the internal health for the unit that contains partUID. DestroyOnZero is a bool indicating if the unit should be destroyed if internal health is set to 0.\n</p>"},{"name":"SetLegalUnitCells","displayName":"SetLegalUnitCells","usage":"SetLegalUnitCells(<-legalCellsList <-active)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setlegalunitcells","kind":"Function","description":"<p>\nSets or resets legal cells based on “Active”.  The legalCellsList is a list of V2 containing the world coordinates of each legal cell.\n</p>"},{"name":"SetLegalUnitCellsRect","displayName":"SetLegalUnitCellsRect","usage":"SetLegalUnitCellsRect(<-rect <-active)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setlegalunitcellsrect","kind":"Function","description":"<p>\nSets or resets legal cells based on “Active”.  The rect is a V4 specifying the lower left and upper right world coordinates of a rectangle.\n</p>"},{"name":"SetListElement","displayName":"SetListElement","usage":"SetListElement(<-list <-index <-value)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:setlistelement","kind":"Function","description":"<p>\nStores a value at the specified index of a list. The previously stored value is overwritten.\n</p>\n\n<p>\nIf a list is stored in a variable, this can be abbreviated to <code><-value ->list[<-index]</code>.\n</p>\n\n<p>\nFor doing the same thing but with arguments in order of <strong>value, list</strong>, <strong>index</strong>, see <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setlistelementrpn\" class=\"wikilink1\" title=\"4rpl:commands:setlistelementrpn\" data-wiki-id=\"4rpl:commands:setlistelementrpn\">SetListElementRPN</a>.\n</p>"},{"name":"SetListElementRPN","displayName":"SetListElementRPN","usage":"SetListElementRPN(<-value <-list <-index)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:setlistelementrpn","kind":"Function","description":"<p>\nStores a value at the specified index of a list. The previously stored value is overwritten.\n</p>\n\n<p>\nIf a list is stored in a variable, setting a value in it can be abbreviated to <code><-value ->list[<-index]</code>, which will be executed as <code><-value <-list <-index SetListelementRPN</code>\n</p>\n\n<p>\nFor doing the same thing but with arguments in order of <strong>list</strong>, <strong>index</strong>, <strong>value</strong>, see <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setlistelement\" class=\"wikilink1\" title=\"4rpl:commands:setlistelement\" data-wiki-id=\"4rpl:commands:setlistelement\">SetListElement</a>\n</p>"},{"name":"SetLocalPosition","displayName":"SetLocalPosition","usage":"SetLocalPosition(<-partUID <-localPosVector)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setlocalposition","kind":"Function","description":"<p>\nSets the local position of the part, relative to the part&#039;s parent. The local position should be a Vector2.\n</p>"},{"name":"SetLocalRotation","displayName":"SetLocalRotation","usage":"SetLocalRotation(<-partUID <-localAngleDegrees)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setlocalrotation","kind":"Function","description":"<p>\nSets the local rotation of the part, in degrees.\n</p>"},{"name":"SetLosRange","displayName":"SetLosRange","usage":"SetLosRange(<-partUID <-range)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setlosrange","kind":"Function","description":"<p>\nSets the LOS range for a part.\n</p>"},{"name":"SetLosSandPassBits","displayName":"SetLosSandPassBits","usage":"SetLosSandPassBits(<-sandDef <-bits)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setlossandpassbits","kind":"Function","description":"<p>\nSets the LOS sand pass bits.<br>\n\nBits is an int where the bits determine which sand blocks LOS. A sand def contains a “blocks los” field consisting of a byte. The bits of this byte are matched against\nthe bits passed into this <abbr title=\"Application Programming Interface\">API</abbr> to determine if a LOS calcuation is blocked by the sand.\n</p>"},{"name":"SetMaxAmmo","displayName":"SetMaxAmmo","usage":"SetMaxAmmo(<-partUID <-maxAmmo)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setmaxammo","kind":"Function","description":"<p>\nSets the max ammo on the unit that contains partUID.\n</p>"},{"name":"SetMaxInternalHealth","displayName":"SetMaxInternalHealth","usage":"SetMaxInternalHealth(<-partUID <-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setmaxinternalhealth","kind":"Function","description":"<p>\nSets the max internal health for the unit that contains partUID.\n</p>"},{"name":"SetMcsItem","displayName":"SetMcsItem","usage":"SetMcsItem(<-item <-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setmcsitem","kind":"Function","description":"<p>\nONLY WORKS FROM THE CONSOLE. Sets an item by name in the mission completion stats.\n</p>"},{"name":"SetMissionCompletionDialogSuppressed","displayName":"SetMissionCompletionDialogSuppressed","usage":"SetMissionCompletionDialogSuppressed(<-suppress)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setmissioncompletiondialogsuppressed","kind":"Function","description":"<p>\nSets a bool to suppress the mission completion dialog.\n</p>"},{"name":"SetMoveMapManualMode","displayName":"SetMoveMapManualMode","usage":"SetMoveMapManualMode(<-manualMode)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:io:setmovemapmanualmode","kind":"Function","description":"<p>\nWhen set to true, the map will not be moved by the mouse but must be moved by script.\n</p>"},{"name":"SetPause","displayName":"SetPause","usage":"SetPause(<-paused)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setpause","kind":"Function","description":"<p>\nSets if the game is paused.\n</p>"},{"name":"SetPhysicsVelocity","displayName":"SetPhysicsVelocity","usage":"SetPhysicsVelocity(<-partUID <-velocity)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setphysicsvelocity","kind":"Function","description":"<p>\nSets the physics velocity of a unit containing part.\n</p>"},{"name":"SetPosition","displayName":"SetPosition","usage":"SetPosition(<-partUID <-posVector)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setposition","kind":"Function","description":"<p>\nSets the world position of the part. The position should be a Vector2.\n</p>"},{"name":"SetPrintPrefixEnabled","displayName":"SetPrintPrefixEnabled","usage":"SetPrintPrefixEnabled(<-enabled)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:setprintprefixenabled","kind":"Function","description":"<p>\nSets if print statements should prefix each output with the name of the script. On by default.\n</p>"},{"name":"SetRaRange","displayName":"SetRaRange","usage":"SetRaRange(<-i0 <-i1)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setrarange","kind":"Function","description":"<p>\nSets the RA (Reachable Area) range for a part. This is used when RA calcuations are performed.\n</p>"},{"name":"SetRegisteredScriptVar","displayName":"SetRegisteredScriptVar","usage":"SetRegisteredScriptVar(<-RegisteredScriptName <-varName <-varValue)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setregisteredscriptvar","kind":"Function","description":"<p>\nSets the named variable on the specified registered script. If the registered script not exist, this call has no effect.\n</p>"},{"name":"SetRotation","displayName":"SetRotation","usage":"SetRotation(<-partUID <-angleInDegrees)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setrotation","kind":"Function","description":"<p>\nSets the rotation of the part, in degrees.\n</p>"},{"name":"SetSandColor","displayName":"SetSandColor","usage":"SetSandColor(<-x <-y <-color)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:setsandcolor","kind":"Function","description":"<p>\nSets the color of sand at the coordinates. The color is a V4. It can contain values greater than 1 to specify a sand glow.\n</p>"},{"name":"SetScript1Var","displayName":"SetScript1Var","usage":"SetScript1Var(<-unit <-varName <-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setscript1var","kind":"Function","description":"<p>\nSets the named variable on the specified unit&#039;s first script\n</p>"},{"name":"SetScriptVar","displayName":"SetScriptVar","usage":"SetScriptVar(<-unit <-scriptName <-varName <-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setscriptvar","kind":"Function","description":"<p>\nSets the named variable on the specified unit and script.<br>\n\nThe script is referenced by name. If the name is an empty string, the first (possibly only) script on the unit will be referenced. The extention “.irpl” must also be included.\n</p>"},{"name":"SetShieldsEnabled","displayName":"SetShieldsEnabled","usage":"SetShieldsEnabled(<-available)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setshieldsenabled","kind":"Function","description":"<p>\nSets if building shields is available in a mission.\n</p>"},{"name":"SetShowRange","displayName":"SetShowRange","usage":"SetShowRange(<-partUID <-distance)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setshowrange","kind":"Function","description":"<p>\nSets the range indicator distance for a part.\n</p>"},{"name":"SetShowRangeColor","displayName":"SetShowRangeColor","usage":"SetShowRangeColor(<-partUID <-color)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setshowrangecolor","kind":"Function","description":"<p>\nSets the range indicator color for a part.\n</p>"},{"name":"SetSoundLoopPitch","displayName":"SetSoundLoopPitch","usage":"SetSoundLoopPitch(<-partUID <-f0)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sound:setsoundlooppitch","kind":"Function","description":"<p>\nSets the pitch of a looping sound playing on a part.\n</p>"},{"name":"SetSpriteActive","displayName":"SetSpriteActive","usage":"SetSpriteActive(<-spriteUID <-active)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspriteactive","kind":"Function","description":"<p>\nSets a sprite active/inactive.\n</p>"},{"name":"SetSpriteAlpha","displayName":"SetSpriteAlpha","usage":"SetSpriteAlpha(<-spriteUID <-alpha)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspritealpha","kind":"Function","description":"<p>\nSets just the alpha value (opacity) of a sprite.\n</p>"},{"name":"SetSpriteColor","displayName":"SetSpriteColor","usage":"SetSpriteColor(<-spriteUID <-color)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspritecolor","kind":"Function","description":"<p>\nSets the color of the sprite.\n</p>"},{"name":"SetSpriteLayer","displayName":"SetSpriteLayer","usage":"SetSpriteLayer(<-spriteUID <-layer)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspritelayer","kind":"Function","description":"<p>\nSets the render sort layer for the sprite.  Sprites are rendered based on their layer and then their order within a layer.  \n</p>\n\n<p>\nPossible layers are:<br>\n\n0: Sectors. This is the layer the sand is rendered in.<br>\n\n1: Lower. This is a unit layer below the default.<br>\n\n2: Default. The normal and default layer for sprites and units.<br>\n\n3: FOW. The Fog of War layer.<br>\n\n</p>"},{"name":"SetSpriteOrder","displayName":"SetSpriteOrder","usage":"SetSpriteOrder(<-spriteUID <-sortingOrder)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspriteorder","kind":"Function","description":"<p>\nSets the sorting order of a sprite.\n</p>"},{"name":"SetSpriteParent","displayName":"SetSpriteParent","usage":"SetSpriteParent(<-spriteUID <-parentUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspriteparent","kind":"Function","description":"<p>\nAllows parenting of a sprite to some other sprite.\n</p>"},{"name":"SetSpritePosition","displayName":"SetSpritePosition","usage":"SetSpritePosition(<-spriteUID <-position <-local)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspriteposition","kind":"Function","description":"<p>\nSets the position of the sprite. If local is true, then the position is local to the parent rather than the world.\n</p>"},{"name":"SetSpriteRotation","displayName":"SetSpriteRotation","usage":"SetSpriteRotation(<-spriteUID <-rotationInDegrees <-local)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspriterotation","kind":"Function","description":"<p>\nSets sprite rotation in degrees. If local is true, then the rotation is local to the parent rather than the world.\n</p>"},{"name":"SetSpriteScale","displayName":"SetSpriteScale","usage":"SetSpriteScale(<-spriteUID <-scale)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sprites:setspritescale","kind":"Function","description":"<p>\nSets the x,y scale of a sprite. Scale is a V2.\n</p>"},{"name":"SetSuppressApexJump","displayName":"SetSuppressApexJump","usage":"SetSuppressApexJump(<-partUID <-suppress)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setsuppressapexjump","kind":"Function","description":"<p>\nSuppress Apex jumping for the unit containing the part.\n</p>"},{"name":"SetTableElement","displayName":"SetTableElement","usage":"SetTableElement(<-table <-key <-value)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:settableelement","kind":"Function","description":"<p>\nSets an element in a table. Note that keys are case sensitive strings.\n</p>\n\n<p>\nFor doing the same thing but with arguments in order of <strong>value</strong>, <strong>table</strong>, <strong>key</strong>, see <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settableelementrpn\" class=\"wikilink1\" title=\"4rpl:commands:settableelementrpn\" data-wiki-id=\"4rpl:commands:settableelementrpn\">SetTableElementRPN</a>.\n</p>\n\n<p>\nA special syntax can also be used to set a table element. See the example below.\n</p>"},{"name":"SetTableElementRPN","displayName":"SetTableElementRPN","usage":"SetTableElementRPN(<-value <-table <-key)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:settableelementrpn","kind":"Function","description":"<p>\nSets an element in a table. Note that keys are case sensitive strings.\n</p>\n\n<p>\nFor doing the same thing but with arguments in order of <strong>table</strong>, <strong>key</strong>, <strong>value</strong>, see <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settableelement\" class=\"wikilink1\" title=\"4rpl:commands:settableelement\" data-wiki-id=\"4rpl:commands:settableelement\">SetTableElement</a>.\n</p>\n\n<p>\nA special syntax can also be used to set a table element. See the example below.\n</p>"},{"name":"SetTerpControlsOpen","displayName":"SetTerpControlsOpen","usage":"SetTerpControlsOpen(<-open)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setterpcontrolsopen","kind":"Function","description":"<p>\nOpens/closes the digging controls.\n</p>"},{"name":"SetTimer0","displayName":"SetTimer0","usage":"SetTimer0(<-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:settimer0","kind":"Function","description":"<p>\nSets the current value of timer 0. Timers are set to some value, and then decrease by 1 each game frame.\n</p>"},{"name":"SetTimer1","displayName":"SetTimer1","usage":"SetTimer1(<-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:settimer1","kind":"Function","description":"<p>\nSets the current value of timer 1. Timers are set to some value, and then decrease by 1 each game frame.\n</p>"},{"name":"SetTimer2","displayName":"SetTimer2","usage":"SetTimer2(<-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:settimer2","kind":"Function","description":"<p>\nSets the current value of timer 2. Timers are set to some value, and then decrease by 1 each game frame.\n</p>"},{"name":"SetTimer3","displayName":"SetTimer3","usage":"SetTimer3(<-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:settimer3","kind":"Function","description":"<p>\nSets the current value of timer 3. Timers are set to some value, and then decrease by 1 each game frame.\n</p>"},{"name":"SetTimerObeyPause0","displayName":"SetTimerObeyPause0","usage":"SetTimerObeyPause0(<-obey)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:settimerobeypause0","kind":"Function","description":"<p>\nIndicates if the timer should obey the game&#039;s pause state and not decrease when the game is paused. This only has a effect if the script is set to run when paused.\n</p>"},{"name":"SetTimerObeyPause1","displayName":"SetTimerObeyPause1","usage":"SetTimerObeyPause1(<-obey)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:settimerobeypause1","kind":"Function","description":"<p>\nIndicates if the timer should obey the game&#039;s pause state and not decrease when the game is paused. This only has a effect if the script is set to run when paused.\n</p>"},{"name":"SetTimerObeyPause2","displayName":"SetTimerObeyPause2","usage":"SetTimerObeyPause2(<-obey)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:settimerobeypause2","kind":"Function","description":"<p>\nIndicates if the timer should obey the game&#039;s pause state and not decrease when the game is paused. This only has a effect if the script is set to run when paused.\n</p>"},{"name":"SetTimerObeyPause3","displayName":"SetTimerObeyPause3","usage":"SetTimerObeyPause3(<-obey)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:timers:settimerobeypause3","kind":"Function","description":"<p>\nIndicates if the timer should obey the game&#039;s pause state and not decrease when the game is paused. This only has a effect if the script is set to run when paused.\n</p>"},{"name":"SetUIActive","displayName":"SetUIActive","usage":"SetUIActive(<-UIName <-component <-active)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:setuiactive","kind":"Function","description":"<p>\nSets a <abbr title=\"User Interface\">UI</abbr> component active/inactive.\n</p>"},{"name":"SetUIBackgroundColor","displayName":"SetUIBackgroundColor","usage":"SetUIBackgroundColor(<-UIName <-component <-color)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:setuibackgroundcolor","kind":"Function","description":"<p>\nSets the background color of a <abbr title=\"User Interface\">UI</abbr> component.\n</p>"},{"name":"SetUiColor","displayName":"SetUiColor","usage":"SetUIColor(<-UIName <-component <-color)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:setuicolor","kind":"Function","description":"<p>\nSets the color of a <abbr title=\"User Interface\">UI</abbr> component.\n</p>"},{"name":"SetUiPosition","displayName":"SetUiPosition","usage":"SetUIPosition(<-UIName <-component <-position)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:setuiposition","kind":"Function","description":"<p>\nSets the position of a <abbr title=\"User Interface\">UI</abbr> component. Position is V2.\n</p>"},{"name":"SetUiSize","displayName":"SetUiSize","usage":"SetUISize(<-UIName <-component <-size)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:setuisize","kind":"Function","description":"<p>\nSets the size of a <abbr title=\"User Interface\">UI</abbr> component. Size is a V2.\n</p>"},{"name":"SetUIText","displayName":"SetUIText","usage":"SetUIText(<-uUIName <-component <-text)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:setuitext","kind":"Function","description":"<p>\nSets the text of a <abbr title=\"User Interface\">UI</abbr> component.\n</p>\n\n<p>\nThis does not work for <abbr title=\"User Interface\">UI</abbr> text components, use the data table defined in <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:ui:createui\" class=\"wikilink1\" title=\"ixe:irpl:ui:createui\" data-wiki-id=\"ixe:irpl:ui:createui\">CreateUI</a> instead.\n</p>"},{"name":"SetUnitDirection","displayName":"SetUnitDirection","usage":"SetUnitDirection(<-partUID <-direction)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:setunitdirection","kind":"Function","description":"<p>\nSets the unit containing the part to the direction.  Direction would usually be 0 or 1 for a right/left unit.\n</p>"},{"name":"SetUpgradeBoost","displayName":"SetUpgradeBoost","usage":"SetUpgradeBoost(<-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:setupgradeboost","kind":"Function","description":"<p>\nSets the current upgrade boost. This is an integer that represents the number of upgrade gems collected.\n</p>\n\n<p>\nNote that while collecting gems will not increase the upgrade boost past 5 (100%) in the normal game, this function can be used to force the upgrade boost past that limit.\n</p>\n\n<p>\n<span style=\"color:#ff0000;\"><strong>Warning:</strong></span> Setting this value very high will likely crash the game.\n</p>"},{"name":"ShortestAngle","displayName":"ShortestAngle","usage":"ShortestAngle(<-cur <-new) ->rotAngle","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:shortestangle","kind":"Function","description":"<p>\nGiven two angles in radians, calculates the shortest angle between the two. Useful for determining which direction a unit should rotate in order to turn to a given direction. A positive or negative value will be returned in the range of PI to -PI. Negative values indicate clockwise rotation.\n</p>"},{"name":"ShowBubbleMessage","displayName":"ShowBubbleMessage","usage":"ShowBubbleMessage(<-message <-pos <-time <-attachmentType <-attachmentPosition <-messagechannel)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:showbubblemessage","kind":"Function","description":"<p>\nShows a bubble message. Returns a <abbr title=\"Unique Identifier.\">UID</abbr> for the bubble message.<br>\n\nmessage: A string that is the message. <br>\n\npos: The V2 world postion of the bubble message. <br>\n\ntime: Time to live in seconds. If &lt; 0 the bubble message will not close automatically but can be closed with a mouse click. If == 0, the bubble message will not close automatically and must be closed via a script. <br>\n\nattachmentType: 0, 1, 2 for None, Bubbles, Line. <br>\n\nattachmentPosition: 0, 1, 2, 3 for Bottom, Left, Top, Right. <br>\n\nmesssageChannel: Then channel to send a message to when the message bubble is closed.<br>\n\n</p>"},{"name":"ShowBubbleMessage_Sound","displayName":"ShowBubbleMessage_Sound","usage":"ShowBubbleMessage_Sound(<-message <-pos <-time <-attachmentType <-attachmentPosition <-messagechannel <-soundToPlay <-soundToPlay)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:showbubblemessage_sound","kind":"Function","description":"<p>\nSame as ShowBubbleMessage except will also play a sound.\n</p>"},{"name":"ShowConversation","displayName":"ShowConversation","usage":"ShowConversation(<-conv)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:showconversation","kind":"Function","description":"<p>\nShows a conversation by name.\n</p>"},{"name":"ShowGameMessage","displayName":"ShowGameMessage","usage":"ShowGameMessage(<-message <-buttonText <-button2Text <-pauseGame <-messagechannel)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:showgamemessage","kind":"Function","description":"<p>\nShows a game message. <br>\n\nmessage: The string message to show. <br>\n\nbuttonText: Text for the first button. If empty the button is not shown. <br>\n\nbutton2Text: Text for the second button. If empty the button is not shown. <br>\n\npauseGame: Bool indicating if the game should be auto paused. <br>\n\nmessageChannel: The message channel to message when a button is clicked. <br>\n\n</p>"},{"name":"ShowInfoArea","displayName":"ShowInfoArea","usage":"ShowInfoArea(<-visible)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:showinfoarea","kind":"Function","description":"<p>\nShows/Hides the info area.\n</p>"},{"name":"ShowInventory","displayName":"ShowInventory","usage":"ShowInventory(<-visible)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:showinventory","kind":"Function","description":"<p>\nShows/hides the inventory panel.\n</p>"},{"name":"ShowResourceArea","displayName":"ShowResourceArea","usage":"ShowResourceArea(<-visible)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:showresourcearea","kind":"Function","description":"<p>\nShows/Hides the resource area.\n</p>"},{"name":"ShowUiHelp","displayName":"ShowUiHelp","usage":"ShowUIHelp(<-helpID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:messaging:showuihelp","kind":"Function","description":"<p>\nShows <abbr title=\"User Interface\">UI</abbr> help.  Help ID must be “infobox”.\n</p>"},{"name":"ShowUiIndicator","displayName":"ShowUiIndicator","usage":"ShowUIIndicator(<-uiindicatorname <-pos)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:showuiindicator","kind":"Function","description":"<p>\nCreates an animated <abbr title=\"User Interface\">UI</abbr> indicator at screen position pos.  UIIndicatorName is a unique name for the indicator.\n</p>"},{"name":"sign","displayName":"sign","usage":"SIGN(<-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:sign","kind":"Function","description":"<p>\nReturns the sign of the input value.\nReturn value is 1 when f is positive or zero, -1 when f is negative.\n</p>"},{"name":"sign0","displayName":"sign0","usage":"SIGN0(<-val)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:sign0","kind":"Function","description":"<p>\nReturns the sign of the input value.\nReturn value is 1 when f is positive, -1 when f is negative, and 0 if the input value is 0.\n</p>"},{"name":"SignalGenerator","displayName":"SignalGenerator","usage":"SignalGenerator(<-time <-frequency <-phaseShift <-invert <-signalType) ->sigValue","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:signalgenerator","kind":"Function","description":"<div class=\"li\"><a href=\"https://knucklecracker.com#description\">Description</a></div>"},{"name":"SignedAngle","displayName":"SignedAngle","usage":"SignedAngle(<-from <-to)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:signedangle","kind":"Function","description":"<p>\nGets the signed angle in degrees between from and to.\n</p>"},{"name":"sin","displayName":"sin","usage":"sin (PI)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:sin","kind":"Function","description":"<p>\nCalculates the sine of the input angle\n</p>"},{"name":"Split","displayName":"Split","usage":"Split (<-string <-delimiter) ->list","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:split","kind":"Function","description":"<p>\nTakes two strings from the stack and splits the first wherever the second occurs. Returns a list of strings.<br>\n\nNote that the delimiter will split the string for every char within the delimiter. So if the delimiter is “ab” it will split the string for every individual `a` and `b` encountered, not every “ab”.\n</p>"},{"name":"SqrMagnitude","displayName":"SqrMagnitude","usage":"SqrMagnitude(<-vector) ->length","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:sqrmagnitude","kind":"Function","description":"<p>\nReturns the squared length of the specified vector.  More efficient than magnitude, since no square root is performed.\n</p>"},{"name":"sqrt","displayName":"sqrt","usage":"SQRT (<-value)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:sqrt","kind":"Function","description":"<p>\nPops an item from the stack and pushes the square root of that number to the stack.\n</p>"},{"name":"StackSize","displayName":"StackSize","usage":"StackSize ->stackDepth","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:stack:clearstacksize","kind":"Function","description":"<p>\nReturns the number of items currently on the stack\n</p>"},{"name":"StartsWith","displayName":"StartsWith","usage":"StartsWith (<-thisString <-preamble)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:startswith","kind":"Function","description":"<p>\nTakes two strings from the stack and returns whether the first string starts with the second (case sensitive)\n</p>"},{"name":"StopConsole","displayName":"StopConsole","usage":"StopConsole()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:stopconsole","kind":"Function","description":"<p>\nStops the console from running a command and displaying its output.\n</p>"},{"name":"StopSoundLoop","displayName":"StopSoundLoop","usage":"StopSoundLoop(<-partUID)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sound:stopsoundloop","kind":"Function","description":"<p>\nStops a looping sound. \n</p>"},{"name":"StringLength","displayName":"StringLength","usage":"Stringlength (<-thisString) ->numchar","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:stringlength","kind":"Function","description":"<p>\nReturns the number of characters in a string.\n</p>"},{"name":"StringReplace","displayName":"StringReplace","usage":"StringReplace(<-inputString <-match <-replace) ->newString","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:stringreplace","kind":"Function","description":"<p>\nSearches a string for all instances for another string, and replaces them with a different string.\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n <strong>inputString</strong>: The string to be searched\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>match</strong>: The string to search for in inputString\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>replace</strong>:The string to replace all match occurrences with\n</div></li>\n</ul>"},{"name":"StringToList","displayName":"StringToList","usage":"StringToList (<-inputstring) ->charList","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:stringtolist","kind":"Function","description":"<p>\nTakes a string from the stack and returns the list of characters in the string.\n</p>"},{"name":"StringToList","displayName":"StringToList","usage":"StringToList (<-inputstring) ->charList","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:lists:stringtolist","kind":"Function","description":"<p>\nTakes a string from the stack and returns the list of characters in the string.\n</p>"},{"name":"sub","displayName":"sub","usage":"<-a <-b sub ->result","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:arithmetic:sub","kind":"Function","description":"<p>\nSubtracts the two arguments together and pushes the result on the stack.\n</p>"},{"name":"Substring","displayName":"Substring","usage":"Substring (<-aString <-startAt <-length) ->aPiece","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:substring","kind":"Function","description":"<p>\nExtracts a portion of a string into a new item on the stack.\n</p>\n\n<p>\nThe command has 3 arguments. First the string to be examined, second the starting position of the substring within the original string, starting from offset 0 (zero) and thirdly the length of the extracted string.\n</p>"},{"name":"swap","displayName":"swap","usage":"swap","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:stack:swap","kind":"Function","description":"<p>\nSwaps the order of the top two items on the stack.\n</p>"},{"name":"switch","displayName":"switch","usage":"switch","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:switch","kind":"Keyword","description":"<p>\nAllow for multiple selection control in a single, more compact form that multiple if/else if/endif endif format. This is intended to improve clarity by reducing otherwise repetitive coding. \n</p>\n\n<p>\nAll code between <code>switch</code> and <code>endswitch</code> is evaluated in order, including code written outside of <code>case</code>..<code>endcase</code> statements. Each <code>case</code> expects an argument that evaluates to True or False at the time of being encountered. If True, the case is executed, and the execution of the switch is ended at the next <code>endcase</code>. If False, the case is skipped and the execution of the code inside the switch continues as normal.\n</p>"},{"name":"Sys_Operable","displayName":"Sys_Operable","usage":"Sys_Operable()","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:sys_operable","kind":"Function","description":"<p>\nShortcut <abbr title=\"Application Programming Interface\">API</abbr> that will “return”, or abort script execution, if the part the script is attached to is not an active part that is completely health (has all onboard pixels).\n</p>"},{"name":"TAB","displayName":"TAB","usage":"TAB","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:tab","kind":"Function","description":"<p>\nPushes a tab character to the stack as a string. Useful for printing\n</p>"},{"name":"Table","displayName":"Table","usage":"Table ->table","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:table","kind":"Function","description":"<p>\nCreates a Table and populates it with the contents of the ENTIRE stack. The entire contents of the stack will be added to a newly created table. The stack will be treated as\npairs of data consisting of strings and values.\n</p>"},{"name":"TableContainsKey","displayName":"TableContainsKey","usage":"TableContainsKey(<-table, <-key)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:tablecontainskey","kind":"Function","description":"<p>\nChecks if the specified `table` contains an entry for the given `key`. Returns `true` if the key is present, otherwise `false`.\n</p>"},{"name":"TableN","displayName":"TableN","usage":"TableN(<-N) ->table","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:tables:tablen","kind":"Function","description":"<p>\nCreates a Table and populates it with N items from the stack. The N items of the stack will be added to a newly created table. The stack will be treated as\npairs of data consisting of strings and values. N represents each PAIR of data. So for two items on the stack, a key and a value, set N to 1.\n</p>"},{"name":"tan","displayName":"tan","usage":"tan (PI) ->tangent","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math:tan","kind":"Function","description":"<p>\nCalculates the tangent of the input angle.\n</p>"},{"name":"TAU","displayName":"TAU","usage":"TAU","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:tau","kind":"Function","description":"<p>\nPushes the value of TAU (2PI) to the stack (6.2831853…)\n</p>"},{"name":"TerpLocation","displayName":"TerpLocation","usage":"TerpLocation(<-x <-y <-size <-amt)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:sand:terplocation","kind":"Function","description":"<p>\nPerforms a dig operation at a cell.  Size is the range outward to dig from x,y.  The amt is the amount to dig. Typical range is 5 and typical amt is 100.\n</p>"},{"name":"TerpPaintingEnabled","displayName":"TerpPaintingEnabled","usage":"TerpPaintingEnabled(<-available)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:terppaintingenabled","kind":"Function","description":"<p>\nSets if dig painting is available in a mission.\n</p>"},{"name":"ThreeHalvesPI","displayName":"ThreeHalvesPI","usage":"ThreeHalvesPI","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:threehalvespi","kind":"Function","description":"<p>\nPushes the value of 3/2 PI to the stack.\n</p>"},{"name":"ThreeQuarterPI","displayName":"ThreeQuarterPI","usage":"ThreeQuarterPI","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:threequarterpi","kind":"Function","description":"<p>\nPushes the value of 3/4 PI to the stack.\n</p>"},{"name":"ToCell","displayName":"ToCell","usage":"ToCell(<-cell) ->cellY ->cellX","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:tocell","kind":"Function","description":"<p>\nExtracts the x and y coordinates from a vector and rounds them to ints, pushing the two results to the stack. The inverse operation is <a href=\"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:fromcell\" class=\"wikilink1\" title=\"ixe:irpl:vectors:fromcell\" data-wiki-id=\"ixe:irpl:vectors:fromcell\">FromCell</a>\n</p>"},{"name":"ToLower","displayName":"ToLower","usage":"ToLower(<-string) ->string","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:tolower","kind":"Function","description":"<p>\nConverts a string to lowercase.\n</p>"},{"name":"ToUpper","displayName":"ToUpper","usage":"ToUpper (<-string) ->string","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:strings:toupper","kind":"Function","description":"<pre class=\"code 4rpl\">Trace<span class=\"br0\">&#40;</span> ToUpper<span class=\"br0\">&#40;</span><span class=\"st0\">&quot;knuckle&quot;</span><span class=\"br0\">&#41;</span><span class=\"br0\">&#41;</span></pre>"},{"name":"Trace","displayName":"Trace","usage":"Trace (&quot;ABC&quot;)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:trace","kind":"Function","description":"<p>\nPrints a value from the stack into the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"Trace2","displayName":"Trace2","usage":"Trace2 (<-thing1 <-thing2)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:trace2","kind":"Function","description":"<p>\nPrints 2 values from the stack into the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"Trace3","displayName":"Trace3","usage":"Trace3 (<-thing1 <-thing2 <-thing3)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:trace3","kind":"Function","description":"<p>\nPrints 3 values from the stack into the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"Trace4","displayName":"Trace4","usage":"Trace4 (<-thing1 <-thing2 <-thing3 <-thing4)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:trace4","kind":"Function","description":"<p>\nPrints 4 values from the stack into the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"Trace5","displayName":"Trace5","usage":"Trace5 (<-thing1 <-thing2 <-thing3 <-thing4 <-thing5)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:trace5","kind":"Function","description":"<p>\nPrints 5 values from the stack to the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"TraceAll","displayName":"TraceAll","usage":"TraceAll","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:traceall","kind":"Function","description":"<p>\nRemoves all the values from the stack and prints them into the debug console. The values will be on a single line and <strong>not</strong> separated by a space when printed. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"TraceAllSp","displayName":"TraceAllSp","usage":"TraceAllSp","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:traceallsp","kind":"Function","description":"<p>\nRemoves all the values from the stack and prints them into the debug console. The values will be on a single line and <strong>will</strong> be separated by a space when printed. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"TraceStack","displayName":"TraceStack","usage":"TraceStack","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:debugging:tracestack","kind":"Function","description":"<p>\nPrints all the items from the stack to the debug window without removing them. Items are printed one per line and the type of each is also provided. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>"},{"name":"TransformPoint","displayName":"TransformPoint","usage":"TransformPoint(<-partUID <-position) ->worldSpacePosition","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:transformpoint","kind":"Function","description":"<p>\nTransforms position from local space to world space.\n</p>"},{"name":"true","displayName":"true","usage":"true","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:logic:true","kind":"Constant","description":"<p>\nPushes a 1 onto the stack.\n</p>"},{"name":"TwoPI","displayName":"TwoPI","usage":"TwoPI","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:twopi","kind":"Function","description":"<p>\nPushes the value of TAU (2PI) to the stack (6.2831853…)\n</p>"},{"name":"UseLegalUnitCells","displayName":"UseLegalUnitCells","usage":"UseLegalUnitCells(<-useLegalCells)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:game:uselegalunitcells","kind":"Function","description":"<p>\nSets whether units should use legal cells for determining placement legality.\n</p>"},{"name":"V2","displayName":"V2","usage":"V2(2 3) ->vector","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:v2","kind":"Function","description":"<p>\nPops two items from the stack, treats them as float, and creates a new Vector and pushes it to the stack.  The two values popped from the\nstack occupy the x and y positions in the new vector.  The z and w positions will be zero.\n</p>"},{"name":"V3","displayName":"V3","usage":"V3(2 3 4) ->vector","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:v3","kind":"Function","description":"<p>\nPops three items from the stack, treats them as float, and creates a new Vector and pushes it to the stack.  The three values popped from the\nstack occupy the x, y, and z positions in the new vector.  The w position will be zero.\n</p>"},{"name":"V4","displayName":"V4","usage":"V4(2 3 4 5) ->vector","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:vectors:v4","kind":"Function","description":"<p>\nPops four items from the stack, treats them as float, and creates a new Vector and pushes it to the stack.  The four values popped from the\nstack occupy the x, y, z, and w positions in the new vector.\n</p>"},{"name":"Vector0","displayName":"Vector0","usage":"Vector0","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:constants:vector0","kind":"Function","description":"<p>\nPushes a vector with all zeros on the stack\n</p>"},{"name":"VectorAngle","displayName":"VectorAngle","usage":"VectorAngle(<-from <-to) ->rotAngle","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:vectorangle","kind":"Function","description":"<p>\nReturns the angle in degrees between from and to.\nThe angle returned is always the non reflex angle between the two vectors - ie the smaller of the two possible angles between them and never greater than 180 degrees.\nNOTE: This routine does NOT work with 4 dimensional vectors.  The 4th dimension will be ignored (treated as 0).\n</p>"},{"name":"VectorAngleCell","displayName":"VectorAngleCell","usage":"VectorAngleCell(<-fromX <-fromZ <-toX <-toZ) ->rotAngle","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:math_utility:vectoranglecell","kind":"Function","description":"<p>\nReturns the angle in degrees between from and to.\nThe angle returned is always the non reflex angle between the two vectors - ie the smaller of the two possible angles between them and never greater than 180 degrees.\n</p>"},{"name":"while","displayName":"while","usage":"While","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:flow_control:while","kind":"Keyword","description":"<p>\nBeginning of a while loop. The statements between a ‘while’ and a ‘repeat’ should ultimately push a value to the stack that will determine if the loop executes the body of the ‘repeat’ block.\n</p>\n\n<p>\nA while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement.\n</p>"},{"name":"WriteConfig","displayName":"WriteConfig","usage":"WriteConfig(<-partUID <-configName <-configValue)","url":"https://knucklecracker.com/wiki/doku.php?id=ixe:irpl:unit:writeconfig","kind":"Function","description":"<p>\nWrites a config item on a unit. Config data is the same data shown on a unit in the <abbr title=\"User Interface\">UI</abbr> when selecting the unit in the editor. It is defined in the JSON for a unit. <br>\n\nConfig data exists on a unit (not on each part) so the unit associated with the partUID will be referenced.<br>\n\n</p>"}]