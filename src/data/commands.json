[{"name":"abs","displayName":"abs","usage":"abs(<-var) ->absvar","description":"<p>\nCalculates the absolute value of the item and pushes the result on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:abs","kind":"Function"},{"name":"acos","displayName":"acos","usage":"acos(-1) ->PiValue","description":"<p>\nCalculates the arccosine of the input, returns the result in radians.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:acos","kind":"Function"},{"name":"acquiremissionobjective","displayName":"AcquireMissionObjective","usage":"AcquireMissionObjective(<-objectiveNumber <-showPopup)","description":"<p>\nAcquires a mission objective. Mission objectives are defined in the game menu of a mission.\nThis <abbr title=\"Application Programming Interface\">API</abbr> is primarily meant for acquiring a custom objective.  The other objectives can be acquired but it may not be recommended.\nWhenever a mission objective is acquired, a snapshot of game stats is taken at the time the call is made. This snapshot of stats includes the game time, tree count, etc.\nThe snapshot includes the data that is used to submit to the play log (should the player submit to the play log). <br>\n\nThe showPopup argument determines if the “Objective Obtained” message appears.<br>\n\nMission objectives are referenced by a number, 0-5.<br>\n\n0 = “Nullify Enemies”<br>\n\n1 = “Activate Totems”<br>\n\n2 = “Reclaim”<br>\n\n3 = “Survive” <br>\n\n4 = “Collect Items”<br>\n\n5 = “Custom”\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:acquiremissionobjective","kind":"Function"},{"name":"add","displayName":"add","usage":"<-a <-b add ->result","description":"<p>\nAdds two arguments together and pushes the result on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:add","kind":"Function"},{"name":"addaswareholder","displayName":"AddAsWareHolder","usage":"AddAsWareHolder(<-unit <-wareType)","description":"<p>\nSets this unit as having a ware available to dispatch. This status must be set each frame that a ware is to be made available.\nThis status is cleared at the end of each game frame, so setting it only makes it available for one frame.\nThese are the ware types:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n 1 = Anticreeper\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 2 = Arg\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 3 = Liftic\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 4 = Bluite\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 5 = Redon\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 6 = Greenar\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:addaswareholder","kind":"Function"},{"name":"addcreeper","displayName":"AddCreeper","usage":"AddCreeper(<-cellX <-cellZ <-creeperAmt)","description":"<p>\nAdds creeper at the specified integer map coordinates.  A value of 0 means no creeper.  A negative value indicates anticreeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:addcreeper","kind":"Function"},{"name":"addcreeperinrange","displayName":"AddCreeperInRange","usage":"AddCreeperInRange{<-cellX <-cellZ <-range <-isSquare <-creeperAmt)","description":"<p>\nAdds creeper at the specified integer map area.  A value of 0 means no creeper.  A negative value indicates anticreeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:addcreeperinrange","kind":"Function"},{"name":"addcreeperwithcap","displayName":"AddCreeperWithCap","usage":"AddCreeperWithCap(<-cellX <-cellZ <-creeperAmt <-cap)","description":"<p>\nAdds creeper at the specified integer map coordinates.  A value of 0 means no creeper.  A negative value indicates anticreeper.\nThe cap is the clipping value for the result. After the creeper is added to the destination location, if it exceeds the cap then the value will be clipped to the cap.\nThe cap should be a positive number. For the case of adding AC (a negative creeperAmt), the cap will automatically be negated internally.\nIf you specify a negative number for cap, it will be internally converted to a positive number before use.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:addcreeperwithcap","kind":"Function"},{"name":"addcreeperwithcapinrange","displayName":"AddCreeperWithCapInRange","usage":"AddCreeperWithCapInRange(<-cellX <-cellZ <-range <-isSquare <-creeperAmt <-cap)","description":"<p>\nAdds creeper at the specified integer map area.  A value of 0 means no creeper.  A negative value indicates anticreeper.\nThe cap is the clipping value for the result. After the creeper is added to the destination location, if it exceeds the cap then the value will be clipped to the cap.\nThe cap should be a positive number. For the case of adding AC (a negative creeperAmt), the cap will automatically be negated internally.\nIf you specify a negative number for cap, it will be internally converted to a positive number before use. \n</p>\n\n<p>\nThe range (an integer) specifies the radius of the area to add creeper to. The radius is interpreted as a square, rather than a circle, if &#039;isSquare&#039; is set to true.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:addcreeperwithcapinrange","kind":"Function"},{"name":"and","displayName":"and","usage":"<-bool1 <-bool2 and ->boolResult","description":"<p>\nPops two items from the stack and treats them as TRUE/FALSE (0/1 or Boolean) values. If they are both TRUE, 1 is pushed to the stack. Otherwise, 0 is pushed to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:and","kind":"Function"},{"name":"appendstacktolist","displayName":"AppendStackToList","usage":"AppendStackToList","description":"<p>\nAdds all values on the stack to the end of a list. The order of the values will be reversed.\n</p>\n\n<p>\nNote that the stack will be empty after this call, so think before using it in functions.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:appendstacktolist","kind":"Function"},{"name":"appendtolist","displayName":"AppendToList","usage":"AppendToList( <-list <-var)","description":"<p>\nAdds a value to the end of a list.\n</p>\n\n<p>\nSynonymous and equivalent to <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:pushlist\" class=\"wikilink1\" title=\"4rpl:commands:pushlist\" data-wiki-id=\"4rpl:commands:pushlist\">PushList</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:appendtolist","kind":"Function"},{"name":"applytheme","displayName":"ApplyTheme","usage":"ApplyTheme","description":"<p>\nApplies any changes made to the theme to the in game theme so that they appear on the map.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:applytheme","kind":"Function"},{"name":"applytodamagemap","displayName":"ApplyToDamageMap","usage":"ApplyToDamageMap(<-unit <-cellX <-cellZ <-radius <-amt <-isSquare)","description":"<p>\nApplies &#039;amt&#039; to a region in the damage map. The damage map affects the calculation of the min/max creeper when calling <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmaxcreepercellwithdamage\" class=\"wikilink1\" title=\"4rpl:commands:getmaxcreepercellwithdamage\" data-wiki-id=\"4rpl:commands:getmaxcreepercellwithdamage\">GetMaxCreeperCellWithDamage</a>.\n</p>\n\n<p>\nThe unit is the unit to associate this damage map alteration to. When the unit is destroyed, the amount applied to the damage map will be removed.\nIf the unit is not specified (unit = -1 or less), then no unit association is created. This means that the damage map must be manually cleaned up! Use this with extreme caution.\n</p>\n\n<p>\nCellX and cellZ define the center of a circle or square with a specified radius.\n</p>\n\n<p>\nThe amt value is added to each cell in the defined region.  The amount at each cell in the damage map is subtracted from the creeper in each cell when the max/min creeper are being calculated.\n</p>\n\n<p>\nThe damage map does not affect the calculation of min/max AC. \nThe damage map is global to the map. When multiple scripts/units apply to the damage map, the values add up. Internally the damage map stores longs, so max int and overflow is not a concern. \nHowever, any damage map value above max int will be treated as max int for purposes of min/max creeper calculation.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" >  The damage map is persistent (during a game and even across save/load). If the unit is not specified, you must subtract values from the damage map when the applied damage is no longer needed. So, for instance, if you apply damage to the damage map when creating\na weapon projectile, your must remove that applied damage once the projectile no longer exists, if the projectile is not specified as the unit in the call to ApplyToDamageMap To remove from the damage map, simply use a negative value for amt.<br>\n\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > BE VERY CAREFUL TO SUBTRACT OUT EXACTLY WHAT IS APPLIED TO THE DAMAGE MAP.  OTHERWISE VALUES WILL BE LEFT IN THE DAMAGE MAP THAT WILL AFFECT MORTAR FIRE AND ANY OTHER UNIT THAT LOOKS AT THE DAMAGE MAP. See <a href=\"/wiki/doku.php?id=4rpl:commands:removeunitdamagemap\" class=\"wikilink1\" title=\"4rpl:commands:removeunitdamagemap\" data-wiki-id=\"4rpl:commands:removeunitdamagemap\">RemoveUnitDamageMap</a>\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/warning-yellow.png\" class=\"icon smiley\" alt=\":WARNING:\" > When using this <abbr title=\"Application Programming Interface\">API</abbr>, you can&#039;t just directly input your damage variable in. A single cell of Creeper with a depth of “1” is actually a value of 1,000,000. Hence the Creeper depth limit of 2,146 in a single cell as the Max Integer of 32 bit is 2,147,483,647. So whenever using this <abbr title=\"Application Programming Interface\">API</abbr>, what ever amount of damage to the Creeper you wish to map, multiply it by 1,000,000. Otherwise this <abbr title=\"Application Programming Interface\">API</abbr> will not work effectively.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:applytodamagemap","kind":"Function"},{"name":"approximately","displayName":"approximately","usage":"approximately(<-val1 <-val2)","description":"<p>\nCompares two floating point values and returns true if they are similar.\n</p>\n\n<p>\nFloating point imprecision makes comparing floats using the equals operator inaccurate. For example, (1.0 == 10.0 / 10.0) might not return true every time. Approximately() compares two floats and returns true if they are within a small value (<em>Epsilon</em><sup><a href=\"https://knucklecracker.com#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup>) of each other.\n</p>\n\n<p>\nSee <a href=\"https://docs.unity3d.com/Documentation/ScriptReference/Mathf.Approximately.html\" class=\"urlextern\" title=\"https://docs.unity3d.com/Documentation/ScriptReference/Mathf.Approximately.html\" rel=\"ugc nofollow\"> Mathf.Approximately in Unity3D documentation</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:approximately","kind":"Function"},{"name":"asfloat","displayName":"asfloat","usage":"asfloat (<-integer1) ->float1","description":"<p>\nConverts an item on the stack to a floating point number and pushes it back onto the stack.\n</p>\n\n<p>\nThis is useful if one needs a floating-point result from operating on two integers. By default, <abbr title=\"CW4 Scripting Language\">4RPL</abbr> may return an integer value after an arithmetic operation on two integers, but a floating-point value might be desirable. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:asfloat","kind":"Function"},{"name":"asin","displayName":"asin","usage":"asin(<-one) ->halfPie","description":"<p>\nCalculates the arcsine of the input, returns result angle in radiants.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:asin","kind":"Function"},{"name":"asint","displayName":"asint","usage":"asint (<-floatval) ->intval","description":"<p>\nConverts (coerces) an item on the stack to an integer, and pushes it back to the stack.\n</p>\n\n<p>\nIf used on a float, will truncate any decimal value.  i.e. 42.8 asint will return 42.\nIf used on a string, if the string could be numeric (eg. “42”), it will be converted to the corresponding value, if not, the call will return zero.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:asint","kind":"Function"},{"name":"asstring","displayName":"asstring","usage":"asstring (<-someval) ->stringval","description":"<p>\nConverts an item on the stack to a string.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:asstring","kind":"Function"},{"name":"atan","displayName":"atan","usage":"atan(<-toTarget)) ->targetRadians","description":"<p>\nCalculates the arctangent of the input, returns the angle in radians.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:atan","kind":"Function"},{"name":"atan2","displayName":"atan2","usage":"atan2(<-targetZ <-targetX) ->angleToTarget","description":"<p>\nComputes and returns the angle of the point y/x in radians. The return value is between positive pi and negative pi. Note that the first parameter to atan2 is always the z coordinate.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:atan2","kind":"Function"},{"name":"attachbeam","displayName":"AttachBeam","usage":"AttachBeam(<-beamUID <-unit <-objName)","description":"<p>\nAttaches a beam to a unit&#039;s object. When a beam is attached to a object, the beam&#039;s start position becomes relative to the object. Note that “” is the root object of a unit.\nThis allows the beam start to follow the unit around if the unit moves.  The end position remains in world coordinates, unless SetBeamForceLocalEnd is called on the beam.\nThe beam can only be attached to one unit at a time.  If you attach a beam to a new unit while it is already attached to some other unit, the beam will unattach from the old unit then attach to the new unit.\n</p>\n\n<p>\n<strong>Important note:</strong> If you are planning to create a continuous beam on a unit that will be moving while firing, do not attach the beam to the unit. An attached beam will be unable to maintain the correct visual orientation and length. An unattached beam so long as its&#039; start location is updated will retain a correct visual orientation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:attachbeam","kind":"Function"},{"name":"avg2","displayName":"avg2","usage":"avg2(<-high <-low) ->average","description":"<p>\nComputes the average of two numbers.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:avg2","kind":"Function"},{"name":"ballisticarclateral","displayName":"BallisticArcLateral","usage":"BallisticArcLateral(<-from <-lateralSpeed <-target <-maxHeight) ->travelTime ->gravity ->fireVelocity","description":"<p>\n Solve the firing arc with a fixed lateral speed. Vertical speed and gravity varies.\n This enables a visually pleasing arc.\n Not every combination of inputs has a computable output. In the case the ballistic arc does not have a solution, zeros are returned for all values.\n</p>\n\n<p>\n - from: Vector point projectile will fire from<br>\n\n - lateralSpeed: scalar speed of projectile along XZ plane<br>\n\n - target: Vector point projectile is trying to hit<br>\n\n - maxHeight: height above Max(from, target) for projectile to peak at\n</p>\n\n<p>\n Returns:<br>\n\n - fireVelocity: Vector firing velocity<br>\n\n - gravity: gravity necessary to projectile to hit precisely max_height<br>\n\n - travelTime: The time it takes the projective to reach to target.\n</p>\n\n<p>\nThis <abbr title=\"Application Programming Interface\">API</abbr> synergizes with the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ballisticarcpos\" class=\"wikilink1\" title=\"4rpl:commands:ballisticarcpos\" data-wiki-id=\"4rpl:commands:ballisticarcpos\">BallisticArcPos</a> <abbr title=\"Application Programming Interface\">API</abbr> which is a <a href=\"/wiki/doku.php?id=4rpl:commands:movetowards\" class=\"wikilink1\" title=\"4rpl:commands:movetowards\" data-wiki-id=\"4rpl:commands:movetowards\">MoveTowards</a> type of <abbr title=\"Application Programming Interface\">API</abbr> but for arcs rather than a straight line which can use the returned variables to enact a smooth and visually appealing parabolic motion for a custom unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ballisticarclateral","kind":"Function"},{"name":"ballisticarcpos","displayName":"BallisticArcPos","usage":"BallisticArcPos(<-start <-velocity <-gravity <-time) ->pos","description":"<p>\n Calculates the position of a projectile after a period of time factoring in start position, velocity, and gravity.\n Useful to use in conjunction with the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ballisticarclateral\" class=\"wikilink1\" title=\"4rpl:commands:ballisticarclateral\" data-wiki-id=\"4rpl:commands:ballisticarclateral\">BallisticArcLateral</a> function.\n This function uses the equation:  start + time*velocity - [0, 0.5*gravity*time*time, 0]\n</p>\n\n<p>\n - start: Vector location that projectile will fire from.<br>\n\n - velocity: The vector velocity (x,y,z) of the projectile.<br>\n\n - gravity: the acceleration due to gravity (in the y direction)<br>\n\n - time: The elapsed time.\n</p>\n\n<p>\n Returns the vector position of the projectile\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ballisticarcpos","kind":"Function"},{"name":"blitfaderaster","displayName":"BlitFadeRaster","usage":"BlitFadeRaster(<-x <-y <-list <-width <-startAlpha <-endAlpha <-time)","description":"<p>\nBlits a list of colors to the raster. The list will be treated as a flattened array mapping to a rectangular &#039;sprite&#039; that is &#039;width&#039; wide.\nThe blit will happen at the specified location in the raster and the bottom left of the sprite will start at that location.\nThe startAlpha, endAlpha, and time control how the fade out will occur. Unlike BlitRaster, this routine will continue to draw into the raster each from for &#039;time&#039; frames.\nThe color of each pixel in the list will have its alpha value tweened between startAlpha and endAlpha over time.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:blitfaderaster","kind":"Function"},{"name":"blitraster","displayName":"BlitRaster","usage":"BlitRaster(<-x <-y <-list <-width)","description":"<p>\nBlits a list of colors to the raster. The list will be treated as a flattened array mapping to a rectangular &#039;sprite&#039; that is &#039;width&#039; wide.\nThe blit will happen at the specified location in the raster and the bottom left of the sprite will start at that location.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:blitraster","kind":"Function"},{"name":"bounceedgecollision","displayName":"BounceEdgeCollision","usage":"BounceEdgeCollision(<-currentPosition <-lastPosition <-reflectionScale) ->newLastPosition ->newPosition","description":"<p>\nCalculates a bounce off of the edge of the map. Given two positions that represent the current and previous positions of a moving object, this call will calculate a new position and previous position\nfor the moving object. The new positions will calculate a colllision with any mape edge and generate a reflection so that the moving object will appear to have bounced off of the edge.<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n currentPosition:  A vector for the current position of a moving object\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n lastPosition:  A vector for the last position of a moving object. The currentPosition-lastPosition is used to determine a vector of motion for the object.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n reflectionScale: A float that controls the scale of the reflection. A value of 1 makes the reflection the same as the input velocity. A value less than 1 damps the reflection and a value greater than 1 amplifies the reflection.\n</div></li>\n</ul>\n\n\n<p>\nNote that if there is no edge collision then the &#039;w&#039; (the last) position in the resulting vectors will be 0 (false). It will be 1 if there was a collision.\nAlso note that if there is no terrain collision then the resulting newPostion and newLastPosition will be equal to currentPosition and lastPosition.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:bounceedgecollision","kind":"Function"},{"name":"bouncefadeblack","displayName":"BounceFadeBlack","usage":"BounceFadeBlack(<-messageChannel)","description":"<p>\nCauses the screen to fade to black, then fade back in. While fading, interaction is blocked. When the bounce is complete, the specified message channel will be called.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:bouncefadeblack","kind":"Function"},{"name":"bounceterraincollision","displayName":"BounceTerrainCollision","usage":"BounceTerrainCollision(<-currentPosition <-lastPosition <-includePseudoTerrain <-includeShield <-terrainStandoff <-reflectionScale) ->newLastPosition ->newPosition","description":"<p>\nCalculates a bounce off of terrain. Given two positions that represent the current and previous positions of a moving object, this call will calculate a new position and previous position\nfor the moving object. The new positions will calculate a colllision with any terrain and generate a reflection so that the moving object will appear to have bounced off of the terrain.<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n currentPosition:  A vector for the current position of a moving object\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n lastPosition:  A vector for the last position of a moving object. The currentPosition-lastPosition is used to determine a vector of motion for the object.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n includePseudoTerrain: A bool indicating if pseudo terrain (invisible terran defined by some units) should be included in the collision calculations.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n includeShield: A bool indicating if shields should be included in the collision calculations.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n terrainStandoff: A float that gets added to the terrain height. This effectively raises the apparent &#039;surface&#039; of the terrain for calculation purposes.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n reflectionScale: A float that controls the scale of the reflection. A value of 1 makes the reflection the same as the input velocity. A value less than 1 damps the reflection and a value greater than 1 amplifies the reflection.\n</div></li>\n</ul>\n\n\n<p>\nNote that if there is no terrain collision then the &#039;w&#039; (the last) position in the resulting vectors will be 0 (false). It will be 1 if there was a collision.\nAlso note that if there is no terrain collision then the resulting newPostion and newLastPosition will have x,y and z values that are equal to minFloat.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:bounceterraincollision","kind":"Function"},{"name":"break","displayName":"break","usage":"break","description":"<p>\nImmediately exits the body of a ‘while/repeat/endwhile’ block or a ‘do/loop’ block.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:break","kind":"Function"},{"name":"cancel","displayName":"Cancel","usage":"Cancel","description":"<p>\nSame as if the player pressed the cancel button. Deselects any selected unit, etc.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:cancel","kind":"Function"},{"name":"case","displayName":"Case","usage":"case","description":"<p>\ndefines one of the alternative selections in a <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:switch\" class=\"wikilink1\" title=\"4rpl:commands:switch\" data-wiki-id=\"4rpl:commands:switch\">switch</a> statement that will be evaluated. The first selection that evaluates to <a href=\"/wiki/doku.php?id=4rpl:commands:true\" class=\"wikilink1\" title=\"4rpl:commands:true\" data-wiki-id=\"4rpl:commands:true\">true</a> will be executed and evaluation of further alternatives will not be performed. If none of the alternatives evaluate to <a href=\"/wiki/doku.php?id=4rpl:commands:true\" class=\"wikilink1\" title=\"4rpl:commands:true\" data-wiki-id=\"4rpl:commands:true\">true</a>, then execution will continue at the first statement following the <a href=\"/wiki/doku.php?id=4rpl:commands:endswitch\" class=\"wikilink1\" title=\"4rpl:commands:endswitch\" data-wiki-id=\"4rpl:commands:endswitch\">endswitch</a> statement.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:case","kind":"Keyword"},{"name":"ceil","displayName":"ceil","usage":"ceil(<-number) ->number","description":"<p>\nTakes one number from the stack, rounds it up, and pushes that number back on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ceil","kind":"Function"},{"name":"clamp","displayName":"clamp","usage":"clamp(<-val <-min <-max)","description":"<p>\nClamps the given value between the given minimum and maximum values. Returns the given value if it is within the min and max range.\nReturns the min value if the given value is less than the min. Returns the max value if the given value is greater than the max value.\nUse Clamp to restrict a value to a range that is defined by the min and max values.\nIf the value is a vector, each element of the vector is clamped separately.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clamp","kind":"Function"},{"name":"clamp01","displayName":"clamp01","usage":"clamp01(<-val)","description":"<p>\nClamps value between 0 and 1 and returns value.\nIf the value is negative then zero is returned. If value is greater than one then one is returned.\nIf the value is a vector, each element of the vector is clamped separately.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clamp01","kind":"Function"},{"name":"clearglobals","displayName":"ClearGlobals","usage":"","description":"<p>\nClearGlobals\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearglobals","kind":"Function"},{"name":"clearlist","displayName":"ClearList","usage":"ClearList(<-list)","description":"<p>\nTakes a list from the stack and removes all elements from the list.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearlist","kind":"Function"},{"name":"clearlocals","displayName":"ClearLocals","usage":"","description":"<p>\nClearLocals\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearlocals","kind":"Function"},{"name":"clearprintlog","displayName":"ClearPrintLog","usage":"ClearPrintLog","description":"<p>\nClears the rpl.txt file of any previous output written to it. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearprintlog","kind":"Function"},{"name":"clearraster","displayName":"ClearRaster","usage":"ClearRaster(<-color)","description":"<p>\nClears the entire raster texture and sets it to the specified color.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearraster","kind":"Function"},{"name":"clearstack","displayName":"ClearStack","usage":"ClearStack","description":"<p>\nRemove all items from the stack leaving it empty.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearstack","kind":"Function"},{"name":"clearthemeoverlay","displayName":"ClearThemeOverlay","usage":"ClearThemeOverlay(<-overlay <-color)","description":"<p>\nSets the entire specified overlay to color.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearthemeoverlay","kind":"Function"},{"name":"cleartracelog","displayName":"ClearTraceLog","usage":"ClearTraceLog","description":"<p>\nRemoves all messages from the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:cleartracelog","kind":"Function"},{"name":"clearunitspecifiedtarget","displayName":"ClearUnitSpecifiedTarget","usage":"ClearUnitSpecifiedTarget(<-Unit)","description":"<p>\nRemoves/clears a unit&#039;s specified target. The specified target is a map cell location that is set either by the player or by script.\nIt typically shows up for units that allow a specified target to be set in their cpack settings. When a unit allows this, it will show a target icon that follows\nthe mouse when selected.  The specified target is good for units that like to allow a player to specify where they should fire.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearunitspecifiedtarget","kind":"Function"},{"name":"clearunitstun","displayName":"ClearUnitStun","usage":"ClearUnitStun(<-unitUID)","description":"<p>\nIf the unit is stunned, clears the stunned state and unstuns the unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clearunitstun","kind":"Function"},{"name":"clipcreeperline","displayName":"ClipCreeperLine","usage":"ClipCreeperLine(<-start <-end <-lineWidth <-affectCreeper <-affectAC)","description":"<p>\nReduces the creeper and/or anti creeper along a line from start postion to end position with a width of lineWidth. Both &#039;start&#039; and &#039;end&#039; are vectors.\nAny creeper that is above the line, will get reduced to the line&#039;s height.\nThe X and Z parameters of the start and end vectors are treated as integers since the map is made of integer cells of creeper.  The Y parameter (the height) is a floating point value and will vary\nsmoothing across the line&#039;s length.\nThe lineWidth is the radius of the line (so the actual area is twice the lineWidth. A value of 0 for the line width draws a line a single cell in size.  A value of 1 is a line\nthat is 3 in size (1 on each side of the center).  A value of 2 would be 5 in size (2 on each side of the center).\n</p>\n\n<p>\nThe affectCreeper and affectAC arguments control whether the clipping is applied to creeper, anticreeper, or both.\nNote that AC is treated as a positive value.  So if you set the max to say 10, then the creeper plus terrain will be limited to a depth of 10. There is no\nreason to concern yourself with anticreeper&#039;s intrinsic negative value.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/warning-yellow.png\" class=\"icon smiley\" alt=\":WARNING:\" > This <abbr title=\"Application Programming Interface\">API</abbr> fails to work should the start position be off map. This is not the case for the end position.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:clipcreeperline","kind":"Function"},{"name":"closegamemessage","displayName":"CloseGameMessage","usage":"CloseGameMessage(<-unpauseGame)","description":"<p>\nCloses a game message, if there is one visible. If one isn&#039;t visible, nothing happens.\nIf &#039;unpause&#039; is true, then the game will be unpaused if it was paused by the call to ShowGameMessage.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:closegamemessage","kind":"Function"},{"name":"concat","displayName":"Concat","usage":"Concat(“abc” “def”) ->sixLetters","description":"<p>\nTakes the top two items from the stack, treats them as strings, and concatenates them to a single string.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:concat","kind":"Function"},{"name":"concat3","displayName":"Concat3","usage":"Concat3(“abc” “def” “ghi”) ->nineLetters","description":"<p>\nTakes the top three items from the stack, treates them as strings, and concatenates them to a single string.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:concat3","kind":"Function"},{"name":"concat4","displayName":"Concat4","usage":"Concat4(“abc” “def” “ghi” “jkl”) ->twelveLetters","description":"<p>\nTakes the top four items from the stack, treates them as strings, and concatenates them to a single string.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:concat4","kind":"Function"},{"name":"constructunit","displayName":"ConstructUnit","usage":"ConstructUnit(<-unit <-amt)","description":"<p>\nFor a unit that is constructing, add some amount of energy or ware to its progress. If the unit is not constructing, this call has no effect. If the amount added exceeds or meets that amount necessary to complete constructing, the unit will complete its build and exit the build state.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:constructunit","kind":"Function"},{"name":"convertactocreeper","displayName":"ConvertACToCreeper","usage":"ConvertACToCreeper{<-cellX <-cellZ <-radius)","description":"<p>\nConverts any anticreeper in range of the specified integer map coordinates to creeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:convertactocreeper","kind":"Function"},{"name":"convertcreepertoac","displayName":"ConvertCreeperToAC","usage":"ConvertCreeperToAC{<-cellX <-cellZ <-radius)","description":"<p>\nConverts any creeper in range of the specified integer map coordinates to anticreeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:convertcreepertoac","kind":"Function"},{"name":"copy","displayName":"Copy","usage":"Copy (<-var) ->copiedVar","description":"<p>\nCreates a copy of the item on the stack with the same contents. Note that if the data is a table or list and contains other tables or lists, they will shared not copied.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:copy","kind":"Function"},{"name":"cos","displayName":"cos","usage":"cos(<-angle) ->cosAngleRadians","description":"<p>\nCalculates the cosine of the input angle in radians\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:cos","kind":"Function"},{"name":"cr","displayName":"CR","usage":"CR","description":"<p>\nPushes a carriage return to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:cr","kind":"Function"},{"name":"createbeam","displayName":"CreateBeam","usage":"CreateBeam(<-color <-brightness <-width) ->beamUID","description":"<p>\nCreates a beam. Beams are laser like lines between two points in 3D space. A beam will persist once created. Call DestroyBeam to remove a beam.\nDon&#039;t call CreatBeam repeatedly unless you plan to make more than one beam.  Each call creates a new beam that will persist until destroyed.\nIf you are creating a beam for a unit, call CreateBeam in a once clause (or some other initialization function) then reference that beam in the unit.\nYou can toggle the beam&#039;s visibility rather than creating, destroying, and recreating the beam.  Toggling the visibility is more efficient that creating and destroying a beam.\nIf you attach a beam to a unit, the beam will be destroyed if the unit is destroyed.\nCreateBeam pushes to the stack a unique ID for the created beam.  Use this ID in other beam related calls to reference the beam. A value of -1 is pushed to the stack if the beam creation fails.\nA MAXIMUM OF 4096 BEAMS IS ALLOWED.\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n &#039;Color&#039; is a string. Possible values are “black”, “red”, “orange”, “yellow”, “green”, “blue”, “purple”, “white”.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n &#039;brightness&#039; is a float ranging from 0 to 10. A value of 0 makes the beam totally black. A value of 1 is fully colored.  Values above 1 increase the brightness into the HDR glow range.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n &#039;width&#039; is a float ranging from 0 up. The width is the thickness of the beam. Beams are flat geometry so keep the beam width relatively small (1-10 typically).\n</div></li>\n</ul>\n\n\n<p>\n<strong><span style=\"font-size:medium;\"><em class=\"u\">Important note:</em></span></strong> If you are planning to create a continuous beam on a unit that will be moving while firing or the end of the beam is meant to track something that moves, do not attach the beam to the unit. An attached beam will be unable to maintain the correct visual orientation and length in such situations. An unattached beam so long as its&#039; start and end location is updated will retain a correct and accurate visual orientation and will give much better results.<br>\n\nAttached beams are best for simple units such as a unit that fires a beam at Creeper. The targeted Creeper location does not move and if the unit does not move while the beam is visible than it is safe to attach the beam to the unit and no unwanted visual errors will occur.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" > Beams become very difficult to see from long distances when they are a size lower than 0.35 so if you want the beam to always be visible, keep the width at a minimum of 0.35.<br>\n\nThis can also be useful when using a large number of beams such as targeting lasers for decorating purposes rather than functional purposes to ensure the player&#039;s screen is not flooded with beams when zoomed out when using many of that unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createbeam","kind":"Function"},{"name":"createeffect","displayName":"CreateEffect","usage":"CreateEffect(<-effectName <-pos <-scale)","description":"<p>\nCreates an effect. The effect will be placed at the supplied 3D vector position. The scale vector will be applied to the effect to scale it.\nThe name of the effect can be:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n sparks\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n materialize\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n radial\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n radial2\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n explosion\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n explosion2\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n explosion3\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n explosion4\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n explosion5\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createeffect","kind":"Function"},{"name":"createegg","displayName":"CreateEgg","usage":"CreateEgg(<-pos <-initData) ->egg","description":"<p>\nCreates an egg at the specified position. The init params control its content, its initial velocity, and its behavior.\nThe egg&#039;s <abbr title=\"Unique Identifier.\">UID</abbr> is pushed to the stack after this call. If the egg is not created (because of the egg limit), a value of -1 is returned.\nThe possible values in initTable are:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n “payload” : The amount of creeper for the egg to carry. A float.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “velocity” : The initial velocity of the orb. A Vector3.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “moveto” : The location for the egg to move to. A Vector3. <sup><a href=\"https://knucklecracker.com#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup>\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “showpathline” : If the egg should draw a line to its moveTo position. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “showpathlinecolor” : The color of the pathLine, if any. A Vector4.\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createegg","kind":"Function"},{"name":"createlist","displayName":"CreateList","usage":"CreateList ->list","description":"<p>\nCreates an empty list and pushes it onto the stack. If saved in a variable, then whatever was in that variable previously gets dropped (and garbage collected) and replaced with the new list just created.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createlist","kind":"Function"},{"name":"createliststartingsize","displayName":"CreateListStartingSize","usage":"createliststartingsize (<-size) ->list","description":"<p>\nCreates a list containing a specified number of null elements.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createliststartingsize","kind":"Function"},{"name":"createmissile","displayName":"CreateMissile","usage":"CreateMissile(<-worldPos <-rotation <-targetUnit) ->missileUID","description":"<p>\nCreates a missile (same as from a missile launcher).  The worldPosition is where the missile should be created, it is a Vector3. The rotation specifies the initial direction the missile is facing.\nIt is a vector3 specifying the rotation, in degrees around the x axis, y axis, and z axis. The targetUnit is a <abbr title=\"Unique Identifier.\">UID</abbr> of the target unit. This is typically a spore or air sac, but it doesn&#039;t have to be.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createmissile","kind":"Function"},{"name":"createmist","displayName":"CreateMist","usage":"CreateMist(<-pos <-initParams)","description":"<p>\nCreates a mist at the specified position. A mist is a small piece of &#039;fog&#039;. The init params control its behavior.\nThe possible values in initTable are:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n “color” : The color of the mist. White is the default color. A Vector.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “color2” : If specified, the mist color will be randomly lerped from color to color2.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “birthtime” : The amount of time, in frames, that the mist will not fade. The mist&#039;s total lifetime is birthtime+fadetime.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “fadetime” : The amount of time, in frames, that the mist fades out. The mist&#039;s total lifetime is birthtime+fadetime.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “direction” : The direction and speed that the mist moves. A Vector.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “startradius” : The radius around the starting position that the mist is created. A random location is chosen with the radius. The direction is perpendicular to the plane that the starting point will be in.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “endradius” : The radius around the &#039;ending&#039; position that the mist is created. The ending position is at a distance based on the direction vector. The end is not related to the birth and fade time.\n</div></li>\n</ul>\n\n\n<p>\nEach value in the color and color2 vectors is a floating point number where 1 is full brightness and 0 is minimal brightness. Values over 1 make the mist glow.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createmist","kind":"Function"},{"name":"createorb","displayName":"CreateOrb","usage":"CreateOrb(<-pos <-initData) ->orb","description":"<p>\nCreates an orb at the specifid position. An orb is a blue jiggly ball of creeper. The init params control it&#039;s content, it initial velocity, and its behavior.<br>\n\nTo carify: The unit type is “airsacbubble”.<br>\n\nThe possible values in initTable are:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n “payload” : The amount of creeper for the orb to carry. A  float.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “bounce” : Whether the orb bounces on the terrain. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “includepseudoterrain” : Whether the orb bounces on pseudoterrain (when bounce is set to true). A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “bounceshield” : Whether the orb bounces on shields. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “creeperdamps” : If the motion of the orb is slowed when in creeper. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “destroywhenstill” : If the orb should auto destroy when it comes to rest. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “destroywhendrytime” : If -1, then the orb will not auto destroy when out of the creeper. Otherwise, the nubmer of frames that it must be dry before it auto destroys. An Int.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “releaseondestroy” : If the orb releases its payload when destroyed by a sniper. A Bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “velocity” : The initial velocity of the orb. A Vector3.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “maxspeed” : The maximim speed the orb can move. Defaults to 1.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “attachedto” : Specifies the <abbr title=\"Unique Identifier.\">UID</abbr> of another egg/orb/unit to create an attachment to. An attachment is a link that binds the orbs together\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “attachedtoobj” : Specifies the name of the obj to use on the attachedto object. Only works if attachedto points to a cmod unit.\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createorb","kind":"Function"},{"name":"createsnipershot","displayName":"CreateSniperShot","usage":"CreateSniperShot(<-worldPos <-targetUnit)","description":"<p>\nCreates a sniper shot.  The worldPosition is where the sniper shot should be created, it is a Vector3.\nThe target unit is what the sniper shot should shoot at. A sniper shot will damage the target unit and also draw an auto fading line from the worldPos to the targetUnit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createsnipershot","kind":"Function"},{"name":"createtable","displayName":"CreateTable","usage":"createTable ->table","description":"<p>\nCreates an empty table and pushes it to the stack. Tables are Dictionaries that map string keys to values.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createtable","kind":"Function"},{"name":"createthemeoverlay","displayName":"CreateThemeOverlay","usage":"CreateThemeOverlay(<-overlayNumber <-textureWidth <-textureHeight <-initColor)","description":"<p>\nCreates an overlay texture for the specified overlay (0 or 1) with a textureWidth and textureHeight. The texture will be filled with initColor. If an overlay texture already exists, that texture will be disposed and replaced by the newly created texture.  Note that is <abbr title=\"Application Programming Interface\">API</abbr> does essentially the same thing as loading a texture using the theme editor in the game. If you have a map and have manually loaded a texture into an overlay slot, you don&#039;t need to call CreateThemeOverlay.\n</p>\n\n<p>\n<strong>Additional Note:</strong> Overlay textures are saved with the map. Don&#039;t make a texture bigger than necessary to accomplish your visual goals. The max size is 2048&times;2048, but such a texture could add megabytes to the map save file size.\n</p>\n\n<p>\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypixels\" class=\"wikilink1\" title=\"4rpl:commands:setthemeoverlaypixels\" data-wiki-id=\"4rpl:commands:setthemeoverlaypixels\">SetThemeOverlayPixels</a> for a larger example of theme overlay use.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createthemeoverlay","kind":"Function"},{"name":"createtrail","displayName":"CreateTrail","usage":"CreateTrail(<-Unit “ObjName” <-trailType <-trailLifetime)","description":"<p>\nAttaches a trail to an object. Objects are the sub-parts that make up a unit.\nA trail is a visual effect that follows the motions of an object and fades out over time. It is useful for things like missiles or ammo shots.<br>\n\nThe trail type is an int that specifes the type. A type of 0 means the trail is a line (like a mortar shot). A type of 1 means the trail is a smoke trail (like missile exhaust).<br>\n\nThe lifetime controls how long the trail persists, in seconds, before fading out. The mortar shot uses a 2 second fade, and the missiles use a 0.7 second fade. Take care to not use long duration trails\nwhen there are many trails. Calling create trail on an object when there is already a trail, has no effect.<br>\n\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createtrail","kind":"Function"},{"name":"createunit","displayName":"CreateUnit","usage":"CreateUnit(<-CModUID <-pos <-initParams) ->unitUID","description":"<p>\nCreates a unit from a <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> <abbr title=\"Unique Identifier.\">UID</abbr> (a unit template defined in a <abbr title=\"Custom Package. Custom unit/scripts package.\">CPACK</abbr>). You can get the <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> <abbr title=\"Unique Identifier.\">UID</abbr> from within the <abbr title=\"Custom Package. Custom unit/scripts package.\">CPACK</abbr> manager. <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> UIDs are unique and never change. The <abbr title=\"Unique Identifier.\">UID</abbr> can also be a name that specifies the name of an internal unit.  See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:unit_types\" class=\"wikilink1\" title=\"4rpl:commands:unit_types\" data-wiki-id=\"4rpl:commands:unit_types\">Unit Types</a> for a list of the names.\nThe unit will be placed at the supplied 3D vector position.\nThe initParams are a table that contains a set of variables that will be set on the newly created unit. See <a href=\"/wiki/doku.php?id=4rpl:commands:getunitsettings\" class=\"wikilink1\" title=\"4rpl:commands:getunitsettings\" data-wiki-id=\"4rpl:commands:getunitsettings\">GetUnitSettings</a> for a list of the data names that can be specified in the initData table when creating built in units. <br>\n\nThe unit <abbr title=\"Unique Identifier.\">UID</abbr> will be pushed to the stack. If the unit can not be created, -1 is pushed to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createunit","kind":"Function"},{"name":"createunitonterrain","displayName":"CreateUnitOnTerrain","usage":"CreateUnitOnTerrain(<-CmodUID  <-cellX <-cellZ <-initParams) ->unitUID","description":"<p>\nCreates a unit from a <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> <abbr title=\"Unique Identifier.\">UID</abbr><sup><a href=\"https://knucklecracker.com#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup> or from an internal unit name<sup><a href=\"#fn__2\" id=\"fnt__2\" class=\"fn_top\">2)</a></sup>. \n</p>\n\n<p>\nThe unit will be placed on the terrain at the supplied terrain cell coordinates.\nThe lower left corner of the map is 0,0 and the top right is mapWidth,mapLength. T\nhe unit will be placed at a height (the Y position) based on the terrain\nheight at the specified coordinates.\n</p>\n\n<p>\nThe unit <abbr title=\"Unique Identifier.\">UID</abbr> will be pushed to the stack. If the unit can not be created, -1 is pushed to the stack.\nSee <a href=\"/wiki/doku.php?id=4rpl:commands:createunit\" class=\"wikilink1\" title=\"4rpl:commands:createunit\" data-wiki-id=\"4rpl:commands:createunit\">CreateUnit</a> for more details.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createunitonterrain","kind":"Function"},{"name":"cross","displayName":"Cross","usage":"Cross(<-vector1 <-vector2) ->crossProduct","description":"<p>\nCalculates the cross product of two vectors. The result is a new vector.\nNOTE:  This routine works with 3 dimensional vectors and less. It does not work with 4 dimensional vectors (the 4th number, w, will be treated as zero).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:cross","kind":"Function"},{"name":"damagecreeper","displayName":"DamageCreeper","usage":"DamageCreeper(<-cellX <-cellZ <-maxNumCells <-radius <-amt <-followTerrain)","description":"<p>\nDamages creeper at a map cell.<br>\n\nThe maxNumCells argument limits the total number of cells that can be damaged.<br>\n\nThe radius specifies the range outwards from the start cell that will be damaged.<br>\n\nThe amt is how much damage to do to each cell.<br>\n\nThe followTerrain argument is a boolean that limits destruction to terrain height at or lower than the starting cell.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:damagecreeper","kind":"Function"},{"name":"damagemesh","displayName":"DamageMesh","usage":"DamageMesh(<-cellX <-cellZ <-radius <-amt)","description":"<p>\nDamages mesh at a map cell.\nThe radius specifies the range outwards from the start cell that will be damaged.\nThe amt is how much damage to do to each cell\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:damagemesh","kind":"Function"},{"name":"damageunit","displayName":"DamageUnit","usage":"DamageUnit(<-unit <-amt)","description":"<p>\nDamages the specified unit.\nTypical health values for most units are either 0 or 1. Units that have a health of 0 will be destroyed when Damage is called.\nOther units will have damage deducted from their health. Note that positive values cause damage. If a negative value is passed in, the resulting unit&#039;s health increases.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" > Interestingly enough, when this <abbr title=\"Application Programming Interface\">API</abbr> is used on a unit that is constructing, it will subtract the construction ammo rather than instantly destroying the unit (and the reverse when causing negative damage). If this is undesired, be sure to amp-up the damage value or call <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroyunit\" class=\"wikilink1\" title=\"4rpl:commands:destroyunit\" data-wiki-id=\"4rpl:commands:destroyunit\">DestroyUnit</a> by checking <a href=\"/wiki/doku.php?id=4rpl:commands:getunitconstructing\" class=\"wikilink1\" title=\"4rpl:commands:getunitconstructing\" data-wiki-id=\"4rpl:commands:getunitconstructing\">GetUnitConstructing</a> for the targeted unit as a Cannon costs 25 energy to build yet has only 2 health. That is a very large “health increase” while building. It would also be better coding grammar to use <a href=\"/wiki/doku.php?id=4rpl:commands:constructunit\" class=\"wikilink1\" title=\"4rpl:commands:constructunit\" data-wiki-id=\"4rpl:commands:constructunit\">ConstructUnit</a> to subtract the build ammo of a constructing unit using a negative value than with this <abbr title=\"Application Programming Interface\">API</abbr>.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/warning-yellow.png\" class=\"icon smiley\" alt=\":WARNING:\" > If using this <abbr title=\"Application Programming Interface\">API</abbr> for something like a custom missile and applying this <abbr title=\"Application Programming Interface\">API</abbr> after getting a list of units to damage, <em class=\"u\">make sure the unit that&#039;s doing this </em><strong><span style='color:#FF5555; '><em class=\"u\">is not part of the list of units to damage</em></span></strong> otherwise this <abbr title=\"Application Programming Interface\">API</abbr> will damage the unit that called it and possibly end the loop prematurely by destroying it. This will either make the unit very unreliable in using this <abbr title=\"Application Programming Interface\">API</abbr> effectively or reliably destroy the unit using this <abbr title=\"Application Programming Interface\">API</abbr> before applying it to the intended units. So for the sake of your sanity please be mindful of this if it appears this <abbr title=\"Application Programming Interface\">API</abbr> isn&#039;t working super reliably.<br>\n\n-Vertu | Who temporarily lost his mind to this.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:damageunit","kind":"Function"},{"name":"debug","displayName":"Debug","usage":"Debug (“ABC”)","description":"<p>\nPrints a value into the game&#039;s log file. Only works when the game is in edit mode!\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:debug","kind":"Function"},{"name":"debugallsp","displayName":"DebugAllSp","usage":"DebugAllSp","description":"<p>\nRemoves all the values from the stack and prints them into the game&#039;s log file. The values will be on a single line and <strong>will</strong> be separated by a space when printed.\nOnly works when the game is in edit mode!\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:debugallsp","kind":"Function"},{"name":"deepcopy","displayName":"DeepCopy","usage":"DeepCopy ( <-var) ->deepCopiedVar","description":"<p>\nCreates a copy of the item on the stack with the same contents. Unlike &#039;Copy&#039;, if the copied item is a table or list and contains other lists or tables, those lists and tables will be copied as well (etc, etc).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:deepcopy","kind":"Function"},{"name":"deg2rad","displayName":"Deg2Rad","usage":"mul(Deg2Rad <-angle)","description":"<p>\nPushes the constant to use in converting from degrees to radians to the stack. Multiply this value with a value expressed as degrees to obtain radians.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:deg2rad","kind":"Constant"},{"name":"deletemcsentry","displayName":"DeleteMCSEntry","usage":"DeleteMCSEntry(<-mapNum)","description":"<p>\nMCS, or Mission Completion Stats, are stored in the mcs.dat file.  This file contains records for every played mission. DeleteMCSEntry will remove an entry from that file. To remove an entry, provide the map number (the number shown in the Colonies screen).  Once a map is removed from the MCS, it will no longer show as completed or in progress.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:deletemcsentry","kind":"Keyword"},{"name":"deployunitshield","displayName":"DeployUnitShield","usage":"DeployUnitShield(<-unit <-isOn)","description":"<p>\nTurns on/off the unit shield.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:deployunitshield","kind":"Function"},{"name":"deregisterformsg","displayName":"DeregisterForMSG","usage":"DeregisterForMSG(<-channel)","description":"<p>\nDeregisters a script from receiving message callbacks.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:deregisterformsg","kind":"Function"},{"name":"deregisterscript","displayName":"DeregisterScript","usage":"DeregisterScript","description":"<p>\nDeregisters the current script instance. If the script instance is not registered, this call does nothing. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:deregisterscript","kind":"Function"},{"name":"destroyallattachedbeams","displayName":"DestroyAllAttachedBeams","usage":"DestroyAllAttachedBeams(<-unitUID)","description":"<p>\nDestroys all beams attached to a unit. Destruction permanently removes the beam. Note that beams that are attached to units are automatically destroyed when the unit is destroyed.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroyallattachedbeams","kind":"Function"},{"name":"destroyallbeams","displayName":"DestroyAllBeams","usage":"DestroyAllBeams","description":"<p>\nDestroys all beams on the map (whether attached or not). Destruction permanently removes the beam. Note that beams that are attached to units are automatically destroyed when the unit is destroyed.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroyallbeams","kind":"Function"},{"name":"destroybeam","displayName":"DestroyBeam","usage":"DestroyBeam(<-beamUID)","description":"<p>\nDestroys a beam. Destruction permanently removes the beam. Note that beams that are attached to units are automatically destroyed when the unit is destroyed.\nBeams that are not attached to units must be manually destroyed to remove them.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroybeam","kind":"Function"},{"name":"destroyterrainrangeindicator","displayName":"DestroyTerrainRangeIndicator","usage":"DestroyTerrainRangeIndicator","description":"<p>\nDestroys the terrain range indicator (if it exists)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroyterrainrangeindicator","kind":"Function"},{"name":"destroythemeoverlay","displayName":"DestroyThemeOverlay","usage":"DestroyThemeOverlay(<-overlayNumber)","description":"<p>\nDestroys a theme overlay texture. The overlayNumber should be 0 or 1. If you use an overlay for a temporary effect in the game, then destroy it when done to prevent it from being saved with the map. Note that creating a new overlay texture has a performance penalty, so only destroy an overlay texture when you are done with it.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroythemeoverlay","kind":"Function"},{"name":"destroytrail","displayName":"DestroyTrail","usage":"DestroyTrail(<-Unit “ObjName” <-immediate)","description":"<p>\nDestroys a trail.\nIf a trail is present on the object, this call will destroy it. If no trail is present, this call has no effect.\nThe &#039;immediate&#039; argument indicates if the trail should be destroyed and removed immediately (removing the trail completely).\nIf &#039;immediate&#039; is set to false then the trail is removed from the object, but it&#039;s history will continue to fade out.\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroytrail","kind":"Function"},{"name":"destroyunit","displayName":"DestroyUnit","usage":"DestroyUnit(<-UID  <-suppressEffect <-userInitiated <-doNotLog)","description":"<p>\nDestroys a unit. The three arguments control optional behavior when the unit is destroyed.\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n suppressEffect - If true, suppress the unit explosion effect and sound.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n userInitiated - If true, will not show up in the destroyed unit timeline on the creeper chart.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n doNotLog - If true, will not show up in the destroyed unit timeline on the creeper chart and will not contribute to the total units destroyed on the player&#039;s score at the end of the map.\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroyunit","kind":"Function"},{"name":"distance","displayName":"Distance","usage":"Distance(<-start <-end) ->dist","description":"<p>\nReturns the distance between two given vector positions.\nNote that the vectors can be 1,2,3, or 4 dimensional.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:distance","kind":"Function"},{"name":"distancecell","displayName":"DistanceCell","usage":"DistanceCell(<-x <-z <-tX <-tZ) ->dist","description":"<p>\nReturns the 2D distance between two given pairs of coordinates. (Or two sets of number pairs on the coordinate plane)\nTypically the passed in values are integers. However, this routine accepts floats and returns a float.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:distancecell","kind":"Function"},{"name":"distancepointline","displayName":"DistancePointLine","usage":"DistancePointLine(<-point <-startLine <-endLine) ->dist","description":"<p>\nReturns the shortest distance between a point and a line.\nThe point, startLine, and endLine are treated as Vector3.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:distancepointline","kind":"Function"},{"name":"div","displayName":"div","usage":"<-a <-b div ->result","description":"<p>\nDivides the two arguments together and pushes the result on the stack. the output type (integer or float) depends on the input, except is the result is explicitly cast. See examples.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:div","kind":"Function"},{"name":"do","displayName":"do","usage":"do(<-limit <-start)","description":"<p>\nThe statements following the do, up to the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:loop\" class=\"wikilink1\" title=\"4rpl:commands:loop\" data-wiki-id=\"4rpl:commands:loop\">loop</a> statement, are executed repeatedly.\nAn index counter is initialized to (start). The index will be incremented, or decremented, by one at the bottom of the loop.\nWhen the index counter is one away from the limit, execution will proceed at the first statement following Loop. Loops can be nested, but no more than 3 deep.\n</p>\n\n<p>\nNOTE: If (limit) is less than (start), the the loop decrements rather than incrementing.\nThe range of a do loop is always (start,limit] (inclusive of start and exclusive of limit).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:do","kind":"Function"},{"name":"dot","displayName":"Dot","usage":"Dot(<-vector1 <-vector2) ->dotProduct","description":"<p>\nCalculates the dot product of two vectors\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:dot","kind":"Function"},{"name":"dq","displayName":"DQ","usage":"DQ","description":"<p>\nPushes a double-quote (“) to the stack. This is the only way to create a string containing this character as they are normally used to delineate strings.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:dq","kind":"Function"},{"name":"dup","displayName":"dup","usage":"dup","description":"<p>\nDuplicates the item currently on the stack without removing the original item.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:dup","kind":"Function"},{"name":"dup2","displayName":"dup2","usage":"dup2","description":"<p>\nDuplicates the top two items currently on the stack without removing the original pair.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:dup2","kind":"Function"},{"name":"e","displayName":"E","usage":"e","description":"<p>\nPushes the value of Euler’s number (e) to the stack (2.71828…)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:e","kind":"Constant"},{"name":"editaddundo","displayName":"EditAddUndo","usage":"EditAddUndo(<-undoType)","description":"<p>\nCreates an undo entry when editing the map.  The argument specifies the type of undo. A value of 0 means any terrain change.\nAn undo entry can be restored by the map maker, by pressing ctrl/command-z.\nThis command does nothing if the game is not in mission edit mode.\n</p>\n\n<p>\nNote: Only undoType of 0 (zero) is supported.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:editaddundo","kind":"Function"},{"name":"editredo","displayName":"EditRedo","usage":"EditRedo","description":"<p>\nRedoes the last undo\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:editredo","kind":"Function"},{"name":"editrestoreundo","displayName":"EditRestoreUndo","usage":"EditRestoreUndo","description":"<p>\nRestores the last undo entry.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:editrestoreundo","kind":"Function"},{"name":"elapsedtime","displayName":"ElapsedTime","usage":"ElapsedTime ->time","description":"<p>\nPushes to the stack the number of milliseconds, as a floating point number, since the application started.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:elapsedtime","kind":"Function"},{"name":"else","displayName":"else","usage":"else","description":"<p>\nWhen an if statement evaluates to false, then the statements following the else, up to the endif, are executed instead.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:else","kind":"Function"},{"name":"endcase","displayName":"endcase","usage":"endcase","description":"<p>\nDelimits each <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:case\" class=\"wikilink1\" title=\"4rpl:commands:case\" data-wiki-id=\"4rpl:commands:case\">case</a> statement that needs to be evaluated.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:endcase","kind":"Keyword"},{"name":"endif","displayName":"endif","usage":"endif","description":"<p>\nDeimits the scope of an if-else-statement. Instructions between the if and endif statement are conditionally executed, depending on the results of the if evaluation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:endif","kind":"Function"},{"name":"endmission","displayName":"EndMission","usage":"EndMission","description":"<p>\nEnds the mission. Same as when the player presses the “Depart” button. This call will end the mission even if the necessary objectives are not complete.\n</p>\n\n<p>\nPlayers can still submit scores for any objectives they did complete, even if not all of the required objectives are completed.  Also, players can choose to keep playing, and still complete the other objectives, so combining it with disabling replacement of the rift lab could be useful to avoid players working around it.  If you call endmission every frame, it effectively keeps the player from continuing on, as it will throw up the end mission screen every frame, before time even advances in some cases.  \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:endmission","kind":"Function"},{"name":"endonce","displayName":"endonce","usage":"endonce","description":"<p>\nEnds a block defined by once.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:endonce","kind":"Function"},{"name":"endswitch","displayName":"EndSwitch","usage":"endswitch","description":"<p>\nDelimits (ends) the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:switch\" class=\"wikilink1\" title=\"4rpl:commands:switch\" data-wiki-id=\"4rpl:commands:switch\">switch</a> construct.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:endswitch","kind":"Keyword"},{"name":"endswith","displayName":"EndsWith","usage":"EndsWith","description":"<p>\nTakes two strings from the stack and returns whether the first string ends with the second (case sensitive)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:endswith","kind":"Function"},{"name":"endwhile","displayName":"endwhile","usage":"endwhile","description":"<p>\nReturns execution to the ‘while’ statement. Note that endwhile is only executed, if ‘repeat’ evaluated to true.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:endwhile","kind":"Function"},{"name":"eq","displayName":"eq","usage":"eq","description":"<p>\nTwo items are popped from the stack and compared for equality. 0 or 1 is pushed back to the stack where 1 indicates equal and 0 (zero) indicates not equal. <br>\n\nThe equal/not equal evaluation can also be performed with “true” (1) and false(0), respectively. <br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n If either item being compared is a float, a float comparison is performed.<br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n If both items being compared are strings, a string comparison is performed.<br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n If both items being compared are vectors, a vector comparison is performed.<br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n If one item is a float and one item is a vector, the float is compared to the vector length.<br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n If none of the above conditions are true, an integer comparison is performed.\n</div></li>\n</ul>\n\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:eq","kind":"Function"},{"name":"eq0","displayName":"eq0","usage":"eq0","description":"<p>\nTop item is popped from the stack and Compared to 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:eq0","kind":"Function"},{"name":"ev2","displayName":"EV2","usage":"EV2(<-vector) ->vectorY ->vectorX","description":"<p>\nExpands a vector. Pops a vector from the stack, and pushes back to the stack the first two float elements of the vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ev2","kind":"Function"},{"name":"ev3","displayName":"EV3","usage":"EV3(<-vector) ->vectorZ ->vectorY ->vectorX","description":"<p>\nExpands a vector. Pops a vector from the stack, and pushes back to the stack the first three float elements of the vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ev3","kind":"Function"},{"name":"ev4","displayName":"EV4","usage":"EV4(<-vector) ->vectorW ->vectorZ ->vectorY ->vectorX","description":"<p>\nExpands a vector. Pops a vector from the stack, and pushes back to the stack all four float elements of the vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ev4","kind":"Function"},{"name":"false","displayName":"false","usage":"false","description":"<p>\nPushes a 0 (false) onto the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:false","kind":"Constant"},{"name":"fc","displayName":"FC","usage":"FC(<-cellX <-cellZ) ->flatCell","description":"<p>\nTakes a map cell coordinate and returns a flattened cell location. The flat cell location is equal to: cellX + cellZ * MAP_WIDTH\nNote: THe X and Z coordinates will be clipped to the map bounds. So values less than 0 are permuted to 0, x is limited to MAP_WIDTH-1, etc.\n</p>\n\n<p>\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ufc\" class=\"wikilink1\" title=\"4rpl:commands:ufc\" data-wiki-id=\"4rpl:commands:ufc\">UFC</a> for the reverse calculation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:fc","kind":"Function"},{"name":"findunitenemy","displayName":"FindUnitEnemy","usage":"FindUnitEnemy(<-unit <-deepest <-firePriority) ->cellZ ->cellX","description":"<p>\nFinds creeper and mesh within range of a unit. The range is specified on the unit (along with other line of sight options).\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n Deepest is a boolean. If true, then the deepest creeper will be found. If false the nearest creeper will be found. <br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n FirePriority is either 0 or 1. If 0, then creeper has priority. If 1 then mesh has priority. <br>\n\n</div></li>\n</ul>\n\n\n<p>\nThe returned cell coordinate is the cell of the found creeper or mesh. A value of -1 is returned for each returned int if no enemy is found in range. <br>\n\nNote: When deepest is specified this routine runs the same code as a mortar. When nearest, the same code as a cannon. That means that\nfirePriority is interpreted differently in each case. For deepest (the mortar) firepriority chooses between targeting creeper or mesh (it picks one and ignores the other).\nFor nearest (the cannon) firePriority will find either if the other (creeper or mesh) is not present.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:findunitenemy","kind":"Function"},{"name":"floodfillterrain","displayName":"FloodFillTerrain","usage":"FloodFillTerrain(<-posX <-posZ <-minHeight <-maxHeight <-maxSize) ->listOfCells","description":"<p>\nReturns a list of 2d vectors representing map coordinates that satisfy the following conditions:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n The set is connected.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The set is empty or contains (posX, posZ)\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The set is filled only with squares at height between min_height inclusive and max_height exclusive. (i.e. if set to 3 and 6, it will grab cells with a height of 3, 4, or 5.  \n</div></li>\n<li class=\"level1\"><div class=\"li\">\n MaxSize is the upper bound limit for cell iteration. It is not directly related to the size of the list that is returned. The number of Cells returned is the number of cells that fit the criteria specified. \n</div></li>\n</ul>\n\n\n<p>\nWarning: This currently has a bug (current for 1.4), and will accept heights 1 tile below min_height, so a min height of 3 will add tiles with a height of 2 as well, but not tiles with a height of 1.  \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:floodfillterrain","kind":"Function"},{"name":"floor","displayName":"floor","usage":"floor (<-num) ->num","description":"<p>\nTakes one number from the stack, rounds it down, and pushes that number back on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:floor","kind":"Function"},{"name":"fromcell","displayName":"FromCell","usage":"FromCell(<-cellZ <-cellX)  ->vector","description":"<p>\nTakes a pair of x and z coordinates and creates a vector from them. The values will be placed in the x and z positions of the vector. The inverse operation is <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:tocell\" class=\"wikilink1\" title=\"4rpl:commands:tocell\" data-wiki-id=\"4rpl:commands:tocell\">ToCell</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:fromcell","kind":"Function"},{"name":"generateenergy","displayName":"GenerateEnergy","usage":"GenerateEnergy(<-amt)","description":"<p>\nGenerates energy. Does the same thing towers, miners, and collector panels do. The amt is a float in energy generation per second.\nInternally, the specified amount will be divided by 30. So you should call GenerateEnergy each frame if you want a steady supply.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:generateenergy","kind":"Function"},{"name":"getadalogopen","displayName":"GetADALogOpen","usage":"GetADALogOpen ->adaLogOpen","description":"<p>\nReturns a boolean indicating if the ada message log viewer is currently open\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getadalogopen","kind":"Function"},{"name":"getbuildunit","displayName":"GetBuildUnit","usage":"GetBuildUnit ->selectBuildUnit","description":"<p>\nReturns the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:unit_types\" class=\"wikilink1\" title=\"4rpl:commands:unit_types\" data-wiki-id=\"4rpl:commands:unit_types\">unit type</a> of the unit currently selected in the build menu. For custom units, the string is the <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> GUID. For built in units it is the built-in <a href=\"/wiki/doku.php?id=4rpl:commands:unit_types\" class=\"wikilink1\" title=\"4rpl:commands:unit_types\" data-wiki-id=\"4rpl:commands:unit_types\">unit type</a>. If no unit is selected in the build menu, an empty string is returned.\n</p>\n\n<p>\nExample: When the player selects the Cannon from the weapons build tab, “Cannon” will be returned by this <abbr title=\"Application Programming Interface\">API</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getbuildunit","kind":"Function"},{"name":"getcameramode","displayName":"GetCameraMode","usage":"GetCameraMode ->mode","description":"<p>\nGets the mode the camera is currently in. 0 = Normal/Perspective mode, 1=top down orthographic mode, 2=freeview/mouse look mode.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcameramode","kind":"Function"},{"name":"getcameraposition","displayName":"GetCameraPosition","usage":"GetCameraPosition ->pos","description":"<p>\nReturns a Vector3 (V3) indicating the position of the camera\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcameraposition","kind":"Function"},{"name":"getcamerarotation","displayName":"GetCameraRotation","usage":"GetCameraRotation ->rotation","description":"<p>\nReturns a Vector3 (V3) indicating the X/Y/Z rotation of the camara\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcamerarotation","kind":"Function"},{"name":"getcameratopdown","displayName":"GetCameraTopDown","usage":"GetCameraTopDown ->topDown","description":"<p>\nGets if the camera is in top down view. This is the top down view entered when the user presses the “Top Down” button.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcameratopdown","kind":"Function"},{"name":"getcanmoveunits","displayName":"GetCanMoveUnits","usage":"GetCanMoveUnits ->canMoveUnits","description":"<p>\nReturns a boolean indicating if the player can move units\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcanmoveunits","kind":"Function"},{"name":"getcelloccupiedcount","displayName":"GetCellOccupiedCount","usage":"GetCellOccupiedCount(<-cellX <-cellZ) ->count","description":"<p>\nGets the occupied count for a cell. The occupied count is the number of units that claim to be occupying the specified map cell. A value greater than 0 means the cell is occupied.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcelloccupiedcount","kind":"Function"},{"name":"getcreeper","displayName":"GetCreeper","usage":"GetCreeper(<-cellX <-cellZ) ->creeperAmt","description":"<p>\nGets the creeper amount at the specified integer map coordinates.  A value of 0 means no creeper.  A negative value indicates anticreeper.\nThe amount returned is a floating point number where 1 represents creeper that has a height of 1 terrain unit.\n</p>\n\n<p>\nNote: Invalid coordinataes will return 0 (zero).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcreeper","kind":"Function"},{"name":"getcreepercoverage","displayName":"GetCreeperCoverage","usage":"GetCreeperCoverage ->creeperCoverage ->antiCreeperCoverage","description":"<p>\nGets the amount of map cells covered in creeper and anticreeper. Each returned value is an integer.<br>\n\nNote: The “Reclaim Threshold” setting in the game tab of the map editor affects which cells count and which do not.  By default a cell must have more than 0.5 creeper/AC in it to count as covered.  You can change this value by changing the “Reclaim Threshold” in the game tab of the map editor.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcreepercoverage","kind":"Function"},{"name":"getcreepercutoff","displayName":"GetCreeperCutoff","usage":"GetCreeperCutoff(<-includeCreeperPlusPlus) ->creeperCutoff","description":"<p>\nGets the cutoff level for emitting creeper. This is the value shown in the “emit mode” vertical chart next too the creeper graph.\nThe value represents the average creeper per map cell. The value includes the entire surface area of the map, including void.\nThe parameter, includeCreeperPlusPlus, when set to true means that the returned value is amplified when the game has Creeper++ enabled.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcreepercutoff","kind":"Function"},{"name":"getcreeperinrange","displayName":"GetCreeperInRange","usage":"GetCreeperInRange(<-cellX <-cellZ <-radius <-isSquare <-checkCreeper <-checkAnticreeper) ->totalCreeperInRange","description":"<p>\nGets the creeper amount in the specified integer map area.  A value of 0 means no creeper.  A negative value indicates anticreeper. The amount specified is a floating point number where 1 represents creeper that has a height of 1 terrain unit. The checkCreeper and checkAnticreeper boolean arguments control whether or not creeper and anticreeper are tallied.  If both are true, the the result will be the sum of all creeper and anticreeper in range. If you only want creeper tallied, set checkCreeper to true and checkAnticreeper to false, etc.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcreeperinrange","kind":"Function"},{"name":"getcreeperwithdamagemap","displayName":"GetCreeperWithDamageMap","usage":"GetCreeperWithDamageMap(<-cellX <-cellZ) ->creeperAmt","description":"<p>\nGets the creeper amount at the specified integer map coordinates.  A value of 0 means no creeper.  A negative value indicates anticreeper. The amount returned is a floating point number where 1 represents creeper that has a height of 1 terrain unit. This call also factors in the damage map.  Units can add and remove amounts to the global damage map with the ApplyToDamageMap api.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcreeperwithdamagemap","kind":"Function"},{"name":"getcrimson","displayName":"GetCrimson","usage":"GetCrimson(<-cellX <-cellZ) ->crimson","description":"<p>\nGets the crimson amount for a specified cell. Crimson spreads outward through creeper over time and also evaporates over time. Think of depositing Crimson as depositing another type of creeper that can only flow within regular creeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getcrimson","kind":"Function"},{"name":"getdecalcolor","displayName":"GetDecalColor","usage":"GetDecalColor(<-decal) ->color","description":"<p>\nGets the color (V4) of a decal. A decal is specified by its ID (shown in the decal editor pane).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getdecalcolor","kind":"Function"},{"name":"getdecalposition","displayName":"GetDecalPosition","usage":"GetDecalPosition(<-decal) ->position","description":"<p>\nGets the position (V2) of a decal. A decal is specified by its ID (shown in the decal editor pane).\nThe position is where the decal is on the map. The returned V2 stores the X and Z map positions in the X,Y of the vector2.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getdecalposition","kind":"Function"},{"name":"getdecalsize","displayName":"GetDecalSize","usage":"GetDecalSize(<-decal) ->size","description":"<p>\nGets the Size (V2) of a decal. A decal is specified by its ID (shown in the decal editor pane).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getdecalsize","kind":"Function"},{"name":"getdecalvisible","displayName":"GetDecalVisible","usage":"GetDecalVisible(<-decal) ->visible","description":"<p>\nGets the visiblity (boolean) of a decal. A decal is specified by its ID (shown in the decal editor pane).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getdecalvisible","kind":"Function"},{"name":"getecocounts","displayName":"GetEcoCounts","usage":"GetEcoCounts ->liveCount ->stumpCount","description":"<p>\nReturns the number living eco and the number of dead/stump eco on the map\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getecocounts","kind":"Function"},{"name":"geteditmode","displayName":"GetEditMode","usage":"GetEditMode ->inEditMode","description":"<p>\nReturns a boolean indicating if the game is in edit mode.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:geteditmode","kind":"Function"},{"name":"getenergybonus","displayName":"GetEnergyBonus","usage":"GetEnergyBonus ->energy","description":"<p>\nGets the current bonus energy generation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getenergybonus","kind":"Function"},{"name":"getenergyeco","displayName":"GetEnergyEco","usage":"GetEnergyEco ->energy","description":"<p>\nGets the current eco energy generation\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getenergyeco","kind":"Function"},{"name":"getenergygeneration","displayName":"GetEnergyGeneration","usage":"GetEnergyGeneration ->energy","description":"<p>\nGets the current energy generation\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getenergygeneration","kind":"Function"},{"name":"getenergystore","displayName":"GetEnergyStore","usage":"GetEnergyStore ->energy","description":"<p>\nGets the current ammo of the Rift Lab.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/warning-yellow.png\" class=\"icon smiley\" alt=\":WARNING:\" > Deficit is not negative storage/Rift Lab ammo. It is unrelated to this <abbr title=\"Application Programming Interface\">API</abbr>!\n</p>\n\n<p>\nWhen at a deficit, this <abbr title=\"Application Programming Interface\">API</abbr> will always return 0 as the Rift Lab possesses 0 ammo. However, it is very possible to give the Rift Lab negative ammo and in such a case, the negative energy store will be displayed in the <abbr title=\"User Interface\">UI</abbr> and this <abbr title=\"Application Programming Interface\">API</abbr> will also return that same negative number.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getenergystore","kind":"Function"},{"name":"getenergyuse","displayName":"GetEnergyUse","usage":"GetEnergyUse ->energy","description":"<p>\nGets the current energy use\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getenergyuse","kind":"Function"},{"name":"geternportal","displayName":"GetERNPortal","usage":"GetERNPortal ->uid","description":"<p>\nGets the ID of the ERN Portal.  Returns -1 if the ERN Portal is not on the map.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:geternportal","kind":"Function"},{"name":"geternportalefficiency","displayName":"GetERNPortalEfficiency","usage":"GetERNPortalEfficiency(<-upgrade) ->efficiency","description":"<p>\nGets the efficiency of a given upgrade on the ern portal.  The returned efficiency is a floating point number between 0 and 1 inclusive.\nThe ERN portal has 6 possible upgrades and when and ERN is installed in a slot, the efficiency will go from 0 to 1 over time. A slot\nwithout an ERN installed has an efficiency of 0.\nThe upgrade that is passed in should be a number from 0 to 5 inclusive. Each number represents one of the upgrades in the ERN portal.\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n UPGRADE_ENERGY_PRODUCTION = 0;\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n UPGRADE_MINE_PRODUCTION = 1;\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n UPGRADE_BUILD_SPEED = 2;\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n UPGRADE_MOVE_SPEED = 3;\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n UPGRADE_FIRE_RANGE = 4;\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n UPGRADE_FIRE_RATE = 5;\n</div></li>\n</ul>\n\n\n<p>\nYou can learn about how ERN portal efficiency normally affects units in the <a href=\"https://knucklecracker.com/wiki/doku.php?id=cw4:info:player_unit_data#ern_portal\" class=\"wikilink1\" title=\"cw4:info:player_unit_data\" data-wiki-id=\"cw4:info:player_unit_data\"> Player Unit Data</a> page, this can help you figure out how much of a boost to give your custom unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:geternportalefficiency","kind":"Function"},{"name":"getexactcreeperheight","displayName":"GetExactCreeperHeight","usage":"GetExactCreeperHeight(<-position.x  <-position.z <-ignoreCreeper <-ignoreAC) ->height ->surfaceNormal ->hasCreeper ->hasAC","description":"<p>\nGets height of the creeper at a given floating point position. The height factors in the terrain height, and the visual flattening.\nThe height represents the exact visual height in world coordinates.\nThe returned surfaceNormal is a vector representing the normal to the creeper triangle at the supplied x,z coordinate.\nThe returned hasCreeper and hasAC booleans indicate if either was present at the supplied location.\nWhen no creeper or AC is present, the returned height is the exact height of the terrain at the supplied location.\nThe ignoreCreeper and ignoreAC APIS affect whether creeper or AC is useed in determining the resulting height. They do not affect the returned hasCreeper and hasAC values.\nNote that AC flattening (a visibility option the player can engage) does NOT affect the returned height.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getexactcreeperheight","kind":"Function"},{"name":"getexactterrain","displayName":"GetExactTerrain","usage":"GetExactTerrain(<-posX <-posZ <-includePseudoTerrain) ->exactTerrainHeight","description":"<p>\nGets the floating point height of the terrain at the specified floating point position.  A value of 0 means “void” or no terrain.\nThe height of terrain varies between integer map positions. This <abbr title=\"Application Programming Interface\">API</abbr> can be used to determine the exact height at any position on the map.\nIt works by calculating the terrain triangle that the specified point is over, and then returning the exact height of the point on that triangle.\nThis can be useful for positioning units that need to crawl up and over terrain.\nThe final parameter is a boolean that specifies whether to include the invisible pseudo terrain that some units create.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getexactterrain","kind":"Function"},{"name":"getexactterrainandnormal","displayName":"GetExactTerrainAndNormal","usage":"GetExactTerrainAndNormal(<-posX <-posZ <-includePseudoTerrain) ->exactTerrainHeight ->terrainNormal","description":"<p>\nDoes the same as <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getexactterrain\" class=\"wikilink1\" title=\"4rpl:commands:getexactterrain\" data-wiki-id=\"4rpl:commands:getexactterrain\">GetExactTerrain</a> except it also returns the terrain normal at the specificed location. The terrain normal is a V3.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getexactterrainandnormal","kind":"Function"},{"name":"getexactterrainwithshield","displayName":"GetExactTerrainWithShield","usage":"GetExactTerrainWithShield(<-posX <-posZ <-includePseudoTerrain) ->exactTerrainHeight","description":"<p>\nSame as GetExactTerrain, except shield are factored in.  A shield height will be included in the returned terrain height, if present\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getexactterrainwithshield","kind":"Function"},{"name":"getfactory","displayName":"GetFactory","usage":"GetFactory ->uid","description":"<p>\nGets the ID of the Factory.  Returns -1 if the Factory is not on the map.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getfactory","kind":"Function"},{"name":"getfactorywares","displayName":"GetFactoryWares","usage":"GetFactoryWares(<-wareType) ->wareCount","description":"<p>\nGets count of the number of wares of a particular type currently held in the factory. WareType should be 1,2, or 3. 1 = AC, 2 = ARG, 3 = Liftic\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getfactorywares","kind":"Function"},{"name":"getfieldcell","displayName":"GetFieldCell","usage":"GetFieldCell(<-cellX <-cellZ <-AC) ->fieldValue","description":"<p>\nGets the field cell as the specified location.  If &#039;AC&#039; is true, then the AC affecting fields will be returned. If false, then the creeper affecting field will be returned. The value returned is a V2.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getfieldcell","kind":"Function"},{"name":"getfinaldialogopen","displayName":"GetFinalDialogOpen","usage":"GetFinalDialogOpen ->finalDialogOpen","description":"<p>\nReturns a boolean indicating if mission ending dialog is open.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getfinaldialogopen","kind":"Function"},{"name":"getflow","displayName":"GetFlow","usage":"GetFlow(<-cellX <-cellZ) ->flowZ ->flowX","description":"<p>\nGets the wave flow vector for a given map location.\nPerfectly still creeper that isn&#039;t flowing will have a {0,0} flow vector. Once creeper starts to flow, the flow vector will\nstore the amount of creper that moved in or out of the cell on the last game update frame. So creeper flowing only towards the right of the map,\nwould return a positive flowX and a zero flowZ.\nNote that flow values in integer creeper values. A value of 1000000 (1 million) represents an amount of “1” creeper on the map.\nFlow values can be useful for finding/setting waves.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getflow","kind":"Function"},{"name":"getgameframecount","displayName":"GetGameFrameCount","usage":"GetGameFrameCount","description":"<p>\nPushes the game&#039;s frame count to the stack. The frame count increments by 1 for every frame of the game. This happens when the game is paused and every time the screen is refreshed. Typically this is at 60fps, which means the frame count can go up by 2 for every game frame. When high FPS is disabled, the frame count increases by 1 for every game frame.<br>\n\nAlso refer to <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getgameupdatecount\" class=\"wikilink1\" title=\"4rpl:commands:getgameupdatecount\" data-wiki-id=\"4rpl:commands:getgameupdatecount\">GetGameUpdateCount</a> and <a href=\"/wiki/doku.php?id=4rpl:commands:getgametickcount\" class=\"wikilink1\" title=\"4rpl:commands:getgametickcount\" data-wiki-id=\"4rpl:commands:getgametickcount\">GetGameTickCount</a> for additional timer-based commands.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getgameframecount","kind":"Function"},{"name":"getgametickcount","displayName":"GetGameTickCount","usage":"GetGameTickCount","description":"<p>\nPushes the game&#039;s tick count to the stack. The tick count is similar to the game update count, except it always increments even when the game is paused.\nIt only ever goes up through a mission. Ideally, it increases at 30 fps.\n</p>\n\n<p>\n Also refer to <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getgameupdatecount\" class=\"wikilink1\" title=\"4rpl:commands:getgameupdatecount\" data-wiki-id=\"4rpl:commands:getgameupdatecount\">GetGameUpdateCount</a> and <a href=\"/wiki/doku.php?id=4rpl:commands:getunitupdatecount\" class=\"wikilink1\" title=\"4rpl:commands:getunitupdatecount\" data-wiki-id=\"4rpl:commands:getunitupdatecount\">GetUnitUpdateCount</a> for additional timer-based commands.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getgametickcount","kind":"Function"},{"name":"getgameupdatecount","displayName":"GetGameUpdateCount","usage":"GetGameUpdateCount","description":"<p>\nPushes the game&#039;s update count to the stack. The update count is basically the current mission time. It is incremented once for each frame that the game executes.\nIt does not increment when the game is paused. It only ever goes up through a mission.\nIdeally, it increases at 30 fps.\n</p>\n\n<p>\n Also refer to <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getgametickcount\" class=\"wikilink1\" title=\"4rpl:commands:getgametickcount\" data-wiki-id=\"4rpl:commands:getgametickcount\">GetGameTickCount</a> and <a href=\"/wiki/doku.php?id=4rpl:commands:getunitupdatecount\" class=\"wikilink1\" title=\"4rpl:commands:getunitupdatecount\" data-wiki-id=\"4rpl:commands:getunitupdatecount\">GetUnitUpdateCount</a> for additional timer-based commands.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getgameupdatecount","kind":"Function"},{"name":"getgloballist","displayName":"GetGlobalList","usage":"GetGlobalList(<-index) ->data","description":"<p>\nReturns an entry from the global list. The global list is a single list per mission.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getgloballist","kind":"Function"},{"name":"getglobaltable","displayName":"GetGlobalTable","usage":"GetGlobalTable(“key”) ->data","description":"<p>\nReturns an entry from the global table. The global table is a single table per mission.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getglobaltable","kind":"Function"},{"name":"getkey","displayName":"GetKey","usage":"GetKey(<-key <-ignoreOverUI) ->val","description":"<p>\nReturns a boolean indicating if the specified key is held down.\nNote: This returns true for as long as the key is pressed.\nThe first argument is a string and specifies which key to check.\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.\nThe list of possible values for the first argument can be derived from the enumeration for \n<a href=\"https://knucklecracker.comhttps://docs.unity3d.com/ScriptReference/KeyCode.html\" class=\"urlextern\" title=\"https://docs.unity3d.com/ScriptReference/KeyCode.html\" rel=\"ugc nofollow\"> KeyCode</a>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getkey","kind":"Function"},{"name":"getkeydown","displayName":"GetKeyDown","usage":"GetKeyDown(<-key <-ignoreOverUI) ->val","description":"<p>\nReturns a boolean indicating if the specified Key was pressed during the game frame.\nNote: This only return true once until the key is released and pressed again.\nThe first argument is a string that specifies which key to check.\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.\nThe list of possible values for the first argument can be derived from the enumeration for \n<a href=\"https://knucklecracker.comhttps://docs.unity3d.com/ScriptReference/KeyCode.html\" class=\"urlextern\" title=\"https://docs.unity3d.com/ScriptReference/KeyCode.html\" rel=\"ugc nofollow\"> KeyCode</a>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getkeydown","kind":"Function"},{"name":"getlastexecutioncount","displayName":"GetLastExecutionCount","usage":"GetLastExecutionCount","description":"<p>\nPushes the last execution count to the stack. The execution count is the number of instructions/commands that a script executes. It can vary based on the conditional logic\nof the script. The last execution count is the count of instructions that executed the last time the script was invoked.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getlastexecutioncount","kind":"Function"},{"name":"getlistcount","displayName":"GetListCount","usage":"GetListCount(<-list) ->listSize","description":"<p>\nReturns the number of entries in a list.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getlistcount","kind":"Function"},{"name":"getlistelement","displayName":"GetListElement","usage":"GetListElement (<-list I) ->element","description":"<p>\nReturns the value at the specified index of a list. Lists are indexed from zero.\n</p>\n\n<p>\nNote: If a list is stored in a variable, this can be abbreviated to <-list[<-index].\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getlistelement","kind":"Function"},{"name":"getlistindex","displayName":"GetListIndex","usage":"GetListIndex(<-list <-item) ->index","description":"<p>\nReturns the index of the first occurrence of item in the list.  Returns -1 if not found\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getlistindex","kind":"Keyword"},{"name":"getlistindices","displayName":"GetListIndices","usage":"GetListIndices({-list {-item) ->indices","description":"<p>\nReturns a list containing the indices for each occurrence of item in the list.  Returns an empty list if item is not found\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getlistindices","kind":"Keyword"},{"name":"getmappedkey","displayName":"GetMappedKey","usage":"GetMappedKey(<-key <-ignoreOverUI) ->val","description":"<p>\nReturns a boolean indicating if the specified key is held down.\nNote: This returns true for as long as the key is pressed.\nThe first argument is a string that specifies the key mapping constant, as defined in Settings/Controls.\nTo see the mappings, bring up Settings/Controls and point at one of the key mapping buttons. The Mapping name will appear on the left under the name.\nNote that the mapping name is case sensitive.\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmappedkey","kind":"Function"},{"name":"getmappedkeydown","displayName":"GetMappedKeyDown","usage":"GetMappedKeyDown(<-key <-ignoreOverUI) ->val","description":"<p>\nReturns a boolean indicating if the specified Key was pressed during the game frame.\nNote: This only return true once until the key is released and pressed again.\nThe first argument is a string that specifies the key mapping constant, as defined in Settings/Controls.\nTo see the mappings, bring up Settings/Controls and point at one of the key mapping buttons. The Mapping name will appear on the left under the name.\nNote that the mapping name is case sensitive.\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmappedkeydown","kind":"Function"},{"name":"getmappedkeystrings","displayName":"GetMappedKeyStrings","usage":"GetMappedKeyStrings({-key) ->keySecondary ->keyPrimary","description":"<p>\nGiven the name of a mapped key, returns the primary and secondary binding strings, if defined. Note that for modifier keys, things like “Shift-W” will be returned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmappedkeystrings","kind":"Function"},{"name":"getmapsize","displayName":"GetMapSize","usage":"GetMapSize ->sizeZ ->sizeX","description":"<p>\nGets the integer dimensions of the map.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmapsize","kind":"Function"},{"name":"getmaxaccell","displayName":"GetMaxACCell","usage":"GetMaxACCell ->maxACCellZ ->maxACCellX","description":"<p>\nGets the map location that contains the maximum amount of anticreeper.\nIf the map contains no anticreeper, the returned X coordinate will be negative (not on the map)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmaxaccell","kind":"Function"},{"name":"getmaxcreepercell","displayName":"GetMaxCreeperCell","usage":"GetMaxCreeperCell ->maxCreeperCellZ ->maxCreeperCellX","description":"<p>\nGets the map location that contains the maximum amount of creeper.\nIf the map contains no creeper, the returned coordinate pair will be negative (not on the map)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmaxcreepercell","kind":"Function"},{"name":"getmaxcreepercellwithdamage","displayName":"GetMaxCreeperCellWithDamage","usage":"GetMaxCreeperCellWithDamage ->maxCreeperCellZ ->maxCreeperCellX","description":"<p>\nGets the map location that contains the maximum amount of creeper, factoring in the damage map.\nIf the map contains no creeper, the returned X coordinate will be negative (not on the map)\n</p>\n\n<p>\nNote that if you use it on the first frame of the map before it has calculated the creeper map it will return 0, 0 instead of -1, 0 if there&#039;s no creeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmaxcreepercellwithdamage","kind":"Function"},{"name":"getmcsentries","displayName":"GetMCSEntries","usage":"GetMCSEntries ->listOfEntries","description":"<p>\nMCS, or Mission Completion Stats, are stored in the mcs.dat file.  This file contains records for every played mission. GetMCSEntries will return a list of those entries.\nEach entry, or row, is also a list that contains 4 elements; “MapNum”, “Title”, “IsComplete”, “MapGUID”.  The “MapNum” is the number of the map in colonies.  “Title” is the map&#039;s title.\n“IsComplete” is a bool indicating if the map has been completed (all necessary objectives have been completed). “MapGUID” in the internal map unique identifier. <br>\n<br>\n\nRows are returned in random/hash order. <br>\n<br>\n\nThe map number and title are determined by looking at the LastMetaData file. This file is populated each time the Colonies are visited. Only Colony maps are in this file. As a consequence, locally created maps, story maps, or other internal maps will not have Map Numbers or Titles in the returned results of this <abbr title=\"Application Programming Interface\">API</abbr>.  The map number will show as -1 and the title as “UNKNOWN TITLE”.  \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmcsentries","kind":"Keyword"},{"name":"getmeshhealth","displayName":"GetMeshHealth","usage":"GetMeshHealth(<-cellX <-cellZ) ->health","description":"<p>\nReturns the mesh health value for a given cell.<br>\n\nIf mesh does not exist at the cell, 0 is returned.<br>\n\nIf mesh exists but is in the un-grown state (gray), then a value between -1000000 and -1 is returned indicating how grown the mesh is.  -1000000 is the most ungrown and -1 is at the point of completion.<br>\n\nIf the mesh is grown then a value between 1 and 1000000 is returned.  1000000 is full health and 1 is at the point of destruction.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmeshhealth","kind":"Function"},{"name":"getminaccell","displayName":"GetMinACCell","usage":"GetMinACCell ->minACCellZ ->minACCellX","description":"<p>\nGets the map location that contains the smallest amount of anticreeper\nIf the map contains no anticreeper, the returned X coordinate will be negative (not on the map)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getminaccell","kind":"Function"},{"name":"getmincreepercell","displayName":"GetMinCreeperCell","usage":"GetMinCreeperCell ->minCreeperCellZ ->minCreeperCellX","description":"<p>\nGets the map location that contains the smallest amount of creeper\nIf the map contains no creeper, the returned X coordinate will be negative (not on the map)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmincreepercell","kind":"Function"},{"name":"getmincreepercellwithdamage","displayName":"GetMinCreeperCellWithDamage","usage":"GetMinCreeperCellWithDamage ->minCreeperCellZ ->minCreeperCellX","description":"<p>\nGets the map location that contains the smallest amount of creeper factoring in damage.\nIf the map contains no creeper, the returned coordinates will be 0 0.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmincreepercellwithdamage","kind":"Function"},{"name":"getminermode","displayName":"GetMinerMode","usage":"GetMinerMode(<-miner) ->mode","description":"<p>\nGets the production mode of a miner. 0 means energy and 1 means bluite. If the unit passed in is not a miner, -1 is returned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getminermode","kind":"Function"},{"name":"getmissionobjectiveenabled","displayName":"GetMissionObjectiveEnabled","usage":"GetMissionObjectiveEnabled(<-objectiveNumber) ->enabled","description":"<p>\nGets whether the specified mission objective is a enabled.\n</p>\n\n<p>\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:acquiremissionobjective\" class=\"wikilink1\" title=\"4rpl:commands:acquiremissionobjective\" data-wiki-id=\"4rpl:commands:acquiremissionobjective\">AcquireMissionObjective</a> for the enumeration of mission objectives. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmissionobjectiveenabled","kind":"Function"},{"name":"getmissionobjectiverequired","displayName":"GetMissionObjectiveRequired","usage":"GetMissionObjectiveRequired(<-objectiveNumber) ->required","description":"<p>\nGets whether the specified mission objective is a required objective.\n</p>\n\n<p>\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:acquiremissionobjective\" class=\"wikilink1\" title=\"4rpl:commands:acquiremissionobjective\" data-wiki-id=\"4rpl:commands:acquiremissionobjective\">AcquireMissionObjective</a> for the enumeration of mission objectives. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmissionobjectiverequired","kind":"Function"},{"name":"getmissionobjectivestate","displayName":"GetMissionObjectiveState","usage":"GetMissionObjectiveState(<-objectiveNumber) ->state","description":"<p>\nGets state (1, -1 or 0) of a mission objective. Mission objectives are defined in the game menu of a mission. \nMission objectives range from 0 to 5 and are  enumerated in <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:acquiremissionobjective\" class=\"wikilink1\" title=\"4rpl:commands:acquiremissionobjective\" data-wiki-id=\"4rpl:commands:acquiremissionobjective\">acquiremissionobjective</a>.\n</p>\n\n<p>\nStates are: \n</p>\n<dl>\n<dt class=\"level1\"><span class=\"dt\"> 0</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n Objective not (yet) achieved\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> 1</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n Objective achieved\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> -1</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n Objective failed\n</div></dd>\n</dl>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmissionobjectivestate","kind":"Function"},{"name":"getmissionscancomplete","displayName":"GetMissionScanComplete","usage":"GetMissionScanComplete ->missionScanComplete","description":"<p>\nReturns a boolean indicating if the initial mission scan has completed. The initial mission scan is the grid the sweeps on the map at mission start.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmissionscancomplete","kind":"Function"},{"name":"getmousebutton","displayName":"GetMouseButton","usage":"GetMouseButton(<-button <-ignoreOverUI) ->val","description":"<p>\nReturns a boolean indicating if the specified mouse button is pressed.\nNote: This returns true for as long as the mouse button is pressed.\nThe button argument specifies which mouse button the check. A value of 0 means the left button, 1 the right button, and 2 the middle button.\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmousebutton","kind":"Function"},{"name":"getmousebuttondown","displayName":"GetMouseButtonDown","usage":"GetMouseButtonDown(<-button <-ignoreOverUI) ->val","description":"<p>\nReturns a boolean indicating if the specified mouse button was pressed during the game frame.\nNote: This only return true once until the mouse button is released and pressed again.\nThe button argument specifies which mouse button to check. A value of 0 means the left button, 1 the right button, and 2 the middle button.\nThe second argument indicates whether to ignore the events when over the <abbr title=\"User Interface\">UI</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmousebuttondown","kind":"Function"},{"name":"getmousebuttonup","displayName":"GetMouseButtonUp","usage":"GetMouseButtonUp(<-button <-ignoreOverUI) ->val","description":"<p>\nReturns a boolean indicating if the specified mouse button was released during the game frame.\nNote: This only return true once until the mouse button is pressed and released again.\nThe button argument specifies which mouse button the check. A value of 0 means the left button, 1 the right button, and 2 the middle button.\nThe second argument indicates whether to ignore the  events when over the <abbr title=\"User Interface\">UI</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmousebuttonup","kind":"Function"},{"name":"getmousedelta","displayName":"GetMouseDelta","usage":"GetMouseDelta ->mouseDelta","description":"<p>\nReturns the mouse movement delta as a V2. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmousedelta","kind":"Function"},{"name":"getmousescrolldelta","displayName":"GetMouseScrollDelta","usage":"GetMouseScrollDelta(true) ->val","description":"<p>\nReturns a positive or negative number when the mouse scroll wheel is rotated.\nThe magnitude of the number is proportional to the amount the wheel is scrolled.\nThe argument to GetMouseScrollDelta indicates whether to ignore the scroll events when over the <abbr title=\"User Interface\">UI</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmousescrolldelta","kind":"Function"},{"name":"getmverseplayernum","displayName":"GetMVersePlayerNum","usage":"GetMVersePlayerNum ->playerNum","description":"<p>\nWhile in an MVerse session, returns the player number.  The host is always player 0.  The clients are player 1 through 3.  If not in an MVerse session, -1 is returned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmverseplayernum","kind":"Function"},{"name":"getmverseplayers","displayName":"GetMVersePlayers","usage":"GetMVersePlayers ->players","description":"<p>\nReturns a list that always contains exactly 4 elements.  Each element (0,1,2,3) contains the name of the mverse player, if an mverse player is connected with that player number.  If an element in the list does not contain a name (a string), it will contain a “null”. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isnull\" class=\"wikilink1\" title=\"4rpl:commands:isnull\" data-wiki-id=\"4rpl:commands:isnull\">IsNull</a> for how to check for null.  Alternately, null coerces to an empty string, so checking for “” would also work.  If null/“”, then there is no player connected in that mverse slot.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmverseplayers","kind":"Function"},{"name":"getnearestairsac","displayName":"GetNearestAirSac","usage":"GetNearestAirSac(<-worldPosition <-range <-factorAssignedMissiles) ->spore","description":"<p>\nFinds the nearest AirSac to the worldPosition, a Vector3, within the spherical range, a float.  The factorAssignedMissiles is a boolean that looks at the number of assigned missiles to the Air Sac.\nIf true, and there are enough missiles already in route to the Air Sac to destroy it, the Air Sac will be ignored.\nThe return value is the Air Sac <abbr title=\"Unique Identifier.\">UID</abbr>, or -1 if no Air Sac is found in range.\nNote that the range does not affect the performance of this call. All Air Sacs are iterated over regardless of the range.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getnearestairsac","kind":"Function"},{"name":"getnearestsnipertarget","displayName":"GetNearestSniperTarget","usage":"GetNearestSniperTarget(<-worldPosition <-range <-targetSpecials <-targetBlobs <-targetSkimmers <-targetForbs <-targetOrbs <-targetEggs) ->unit","description":"<p>\nFinds the nearest enemy unit that a sniper would shoot at within range (a float) from worldPosition (a vector3). The target booleans specify whether a unit of that type is targeted.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getnearestsnipertarget","kind":"Function"},{"name":"getnearestspore","displayName":"GetNearestSpore","usage":"GetNearestSpore(<-worldPosition <-range <-factorAssignedMissiles) ->spore","description":"<p>\nFinds the nearest spore to the worldPosition, a Vector3, within the spherical range, a float.  The factorAssignedMissiles is a boolean that looks at the number of assigned missiles to the spore.\nIf true, and there are enough missiles already in route to the spore to destroy it, the spore will be ignored.\nThe return value is the spore <abbr title=\"Unique Identifier.\">UID</abbr>, or -1 if no spore is found in range.\nNote that the range does not affect the performance of this call. All spores are iterated over regardless of the range.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getnearestspore","kind":"Function"},{"name":"getobjactive","displayName":"GetObjActive","usage":"GetObjActive(<-Unit “ObjName”) ->isActive","description":"<p>\nReturns a boolean indicating of the obj is active.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getobjactive","kind":"Function"},{"name":"getobjcolor","displayName":"GetObjColor","usage":"GetObjColor(<-Unit “ObjName”) ->color","description":"<p>\nReturns the RGB color values of a unit&#039;s object as a vector. Objects are the sub-parts that make up a unit.\nEach value, r,g,b, is a floating point number where 1 is full brightness and 0 is minimal brightness.\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getobjcolor","kind":"Function"},{"name":"getobjfacingangle","displayName":"GetObjFacingAngle","usage":"GetObjFacingAngle(<-UID “ObjName” <-pos) ->angle","description":"<p>\nReturns the angle in degrees between the obj&#039;s forward (the z direction) and the specified vector world position. The vector (X,Y,Z coordinates) are a position in 3D world space.\nAn obj is facing a position when the forward (z direction) of the obj it pointing directly at the position.\nThis function works using world coordinates.\nThe resulting angle is in degrees.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getobjfacingangle","kind":"Function"},{"name":"getobjfacinganglecell","displayName":"GetObjFacingAngleCell","usage":"GetObjFacingAngleCell(<-UID “ObjName” <-posX <-posZ) ->angle","description":"<p>\nReturns the angle in degrees between the obj&#039;s forward (the z direction) and the specified world position. The X,Z coordinates are a position in 3D world space.\nAn obj is facing a position when the forward (z direction) of the obj it pointing directly at the position.\nThis function ignores the y position of the obj.\nThis function works using world coordinates.\nThe resulting angle is in degrees.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getobjfacinganglecell","kind":"Function"},{"name":"getobjforward","displayName":"GetObjForward","usage":"GetObjForward(<-Unit “ObjName”) ->pos","description":"<p>\nReturns a vector (X,Y,Z) representing the object&#039;s forward direction (the positive z direction of the unit).\nThe returned vector is in world space, and is not relative to the object&#039;s parent.\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getobjforward","kind":"Function"},{"name":"getobjposition","displayName":"GetObjPosition","usage":"GetObjPosition(<-Unit “ObjName” <-world) ->point","description":"<p>\nReturns a position vector (X,Y,Z coordinates) of a unit&#039;s object. Objects are the sub-parts that make up a unit.\nIf world is false, then local coordinates are returned, otherwise world coordinates are returned.\nNote, use “” (empty string) to indicate the root level object.\n</p>\n\n<p>\nNote: If this call is attempted on an non-existing obj name, nothing will be put on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getobjposition","kind":"Function"},{"name":"getobjrotation","displayName":"GetObjRotation","usage":"GetObjRotation(<-Unit “ObjName” <-world) ->rotDeg","description":"<p>\nReturns a vector holding the X,Y,Z angles of a unit&#039;s object in degrees. Objects are the sub-parts that make up a unit.\nIf world is false, then local angles are returned, otherwise world angles are returned.\nNote, use “” (empty string) to indicate the root level object.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > <strong>Note:</strong> Because GetObjRotation returns the value of <a href=\"https://knucklecracker.comhttps://docs.unity3d.com/ScriptReference/Transform-eulerAngles.html\" class=\"urlextern\" title=\"https://docs.unity3d.com/ScriptReference/Transform-eulerAngles.html\" rel=\"ugc nofollow\">eulerAngles</a>, some rotations will get represented differently when you set euler angles and then read them back out. Do not expect that the values set by SetObjRotation or the initial values set in the unit settings will come out the same when retrieved with GetObjRotation. For example, a unit that&#039;s preset with a rotation of (180, 0, 0) will produce a result of (0, 180, 180) when retrieved with GetObjRotation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getobjrotation","kind":"Function"},{"name":"getobjscale","displayName":"GetObjScale","usage":"GetObjScale(<-Unit “ObjName”) ->scale","description":"<p>\nReturns local X,Y,Z scale of a unit&#039;s object as a vector. Objects are the sub-parts that make up a unit.\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getobjscale","kind":"Function"},{"name":"getopenbuildtab","displayName":"GetOpenBuildTab","usage":"GetOpenBuildTab ->openTab","description":"<p>\nReturns a number indicating the currently open build tab. 0 for Struct, 1 for Weapons, 2 for Air. 3 for Special, and 4 for Custom\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getopenbuildtab","kind":"Function"},{"name":"getorbitalcount","displayName":"GetOrbitalCount","usage":"GetOrbitalCount ->orbitals","description":"<p>\nReturns the number of available orbitals\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getorbitalcount","kind":"Function"},{"name":"getpause","displayName":"GetPause","usage":"GetPause ->isPaused","description":"<p>\nReturns a boolean indicating if the game is paused (for any reason). Different things can pause the game and some pauses &#039;stack&#039;\nThis call will return true if the game is paused for any reason. Note that scripts usually don&#039;t run while the game is paused,\nso this call is most useful in scripts that are set to run when the game is paused.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" > This also applies to the game pausing when opening the ESC menu.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getpause","kind":"Function"},{"name":"getpointerterraincoords","displayName":"GetPointerTerrainCoords","usage":"GetPointerTerrainCoords ->cellZ ->cellX","description":"<p>\nGets the map cell coordinates current pointed at by the game pointer (the mouse). A ray projection is done from the pointer through the 3D world and\na collision is checked at each terrain height level. So this <abbr title=\"Application Programming Interface\">API</abbr> will return the location on the map surface that the pointer is pointing towards.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getpointerterraincoords","kind":"Function"},{"name":"getprintprefixenabled","displayName":"GetPrintPrefixEnabled","usage":"GetPrintPrefixEnabled ->enabled","description":"<p>\nGets if print statements should prefix each output with the name of the script. On by default.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getprintprefixenabled","kind":"Function"},{"name":"getrandmapcell","displayName":"GetRandMapCell","usage":"GetRandMapCell ->cellZ ->cellX","description":"<p>\nGets a random map position. The values will be in the range [0,mapWidth), [0,mapLength)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getrandmapcell","kind":"Function"},{"name":"getregisteredscriptvar","displayName":"GetRegisteredScriptVar","usage":"GetRegisteredScriptVar(<-RegisteredScriptName <-varName) ->val","description":"<p>\nGets the named variable on the specified registered script. The value returned will be a direct instance of the var held by registered script instance. If the registered script not exist, a null value (equivalent to 0) is returned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getregisteredscriptvar","kind":"Function"},{"name":"getriftlab","displayName":"GetRiftLab","usage":"GetRiftLab ->uid","description":"<p>\nGets the ID of the Rift Lab.  Returns -1 if the Rift Lab is not on the map.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getriftlab","kind":"Function"},{"name":"getrplcamforward","displayName":"GetRPLCamForward","usage":"GetRPLCamForward ->forwardDir","description":"<p>\nGets the camera&#039;s forward directional vector when in rpl mode. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getrplcamforward","kind":"Function"},{"name":"getrplcamposition","displayName":"GetRPLCamPosition","usage":"GetRPLCamPosition ->pos","description":"<p>\nGets the camera position when in rpl mode. Pos is a Vector3. Only has an affect when the camera is in rpl mode.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getrplcamposition","kind":"Function"},{"name":"getrplcamright","displayName":"GetRPLCamRight","usage":"GetRPLCamRight ->rightDir","description":"<p>\nGets the camera&#039;s right directional vector when in rpl mode. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getrplcamright","kind":"Function"},{"name":"getrplcamrotation","displayName":"GetRPLCamRotation","usage":"GetRPLCamRotation ->rot","description":"<p>\nGets the camera rotation when in rpl mode. Rot is a Vector3. Only has an affect when the camera is in rpl mode.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getrplcamrotation","kind":"Function"},{"name":"getrplcamup","displayName":"GetRPLCamUp","usage":"GetRPLCamUp ->upDir","description":"<p>\nGets the camera&#039;s up directional vector when in rpl mode. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getrplcamup","kind":"Function"},{"name":"getscript1var","displayName":"GetScript1Var","usage":"GetScript1Var(<-unit <-varName) ->val","description":"<p>\nGets the named variable on the specified unit&#039;s first script.\nThe value returned will be a direct instance of the var held by the unit.\nIf the unit or var does not exit, a null value (equivalent to 0) is returned.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" > Although input/init variables ($varName:&lt;VARIABLE TYPE&gt;) are technically the unit settings of a custom unit, they are still variables and applicable to this <abbr title=\"Application Programming Interface\">API</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getscript1var","kind":"Function"},{"name":"getscriptvar","displayName":"GetScriptVar","usage":"GetScriptVar(<-unit <-scriptName <-varName) ->val","description":"<p>\nGets the named variable on the specified unit and script.\nThe script is referenced by name. If the name is an empty string, the first (possibly only) script on the unit will be referenced.\nThe value returned will be a direct instance of the var held by the unit.\nIf the unit or var does not exit, a null value (equivalent to 0) is returned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getscriptvar","kind":"Function"},{"name":"getselectedunits","displayName":"GetSelectedUnits","usage":"GetSelectedUnits ->selectedUnitList","description":"<p>\nReturns a list of the unit <abbr title=\"Unique Identifier.\">UID</abbr>&#039;s for any currently selected units\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getselectedunits","kind":"Function"},{"name":"getsoylentmode","displayName":"GetSoylentMode","usage":"GetSoylentMode ->soylentMode","description":"<p>\nReturns a boolean indicating if towers can produce energy (the green soylent area)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getsoylentmode","kind":"Function"},{"name":"gettablecount","displayName":"GetTableCount","usage":"GetTableCount(<-table) ->count","description":"<p>\nReturns the number of keys (and hence values) in a table.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettablecount","kind":"Function"},{"name":"gettableelement","displayName":"GetTableElement","usage":"GetTableElement(<-table <-key) ->value","description":"<p>\nRetrieves an element from a table and pushes it to the stack. Note that keys are case sensitive strings.\nA special syntax can also be used to retrieve a table element. See the example below.\n</p>\n\n<p>\nIf the specified element (key) does not exists in the table, the return value will have a type of NULL and can be tested with the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettype\" class=\"wikilink1\" title=\"4rpl:commands:gettype\" data-wiki-id=\"4rpl:commands:gettype\">GetType</a> command.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettableelement","kind":"Function"},{"name":"gettablekeys","displayName":"GetTableKeys","usage":"GetTableKeys(<-table) ->keysList","description":"<p>\nReturns a list containing the keys of the specified table.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettablekeys","kind":"Function"},{"name":"gettablevalues","displayName":"GetTableValues","usage":"GetTableValues(<-table) ->valuesList","description":"<p>\nReturns a list containing the values of the specified table.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettablevalues","kind":"Function"},{"name":"getterraformdigsite","displayName":"GetTerraformDigSite","usage":"GetTerraformDigSite(<-cellX <-cellY <-range <-findClosest <-checkActiveCells <-checkCreeper <-checkAC <-checkDenier) ->cellZ ->cellX","description":"<p>\nReturns coordinates of a terraform marked cell. <br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n cellX/cellY: (int) The coordinates to search from. <br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n range: (int) The range outward from the coordinates to search. <br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n findClosest: (bool) If true, then find the closest terraform marked cell. Otherwise, find the terraform cell with the greatest work to do. <br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n checkActiveCells: (bool) If true, then only find target cells that are NOT already being worked on. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setterraformactivecell\" class=\"wikilink1\" title=\"4rpl:commands:setterraformactivecell\" data-wiki-id=\"4rpl:commands:setterraformactivecell\">SETTERRAFORMACTIVECELL</a>. <br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n checkCreeper: (bool) If true, then only find target cells that are NOT in creeper. <br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n checkAC: (bool) If true, then only find target cells that are NOT in Anticreeper. <br>\n\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n checkDenier: (bool) If true, then only find target cells that are NOT in a denier area. <br>\n\n</div></li>\n</ul>\n\n\n<p>\nValues of -1,-1 are returned if no cells are found.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterraformdigsite","kind":"Function"},{"name":"getterraformmarker","displayName":"GetTerraformMarker","usage":"GetTerraformMarker(<-cellX <-cellY) ->markerLevel","description":"<p>\nReturns an int indicating the terraform marker at the specified location. A value of -1 means there is no marker at the location. Other values indicate that height that the terraform marker represents.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterraformmarker","kind":"Function"},{"name":"getterraformmenuopen","displayName":"GetTerraformMenuOpen","usage":"GetTerraformMenuOpen ->terraformMenuOpen","description":"<p>\nReturns a boolean indicating if the terraform menu is currently open\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterraformmenuopen","kind":"Function"},{"name":"getterrain","displayName":"GetTerrain","usage":"GetTerrain(<-cellX <-cellZ) ->terrainHeight","description":"<p>\nGets the integer height of the terrain at the specified integer map coordinates.  A value of 0 means “void” or no terrain.\nA value of -1 is returned if the terrain coordinate is outside the map.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterrain","kind":"Function"},{"name":"getterrainlos","displayName":"GetTerrainLOS","usage":"GetTerrainLOS(<-start <-end <-checkLastCell) ->hit","description":"<p>\nChecks a line running from start to end and returns the terrain cell (if any) that the line first intersects.<br>\n\nThis routine is useful for checking the exact terrain line of sight. If a unit wants to fire from any location in 3d space to any location in 3d space, this routine can check if there is any terrain in the way and where.\n</p>\n\n<p>\n-The &#039;start&#039;, &#039;end&#039; and &#039;hit&#039; vars are all vectors.\n</p>\n\n<p>\n-Checking the last cell is a Boolean that will check all cells from start to end. This is potentially useful as unit positions are located just above terrain. This parameter is a good way to reduce sensitivity when having an end position being from <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitposition\" class=\"wikilink1\" title=\"4rpl:commands:getunitposition\" data-wiki-id=\"4rpl:commands:getunitposition\">GetUnitPosition</a>. (If this is wrong, feel free to update this).\n</p>\n\n<p>\n-The return value is the vector position in 3d space (floats) of the location where the collision took place.  If there is no collision, then the returned hit locations are negative. Please keep this in mind if wanting to place this <abbr title=\"Application Programming Interface\">API</abbr> within an <a href=\"/wiki/doku.php?id=4rpl:commands:if\" class=\"wikilink1\" title=\"4rpl:commands:if\" data-wiki-id=\"4rpl:commands:if\">if</a> clause. You will most likely want to run this <abbr title=\"Application Programming Interface\">API</abbr> outside of the <a href=\"/wiki/doku.php?id=4rpl:commands:if\" class=\"wikilink1\" title=\"4rpl:commands:if\" data-wiki-id=\"4rpl:commands:if\">if</a> clause and check if one of the vectors returns -1 instead.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" ><br>\n\nThis <abbr title=\"Application Programming Interface\">API</abbr> has a more applicable LOS calculation than the LOS parameter in <a href=\"/wiki/doku.php?id=4rpl:commands:getunits\" class=\"wikilink1\" title=\"4rpl:commands:getunits\" data-wiki-id=\"4rpl:commands:getunits\">GetUnits</a> (at least in practice). If you are making a custom unit which depends on LOS calculations within <a href=\"/wiki/doku.php?id=4rpl:commands:getunits\" class=\"wikilink1\" title=\"4rpl:commands:getunits\" data-wiki-id=\"4rpl:commands:getunits\">GetUnits</a> and it consistently fails for what ever reason to have a clear LOS in practice (such as projectiles constantly hitting into terrain), this is an EXCELENT backup to double check.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/warning-yellow.png\" class=\"icon smiley\" alt=\":WARNING:\" ><br>\n\nThis <abbr title=\"Application Programming Interface\">API</abbr> will overflow if void terrain is involved. This means the <abbr title=\"Application Programming Interface\">API</abbr> will not return -1 in any vector but -2,147,483,648. This means you can not use eq(-1) when looking for when no terrain collision occurs if void is involved. So instead of using eq(-1), use lte0.<br>\n\nFurther more, sometimes when calculating LOS to a void location (such as a unit position on top of the void), it would be wise to check if the Y vector is lte0 rather than lt0 and any other vector as in practice, the <abbr title=\"Application Programming Interface\">API</abbr> becomes “indecisive”. (If you have more information about this, feel free to edit this section).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterrainlos","kind":"Function"},{"name":"getterrainoverride","displayName":"GetTerrainOverride","usage":"GetTerrainOverride(<-cellX <-cellZ) ->terrainOverride","description":"<p>\nSpecifies the terrain override for a cell of terrain. An override can be used to raise the apparent height of the terrain for purposes of creeper flow. If the value of the terrain override is lower than the actual terrain height, there is no effect.  Terrain overrides can be higher than the actual terrain max height of 20. Beware that the max height is 2147, and the value stacks with unit pseudo terrain (if present). Values in excess of 2147 will wrap around to negative values.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterrainoverride","kind":"Function"},{"name":"getterrainspecial","displayName":"GetTerrainSpecial","usage":"GetTerrainSpecial(<-posX <-posZ) ->specialTerrainSlot","description":"<p>\nGets the slot for the special terrain present at the terrain location specified by posX and posZ. A value of 0 mean no special terrain is present. A value of 1 through 10 (inclusive) indicates the special terrain slot present at the location. The special terrain slots are defined in the &#039;Creeper&#039; tab in the editor.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterrainspecial","kind":"Function"},{"name":"getterrainvector","displayName":"GetTerrainVector","usage":"GetTerrainVector{<-cellX <-cellZ) ->vector","description":"<p>\nGets the integer height of the terrain at the specified integer map coordinates and returns it as the y position in a vector.  A value of 0 means “void” or no terrain.\nThe X and Z values of the vector are also filled in with the supplied cellX and cellZ arguments\nA value of -1 is returned if the terrain coordinate is outside the map.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterrainvector","kind":"Function"},{"name":"getthemeclifflight","displayName":"GetThemeCliffLight","usage":"GetThemeCliffLight ->blue ->green ->red","description":"<p>\nGets the current theme&#039;s cliff light color.\nThree values; red/green/blue are returned. Each is a floating point number where 1 is full brightness and 0 is minimal brightness.\nThe texture light gets multiplied with the texture color at each pixel to determine the final color to show on the screen.\nSo a color of [1,1,1] will leave the texture unaltered.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemeclifflight","kind":"Function"},{"name":"getthemeclifflightboost","displayName":"GetThemeCliffLightBoost","usage":"GetThemeCliffLightBoost ->lightBoost","description":"<p>\nGets the current theme&#039;s cliff light boost.\nThe light boost is a number that gets multiplied with the light color before the light is applied to the texture.\nThe default value for the boost is 1, so it makes no changes to the color.  When the value is set to 2 (what the theme editor sets the\nvalue to when &#039;2X intensity&#039; is checked), the light color gets doubled. The resulting light, when multiplied with the texture, can produce a\nresulting color that is brighther than the SDR color range. If the game has the bloom effect enabled, the resulting texture will appear to glow\nat any pixels whose resulting color is greater than &#039;1&#039;.\nValues can be any floating point value, but values of 1 and 2 are most common and what the theme editor in the game works with.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemeclifflightboost","kind":"Function"},{"name":"getthemecliffnormal","displayName":"GetThemeCliffNormal","usage":"GetThemeCliffNormal ->normalMap","description":"<p>\nGets the current theme&#039;s cliff normal map.\nNormal map numbers are in the range of 0 to 400, with 0 to 380 being built in normal maps.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemecliffnormal","kind":"Function"},{"name":"getthemecliffnormalamt","displayName":"GetThemeCliffNormalAmt","usage":"GetThemeCliffNormalAmt ->normalAmt","description":"<p>\nGets the current theme&#039;s cliff normal map amount.\nThe amount is a floating point number that specifies the intensity of the normals to apply to the texture. A value of 0\ndisables the normal map.  Higher values make the normals appear more pronounced. A value of &#039;2&#039; is the default.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemecliffnormalamt","kind":"Function"},{"name":"getthemecliffnormalscale","displayName":"GetThemeCliffNormalScale","usage":"GetThemeCliffNormalScale ->normalScale","description":"<p>\nGets the current theme&#039;s cliff normal map scale.\nThe scale is a floating point number that specifies the size the normal map appears. Higher numbers make the normal map appear larger.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemecliffnormalscale","kind":"Function"},{"name":"getthemecliffscale","displayName":"GetThemeCliffScale","usage":"GetThemeCliffScale ->textureScale","description":"<p>\nGets the current theme&#039;s cliff texture scale.\nThe scale is a floating point number that specifies the size the texture appears. Higher numbers make the texture appear larger.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemecliffscale","kind":"Function"},{"name":"getthemeclifftexture","displayName":"GetThemeCliffTexture","usage":"GetThemeCliffTexture ->texture","description":"<p>\nGets the current theme&#039;s cliff texture number.\nTexture numbers are in the range of 0 to 400, with 0 to 380 being built in textures.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemeclifftexture","kind":"Function"},{"name":"getthemenormal","displayName":"GetThemeNormal","usage":"GetThemeNormal(<-terrainLevel) ->normalMap","description":"<p>\nGets the current theme&#039;s normal map number for the specified level. Terrain levels range from 1 to 20.\nNormal map numbers are in the range of 0 to 400, with 0 to 380 being built in normal maps.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemenormal","kind":"Function"},{"name":"getthemenormalamt","displayName":"GetThemeNormalAmt","usage":"GetThemeNormalAmt(<-terrainLevel) ->normalAmt","description":"<p>\nGets the current theme&#039;s normal map amount for the specified level. Terrain levels range from 1 to 20.\nThe amount is a floating point number that specifies the intensity of the normals to apply to the texture. A value of 0\ndisables the normal map.  Higher values make the normals appear more pronounced. A value of &#039;2&#039; is the default.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemenormalamt","kind":"Function"},{"name":"getthemenormalscale","displayName":"GetThemeNormalScale","usage":"GetThemeNormalScale(<-terrainLevel) ->normalScale","description":"<p>\nGets the current theme&#039;s normal map scale for the specified level. Terrain levels range from 1 to 20.\nThe scale is a floating point number that specifies the size the normal map appears. Higher numbers make the normal map appear larger.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemenormalscale","kind":"Function"},{"name":"getthemetexture","displayName":"GetThemeTexture","usage":"GetThemeTexture(<-terrainLevel) ->texture","description":"<p>\nGets the current theme&#039;s texture number for the specified level. Terrain levels range from 1 to 20.\nTexture numbers are in the range of 0 to 400, with 0 to 380 being built in textures.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemetexture","kind":"Function"},{"name":"getthemetexturedetile","displayName":"GetThemeTextureDeTile","usage":"GetThemeTextureDeTile(<-terrainLevel) ->detiled","description":"<p>\nGets the current theme&#039;s texture detiling value for the specified level. Terrain levels range from 1 to 20.\nThe returned value is a float indicating the terrain level&#039;s detiling amount.  A value of 0 turns detiliing off.\nValues greater than 0 cause the texture to detile. A typical value for detiling would be 0.2.  Detiling values that are greater than 1, and clipped to 1.\nDe-tiling scrambles the texture using a stochastic blending process. It can remove repeating patterns when\na repeating pattern is not desired.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemetexturedetile","kind":"Function"},{"name":"getthemetexturelight","displayName":"GetThemeTextureLight","usage":"GetThemeTextureLight(<-terrainLevel) ->blue ->green ->red","description":"<p>\nGets the current theme&#039;s light color for the specified level. Terrain levels range from 1 to 20.\nThree values; red/green/blue are returned. Each is a floating point number where 1 is full brightness and 0 is minimal brightness.\nThe texture light gets multiplied with the texture color at each pixel to determine the final color to show on the screen.\nSo a color of [1,1,1] will leave the texture unaltered.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemetexturelight","kind":"Function"},{"name":"getthemetexturelightboost","displayName":"GetThemeTextureLightBoost","usage":"GetThemeTextureLightBoost(<-terrainLevel) ->lightBoost","description":"<p>\nGets the current theme&#039;s light boost for the specified level. Terrain levels range from 1 to 20.\nThe light boost is a number that gets multiplied with the light color before the light is applied to the texture.\nThe default value for the boost is 1, so it makes no changes to the color.  When the value is set to 2 (what the theme editor sets the\nvalue to when &#039;2X intensity&#039; is checked), the light color gets doubled. The resulting light, when multiplied with the texture, can produce a\nresulting color that is brighther than the SDR color range. If the game has the bloom effect enabled, the resulting texture will appear to glow\nat any pixels whose resulting color is greater than &#039;1&#039;.\nValues can be any floating point value, but values of 1 and 2 are most common and what the theme editor in the game works with.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemetexturelightboost","kind":"Function"},{"name":"getthemetexturescale","displayName":"GetThemeTextureScale","usage":"GetThemeTextureScale(<-terrainLevel) ->textureScale","description":"<p>\nGets the current theme&#039;s texture scale for the specified level. Terrain levels range from 1 to 20.\nThe scale is a floating point number that specifies the size the texture appears. Higher numbers make the texture appear larger.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getthemetexturescale","kind":"Function"},{"name":"gettimer0","displayName":"GetTimer0","usage":"GetTimer0 ->val","description":"<p>\nGets the current value of timer 0. Timers are set to some value, and the decrease by 1 each game frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettimer0","kind":"Function"},{"name":"gettimer1","displayName":"GetTimer1","usage":"GetTimer1 ->val","description":"<p>\nGets the current value of timer 1. Timers are set to some value, and the decrease by 1 each game frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettimer1","kind":"Function"},{"name":"gettimer2","displayName":"GetTimer2","usage":"GetTimer2 ->val","description":"<p>\nGets the current value of timer 2. Timers are set to some value, and the decrease by 1 each game frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettimer2","kind":"Function"},{"name":"gettimer3","displayName":"GetTimer3","usage":"GetTimer3 ->val","description":"<p>\nGets the current value of timer 3. Timers are set to some value, and the decrease by 1 each game frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettimer3","kind":"Function"},{"name":"gettimestring","displayName":"GetTimeString","usage":"GetTimeString(<-frameCount)","description":"<p>\nTake a framecount and returns a string representing a time in seconds, accurate to 0.1 seconds.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettimestring","kind":"Function"},{"name":"gettotalac","displayName":"GetTotalAC","usage":"GetTotalAC ->totalAC","description":"<p>\nGets the total amount of anticreeper on the map as a floating point value.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettotalac","kind":"Function"},{"name":"gettotalcreeper","displayName":"GetTotalCreeper","usage":"GetTotalCreeper ->totalCreeper","description":"<p>\nGets the total amount of creeper on the map as a floating point value.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettotalcreeper","kind":"Function"},{"name":"gettotemactivated","displayName":"GetTotemActivated","usage":"GetTotemActivated(<-totem) ->activated","description":"<p>\nGets the activated state of a totem.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettotemactivated","kind":"Function"},{"name":"gettype","displayName":"GetType","usage":"GetType (<-something) ->typeOfSomething","description":"<p>\nTakes a value and returns a string of what type of value it is. Types: STRING INT FLOAT VECTOR LIST TABLE NULL\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gettype","kind":"Function"},{"name":"getundercreepereffectenabled","displayName":"GetUnderCreeperEffectEnabled","usage":"GetUnderCreeperEffectEnabled ->enabled","description":"<p>\nGets if the special effect is enabled when the camera is below the creeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getundercreepereffectenabled","kind":"Function"},{"name":"getunitammo","displayName":"GetUnitAmmo","usage":"GetUnitAmmo(<-unit) ->unitAmmo","description":"<p>\nPushes the ammo of the unit to the stack. One packet increments the ammo by 1.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitammo","kind":"Function"},{"name":"getunitammoware","displayName":"GetUnitAmmoWare","usage":"GetUnitAmmoWare(<-unit) ->unitAmmoWare","description":"<p>\nPushes the ammo ware type of the unit to the stack. \n</p>\n<dl>\n<dt class=\"level1\"><span class=\"dt\"> 0</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n energy \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> 1</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n anticreeper \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> 2</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n arg \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> 3</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n liftic \n</div></dd>\n</dl>\n\n\n<p>\nAdditionally, when used on a Porter (But not Pods) it will push \n</p>\n<dl>\n<dt class=\"level1\"><span class=\"dt\"> 4</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n Bluite \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> 5</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n Redon  \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> 6</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n Greenar\n</div></dd>\n</dl>\n\n\n<p>\n <br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitammoware","kind":"Function"},{"name":"getunitanticreeperdamages","displayName":"GetUnitAnticreeperDamages","usage":"GetUnitAnticreeperDamages(<-unit)","description":"<p>\nPushes true/false to the stack. True means that the unit takes damages when it is landed and in anticreeper. False means it does not.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitanticreeperdamages","kind":"Function"},{"name":"getunitarmed","displayName":"GetUnitArmed","usage":"GetUnitArmed(<-unit) ->unitArmed","description":"<p>\nPushes the armed status of a unit to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitarmed","kind":"Function"},{"name":"getunitbuildlimit","displayName":"GetUnitBuildLimit","usage":"GetUnitBuildLimit(<-unitType) ->unitBuildLimit","description":"<p>\nReturns the build limit for the specified unit type. If the build limit is unlimited, -1 is returned. The only types that are supported are the built in unit types that the player can build, and custom units. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunittype\" class=\"wikilink1\" title=\"4rpl:commands:getunittype\" data-wiki-id=\"4rpl:commands:getunittype\">GetUnitType</a>. For custom units, specify the CMod GUID for the type.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitbuildlimit","kind":"Function"},{"name":"getunitbuildware","displayName":"GetUnitBuildWare","usage":"GetUnitBuildWare(<-unit) ->unitBuildWare","description":"<p>\nPushes the build ware type of the unit to the stack. 0 = energy, 1 = anticreeper, 2 = arg, 3 = liftic.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitbuildware","kind":"Function"},{"name":"getunitcanbuild","displayName":"GetUnitCanBuild","usage":"GetUnitCanBuild(<-unitType) ->canBuild","description":"<p>\nReturns a boolean indicating if the specified unit can be built. This call controls the visibility of the build buttons in the left build pane. Unit type is a subset of  <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:unit_types\" class=\"wikilink1\" title=\"4rpl:commands:unit_types\" data-wiki-id=\"4rpl:commands:unit_types\">Unit Types</a>  and must be represented on the build pane.\n</p>\n\n<p>\nThe unitType can be one of:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n riftlab\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n factory\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n ernportal\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n tower\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n pylon\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n miner\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n greenarrefinery\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n terp\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n porter\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n cannon\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n mortar\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n sprayer\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n sniper\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n missilelauncher\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n nullifier\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n runway\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n bomberpad\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n acbomberpad\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n rocketpad\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n platform\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n shield\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n microrift\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n beacon\n</div></li>\n</ul>\n\n\n<p>\nAvoid using this call frequently. It is very CPU intensive and should only be declared at the most minimalistic applications. Never use this more than you need to for as infrequent as possible.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitcanbuild","kind":"Function"},{"name":"getunitcandestroy","displayName":"GetUnitCanDestroy","usage":"GetUnitCanDestroy(<-unit) ->canDestroy","description":"<p>\nPushes the &#039;user can destroy&#039; state of the unit to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitcandestroy","kind":"Function"},{"name":"getunitcanmove","displayName":"GetUnitCanMove","usage":"GetUnitCanMove(<-unit) ->canMove","description":"<p>\nGets a boolean indicating if the unit can move (using the normal built in unit movement mechanic).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitcanmove","kind":"Function"},{"name":"getunitcanstun","displayName":"GetUnitCanStun","usage":"GetUnitCanSTun(<-unit) ->canStun","description":"<p>\nGets a boolean indicating if the unit can be stunned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitcanstun","kind":"Function"},{"name":"getunitcell","displayName":"GetUnitCell","usage":"GetUnitCell(<-UID) ->cellZ ->cellX","description":"<p>\nGet the 2D map position of a unit.  Two integer coordinates are returned. The X and Z positions are where on the map the unit is, rounded to the nearest whole coordinate.\nTypically, landed units live exactly on an integer map coordinate.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitcell","kind":"Function"},{"name":"getunitconnectable","displayName":"GetUnitConnectable","usage":"GetUnitConnectable(<-unit)","description":"<p>\nPushes true/false to the stack. True means that the unit will connect to other connectable units (like towers and pylons). False means it will not.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitconnectable","kind":"Function"},{"name":"getunitconnectedtoriftlab","displayName":"GetUnitConnectedToRiftLab","usage":"GetUnitConnectedToRiftLab(<-unit)","description":"<p>\nReturns a boolean indicating if the unit is connected (via the network) to the RiftLab.\n</p>\n\n<p>\nConnections are calculated at the end of the frame update cycle. Attempting to determine a connection before the game has had a chance to calculate connectivity may return <code>false</code> prematurely. This is especially relevant for built-in functions that may execute early (Eg. <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:func_gameloaded\" class=\"wikilink1\" title=\"4rpl:commands:func_gameloaded\" data-wiki-id=\"4rpl:commands:func_gameloaded\">:GameLoaded</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:func_once\" class=\"wikilink1\" title=\"4rpl:commands:func_once\" data-wiki-id=\"4rpl:commands:func_once\">:Once</a>, and <a href=\"/wiki/doku.php?id=4rpl:commands:func_awake\" class=\"wikilink1\" title=\"4rpl:commands:func_awake\" data-wiki-id=\"4rpl:commands:func_awake\">:Awake</a>).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitconnectedtoriftlab","kind":"Function"},{"name":"getunitconstructing","displayName":"GetUnitConstructing","usage":"GetUnitConstructing(<-Unit ) ->isConstructing","description":"<p>\nPushes true to the stack if the unit is in the build state, false otherwise.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitconstructing","kind":"Function"},{"name":"getunitconstructingdata","displayName":"GetUnitConstructingData","usage":"GetUnitConstructingData(<-Unit) ->constructingDataVector","description":"<p>\nPushes a vector to the stack with data related to the constructing state of the specified unit.<br>\n\nThe .0 position in the vector contains the current amount of build resources in the unit.<br>\n\nThe .1 position in the vector contains the max amount of build resources in the unit. When current == max, the unit will be constructed.<br>\n\nThe .2 position in the vector contains the type of resource used to build the unit.<br>\n\nIf the unit is not in the building state, the .0 and .1 values will be -1;\nThese are the resource types:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n 0 = Energy\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 1 = Anticreeper\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 2 = Arg\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 3 = Liftic\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitconstructingdata","kind":"Function"},{"name":"getunitcount","displayName":"GetUnitCount","usage":"GetUnitCount(<-unitType) ->unitCount","description":"<p>\nReturns a count of the number of units of the specified type. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:unit_types\" class=\"wikilink1\" title=\"4rpl:commands:unit_types\" data-wiki-id=\"4rpl:commands:unit_types\">Unit Types</a> for a list of strings.\nThe count includes both built and unbuilt units.\n</p>\n\n<p>\nTake note: This only works for player buildable units such as cannons, towers or airships.  It does not work for anything else (eggs, totems, ultraC, emitters, etc.).  For other things you&#039;d need to use GetUnitsByType and use GetListCount on it.  \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitcount","kind":"Function"},{"name":"getunitcreeperdamages","displayName":"GetUnitCreeperDamages","usage":"GetUnitCreeperDamages(<-unit)","description":"<p>\nPushes true/false to the stack. True means that the unit takes damages when it is landed and in creeper. False means it does not.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitcreeperdamages","kind":"Function"},{"name":"getunitdamagedbyac","displayName":"GetUnitDamagedByAC","usage":"GetUnitDamagedByAC(<-unit) ->damaged","description":"<p>\nGets a boolean indicating if the unit is damaged by AC\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitdamagedbyac","kind":"Function"},{"name":"getunitdamagedbycreeper","displayName":"GetUnitDamagedByCreeper","usage":"GetUnitDamagedByCreeper(<-unit) ->damaged","description":"<p>\nGets a boolean indicating if the unit is damaged by creeper\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitdamagedbycreeper","kind":"Function"},{"name":"getunitdestroyed","displayName":"GetUnitDestroyed","usage":"GetUnitDestroyed(<-unit) ->unitDestroyed","description":"<p>\nPushes the destroyed status of a unit to the stack.\nIf the unit no longer, or never, existed, this call also returns true.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitdestroyed","kind":"Function"},{"name":"getunitdestroyunevenland","displayName":"GetUnitDestroyUnevenLand","usage":"GetUnitDestroyUnevenLand(<-unit) ->destroy","description":"<p>\nGets a boolean indicating if the unit is destroyed on uneven land\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitdestroyunevenland","kind":"Function"},{"name":"getunitenabled","displayName":"GetUnitEnabled","usage":"GetUnitEnabled(<-unit) ->unitEnabled","description":"<p>\nPushes the enabled status of a unit to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitenabled","kind":"Function"},{"name":"getuniternsimulated","displayName":"GetUnitERNSimulated","usage":"GetUnitERNSimulated(<-unit) ->state","description":"<p>\nGets the ERN simulated state for the unit.\n</p>\n\n<p>\nIf state is \n</p>\n<dl>\n<dt class=\"level1\"><span class=\"dt\"> 1, </span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n then the unit will act as if it has an ERN. \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> -1, </span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n then unit will act as if it does not have an ERN, even it is actually does. \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> 0, </span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n<p>\n then there is no override to either ERN state.\n</p>\n</div></dd>\n</dl>\n\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/warning-yellow.png\" class=\"icon smiley\" alt=\":WARNING:\" > This is specifically ERN Simulation. Not actual ERN state. When a ERN is docked to a unit, this <abbr title=\"Application Programming Interface\">API</abbr> will not return 1. Refer to <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getuniternstate\" class=\"wikilink1\" title=\"4rpl:commands:getuniternstate\" data-wiki-id=\"4rpl:commands:getuniternstate\">GetUnitERNState</a> for this situation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getuniternsimulated","kind":"Function"},{"name":"getuniternstate","displayName":"GetUnitERNState","usage":"GetUnitERNState(<-unit) ->hasERN","description":"<p>\nReturns whether or not the unit has an ERN installed.\n</p>\n\n<p>\n<strong>Note:</strong> Do not get mixed up with the <abbr title=\"Application Programming Interface\">API</abbr> <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getuniternsimulated\" class=\"wikilink1\" title=\"4rpl:commands:getuniternsimulated\" data-wiki-id=\"4rpl:commands:getuniternsimulated\">GetUnitERNSimulated</a>. They are completely separate and when an ERN is docked, this <abbr title=\"Application Programming Interface\">API</abbr> will return true while <a href=\"/wiki/doku.php?id=4rpl:commands:getuniternsimulated\" class=\"wikilink1\" title=\"4rpl:commands:getuniternsimulated\" data-wiki-id=\"4rpl:commands:getuniternsimulated\">GetUnitERNSimulated</a> will not based on the ERN being docked alone.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getuniternstate","kind":"Function"},{"name":"getunitfireoffset","displayName":"GetUnitFireOffset","usage":"GetUnitFireOffset(<-unit) ->pos","description":"<p>\nPushes a vector representing the value of the unit&#039;s fire offset to the stack.\nThe fire offset is the position relative to the unit that the unit should produce any projectile or beam from.  It is set in the cpack unit editor.\nTypically, the X and Z values are 0 (the center of the unit) and the Y value specifies a height.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitfireoffset","kind":"Function"},{"name":"getunitfootprintresistscreeperheight","displayName":"GetUnitFootprintResistsCreeperHeight","usage":"GetUnitFootprintResistsCreeperHeight(<-unit)","description":"<p>\nPushes an integer to the stack. Any value greater than 0 means that the unit will create a false terrain that resists the flow of creeper.\nThe implementation is to create a false terrain at the specified height over the footprint (the width and length of the unit).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitfootprintresistscreeperheight","kind":"Function"},{"name":"getunitforward","displayName":"GetUnitForward","usage":"GetUnitForward(<-UID) ->forward","description":"<p>\nGet the &#039;forward&#039; vector of a unit. The forward vector is the direction of a units positive Z axis. For an unrotated unit the forward direction would be\n{0 0 1}.  As a unit rotates the direction of the Z axis can point in any direction. GetUnitForward will return a vector of three floats for the X, Y, and Z direction of that vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitforward","kind":"Function"},{"name":"getunitgrowsmesh","displayName":"GetUnitGrowsMesh","usage":"GetUnitGrowsMesh(<-unit) ->growsMesh","description":"<p>\nReturns if a unit causes mesh to grow when over it.  For instance, the emitter will cause mesh to grow. Custom units (or any unit) can have the GrowsMesh attribute and if so it will cause mesh to grow (turn from gray to blue) when over it.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitgrowsmesh","kind":"Function"},{"name":"getunithealrate","displayName":"GetUnitHealRate","usage":"GetUnitHealRate(<-unit) ->unitHealRate","description":"<p>\nPushes the unit&#039;s heal rate to the stack. The default heal rate is 0.001. This is how much health is recovered per frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunithealrate","kind":"Function"},{"name":"getunithealth","displayName":"GetUnitHealth","usage":"GetUnitHealth(<-unit) ->unitHealth","description":"<p>\nPushes the health of the unit to the stack. A standard health amount is 1.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunithealth","kind":"Function"},{"name":"getunitincreeper","displayName":"GetUnitInCreeper","usage":"GetUnitinCreeper(<-unit) ->inCreeper","description":"<p>\nReturns true of the unit (based on its footprint) is landed and any part is in creeper/anticreeper and the unit is set to take damage from creeper/anticreeper. If the unit is set to take damage from Creeper, then creeper is checked.  If the unit is set to take damage from anticreeper, then anticreeper is checked.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitincreeper","kind":"Function"},{"name":"getunitlosenabled","displayName":"GetUnitLOSEnabled","usage":"GetUnitLOSEnabled(<-unit) ->enabled","description":"<p>\nGets a boolean indicating if the unit has line of sight enabled\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitlosenabled","kind":"Function"},{"name":"getunitmaxammo","displayName":"GetUnitMaxAmmo","usage":"GetUnitMaxAmmo(<-unit) ->maxAmmo","description":"<p>\nPushes the max ammo of the unit to the stack. If max ammo is less than ammo, then ammo is lowered to equal max ammo.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitmaxammo","kind":"Function"},{"name":"getunitmaxhealth","displayName":"GetUnitMaxHealth","usage":"GetUnitMaxHealth(<-unit) ->unitMaxHealth","description":"<p>\nPushes the max health of the unit to the stack. The default value is 1.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitmaxhealth","kind":"Function"},{"name":"getunitmovecell","displayName":"GetUnitMoveCell","usage":"GetUnitMoveCell(<-unit) ->cellZ ->cellX","description":"<p>\nGets the cell coordinates of a unit&#039;s move location. If the unit is not moving, -1,-1 is returned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitmovecell","kind":"Function"},{"name":"getunitoccupiesland","displayName":"GetUnitOccupiesLand","usage":"GetUnitOccupiesLand(<-unit) ->occupies","description":"<p>\nGets a boolean indicating if the unit occupies land (based on its footprint size)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitoccupiesland","kind":"Function"},{"name":"getunitofficialname","displayName":"GetUnitOfficialName","usage":"GetUnitOfficialName(<-unit) ->name","description":"<p>\nReturns the name of the unit as a string.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitofficialname","kind":"Function"},{"name":"getunitorientation","displayName":"GetUnitOrientation","usage":"GetUnitOrientation(<-unit) ->orientation","description":"<p>\nGet the orientation of a unit. The orientation is one of 4 values, 0,1,2,3. These correspond to FORWARD, RIGHT, BACK, LEFT. The default orientation for units is 0, or FORWARD.  Changing the orientation will rotate the unit, in increments of 90 degrees, to face in the given orientation. If the unit occupies the map, the cells occupied by the unit will be updated.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitorientation","kind":"Keyword"},{"name":"getunitpacketrequestrate","displayName":"GetUnitPacketRequestRate","usage":"GetUnitPacketRequestRate(<-unit) ->rate","description":"<p>\nGets the rate at which a unit can request packets. The rate is a number of frames. The normal value is 15 (so 2 packets per second).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitpacketrequestrate","kind":"Function"},{"name":"getunitposition","displayName":"GetUnitPosition","usage":"GetUnitPosition(<-UID) ->pos","description":"<p>\nGet the 3D position of a unit.  A vector is returned.  The X and Z positions are where on the map the unit is, and the Y coordinate\nis the height, or elevation, of the unit.\n</p>\n\n<p>\nNote: If this call is attempted on an non-existing unit, nothing will be put on the stack. \nIn V 2.4, this behavior changes and this <abbr title=\"Application Programming Interface\">API</abbr> will now return V3(0 0 0), similar to other APIs. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitposition","kind":"Function"},{"name":"getunitrange","displayName":"GetUnitRange","usage":"GetUnitRange(<-unit)","description":"<p>\nPushes the value of the unit&#039;s range to the stack.  A range may be used by the unit&#039;s weapon, for line of sight, etc. How the range is used is unit dependent.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitrange","kind":"Function"},{"name":"getunitrangewithmods","displayName":"GetUnitRangeWithMods","usage":"GetUnitRangeWithMods(<-unit)","description":"<p>\nPushes the value of the unit&#039;s range, modified by the ERN range upgrade or the ern portal fire range update, to the stack.  A range may be used by the unit&#039;s weapon, for line of site, etc. How the range is used is unit dependent.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitrangewithmods","kind":"Function"},{"name":"getunitrequestpackets","displayName":"GetUnitRequestPackets","usage":"GetUnitRequestPackets(<-unit) ->requestsPackets","description":"<p>\nGetsa boolean indicating if the unit can requst packets.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitrequestpackets","kind":"Function"},{"name":"getunitrotation","displayName":"GetUnitRotation","usage":"GetUnitRotation(<-UID) ->rotDeg","description":"<p>\nGet the rotation of a unit, in degrees. A vector returned that represents the rotation around the x,y,z axes.\nNote the Y axis is the &#039;vertical&#039; axis relative to the map plane.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitrotation","kind":"Function"},{"name":"getunits","displayName":"GetUnits","usage":"GetUnits(<-unitType <-startPos <-range <-isSquare <-is3D <-requireLOS <-enemyState <-builtState <-imperviousState) ->units","description":"<p>\nReturns list of units in range of a given position. The returned list is sorted so that the first item in the list is the closest.<br>\n\n</p>\n<dl>\n<dt class=\"level1\"><span class=\"dt\"> unitType:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a string indicating the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:unit_types\" class=\"wikilink1\" title=\"4rpl:commands:unit_types\" data-wiki-id=\"4rpl:commands:unit_types\">unit type</a><sup><a href=\"#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup> to return. If empty string (“”), then all units are searched.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> startPos:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a V3 (vector3) indicating the point to search outwards from.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> range:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a floating point number that is the maximum distance from startPos.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> isSquare:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a boolean. It means to check in a square rather than a circle around startPos. For 3D checks, the vertical displacement is also checked (so the range is effectivly a cube rather than a sphere). \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> is3D:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a boolean. It determines if a true 3d distance is used for range, or if only the X and Z components (2D) distance calculation is used.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> requireLOS:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a boolean indicating if terrain line of sight is required.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> enemyState:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n an int (either 0,1,2). 0 = ignore enemy status. 1 = Only find units that are enemies. 2 = Only find units that are not enemies.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> builtState:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n an int (either 0,1,2). 0 = ignore built state. 1 = Only find units that are built. 2 = Only find units that are not built.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> imperviousState:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n an int (either 0,1,2). 0 = ignore impervious state. 1 = Only find units that are not impervious. 2 = Only find units that are impervious. Things like ore deposits are impervious.\n</div></dd>\n</dl>\n\n\n<p>\nFor short range searches refer to the <a href=\"/wiki/doku.php?id=cw4:4rpl_unit_search_analysis\" class=\"wikilink1\" title=\"cw4:4rpl_unit_search_analysis\" data-wiki-id=\"cw4:4rpl_unit_search_analysis\">unit search analysis</a> to see how the different parameters interact with finding units in a short range.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunits","kind":"Function"},{"name":"getunitsbytype","displayName":"GetUnitsByType","usage":"GetUnitsByType(<-unitType <-builtState) ->units","description":"<p>\nReturns a list of units of the specified unitType<sup><a href=\"https://knucklecracker.com#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup> and builtState, ordered<sup><a href=\"#fn__2\" id=\"fnt__2\" class=\"fn_top\">2)</a></sup> from lowest to highest <abbr title=\"Unique Identifier.\">UID</abbr>.\n</p>\n\n<p>\nbuiltState is an int (either 0,1,2). 0 = ignore built state. 1 = Only find units that are built. 2 = Only find units that are not built.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitsbytype","kind":"Function"},{"name":"getunitselectable","displayName":"GetUnitSelectable","usage":"GetUnitSelectable(<-unit) ->isSelectable","description":"<p>\nGets a boolean indicating if the specified unit is selectable\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitselectable","kind":"Function"},{"name":"getunitselected","displayName":"GetUnitSelected","usage":"GetUnitSelected(<-unit) ->isSelected","description":"<p>\nGets a boolean indicating if the specified unit is currently selected by the player\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitselected","kind":"Function"},{"name":"getunitsettings","displayName":"GetUnitSettings","usage":"GetUnitSettings(<-unit) ->unitSettingsTable","description":"<p>\nReturns a table containing the settings for the specified unit. For certain built-in units, like an emitter, the settings are described in the table below. For these units, the settings are case sensitive. For custom units, the values returned are all defined <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:define\" class=\"wikilink1\" title=\"4rpl:commands:define\" data-wiki-id=\"4rpl:commands:define\">Input Variables</a> for all attached scripts. If there are multiple scripts, the Input Variables are merged and duplicates will overwrite each other.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitsettings","kind":"Function"},{"name":"getunitshieldrange","displayName":"GetUnitShieldRange","usage":"GetUnitShieldRange(<-unit) ->range","description":"<p>\nGets the radius of a unit&#039;s shield. Range is an integer in map cell units.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitshieldrange","kind":"Function"},{"name":"getunitsinrange","displayName":"GetUnitsInRange","usage":"GetUnitsInRange(<-startPos <-range <-isSquare <-is3D <-requireLOS <-enemyState <-builtState <-imperviousState) ->units","description":"<p>\nReturns list of units in range of a given position. The returned list is sorted so that the first item in the list is the closest.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > <strong>Note:</strong> The difference between this <abbr title=\"Application Programming Interface\">API</abbr> and <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunits\" class=\"wikilink1\" title=\"4rpl:commands:getunits\" data-wiki-id=\"4rpl:commands:getunits\">GetUnits</a> is that this method performs a search around the specified coordinates for any units that leave a footprint on the map by occupying space. This can be more performant than GetUnits in situations where a smaller area is being searched, but it comes with a downside that it won&#039;t find flying units, <strong>or land units that are currently moving</strong>. Units occupy space as soon as they begin descending at their target location, they do not have to have touched the ground yet. If you need a method to find units regardless of whether or not they are occupying space, use GetUnits. <br>\n\nWhether a custom unit occupies space can be controlled through the <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> Settings: <strong>Settings &gt; Basic &gt; “occupies land”</strong>.\n</p>\n\n<p>\nFor short range searches refer to the <a href=\"/wiki/doku.php?id=cw4:4rpl_unit_search_analysis\" class=\"wikilink1\" title=\"cw4:4rpl_unit_search_analysis\" data-wiki-id=\"cw4:4rpl_unit_search_analysis\">unit search analysis</a> to see how the different parameters interact with finding units in a short range.\n</p>\n<dl>\n<dt class=\"level1\"><span class=\"dt\"> startPos:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a <a href=\"/wiki/doku.php?id=4rpl:commands:v3\" class=\"wikilink1\" title=\"4rpl:commands:v3\" data-wiki-id=\"4rpl:commands:v3\">V3</a> (vector3) indicating the point to search outwards from.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> range:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a floating point number that is the maximum distance from startPos.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> isSquare:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a boolean. It means to check in a square rather than a circle around startPos. For 3D checks, the vertical displacement is also checked (so the range is effectivly a cube rather than a sphere). <sup><a href=\"#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup> \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> is3D:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a boolean. It determines if a true 3d distance is used for range, or if only the X and Z components (2D) distance calculation is used.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> requireLOS:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n a boolean indicating if terrain line of sight is required. \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> enemyState:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n an int (either 0,1,2). \n</div><dl>\n<dt class=\"level2\"><span class=\"dt\"> 0 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n ignore enemy status. \n</div></dd>\n<dt class=\"level2\"><span class=\"dt\"> 1 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n Only find units that are enemies. \n</div></dd>\n<dt class=\"level2\"><span class=\"dt\"> 2 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n Only find units that are not enemies. \n</div></dd>\n</dl>\n</dd>\n<dt class=\"level1\"><span class=\"dt\"> builtState:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n an int (either 0,1,2). \n</div><dl>\n<dt class=\"level2\"><span class=\"dt\"> 0 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n ignore built state. \n</div></dd>\n<dt class=\"level2\"><span class=\"dt\"> 1 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n Only find units that are built. \n</div></dd>\n<dt class=\"level2\"><span class=\"dt\"> 2 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n Only find units that are not built. \n</div></dd>\n</dl>\n</dd>\n<dt class=\"level1\"><span class=\"dt\"> imperviousState:</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n an int (either 0,1,2). \n</div><dl>\n<dt class=\"level2\"><span class=\"dt\"> 0 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n ignore impervious state. \n</div></dd>\n<dt class=\"level2\"><span class=\"dt\"> 1 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n Only find units that are not impervious. \n</div></dd>\n<dt class=\"level2\"><span class=\"dt\"> 2 = </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n Only find units that are impervious. Things like ore deposits are impervious.\n</div></dd>\n</dl>\n</dd>\n</dl>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitsinrange","kind":"Function"},{"name":"getunitspecialtarget","displayName":"GetUnitSpecialTarget","usage":"GetUnitSpecialTarget(<-unit) ->specialTargetVal","description":"<p>\nGets a V4 representing the current special target status of the unit. The V4 that is returned tells which target types the unit is tagged as. A value of 0 or 1 will be in each field of the V4. A value of 1 in a field means the unit is targeted by that type of weapon. <br>\n\ntargetVal.0 : Snipers will target <br>\n\ntargetVal.1 : Missiles will target <br>\n\ntargetVal.2 : Custom0 will target <br>\n\ntargetVal.3 : Custom1 will target <br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitspecialtarget","kind":"Function"},{"name":"getunitspecifiedtarget","displayName":"GetUnitSpecifiedTarget","usage":"GetUnitSpecifiedTarget(<-Unit) ->pos","description":"<p>\nPushes a unit&#039;s specified target to the stack. The specified target is a map cell location that is set either by the player or by script.\nIt typically shows up for units that allow a specified target to be set in their <abbr title=\"Custom Package. Custom unit/scripts package.\">CPACK</abbr> settings. When a unit allows this, it will show a target icon that follows\nthe mouse when selected.  The specified target is good for units that like to allow a player to specify where they should fire.\nIf there is no specified target, then -1,0,-1 is pushed to the stack.\nThe returned value is a vector consisting of three coordinates.  The map position is in the X and Z locations.  The Y value of the vector represents the terrain height at that map location.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitspecifiedtarget","kind":"Function"},{"name":"getunitstuncount","displayName":"GetUnitStunCount","usage":"GetUnitStunCount(<-unitUID)","description":"<p>\nReturns the current stuncount for a unit. A unit that is not stunned will return 0. A value greater than 0 is the number of frames that the unit will remained stunned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitstuncount","kind":"Function"},{"name":"getunitsupplied","displayName":"GetUnitSupplied","usage":"GetUnitSupplied(<-unit) ->unitSupplied","description":"<p>\nPushes the supplied status of a unit to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitsupplied","kind":"Function"},{"name":"getunitsuppresscount","displayName":"GetUnitSuppressCount","usage":"GetUnitSuppressCount(<-unit) ->count","description":"<p>\nReturns the suppress count. The suppress count is set when a nullifier is nullifying a unit. By default a nullifer sets the suppress count to 30 every frame.\nIf a nullifier goes offline, the suppress count is decremented by 1 for each game frame. When the suppress count is not 0, a unit should not operate.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitsuppresscount","kind":"Function"},{"name":"getunitsuppressedmovement","displayName":"GetUnitSuppressedMovement","usage":"GetUnitSuppressedMovement(<-unit)","description":"<p>\nReturns a boolean indicating if the unit&#039;s movement is suppressed. A unit that is normally movable, but has suppressed movement, can not be moved by the player.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitsuppressedmovement","kind":"Keyword"},{"name":"getunittargetoffset","displayName":"GetUnitTargetOffset","usage":"GetUnitTargetOffset(<-unit) ->pos","description":"<p>\nPushes a vector representing the value of the unit&#039;s target offset to the stack.\nThe target offset is the position relative to the unit that the unit should be targeted, or shot at. For instance, if a unit sits on the terrain but has some height, you would want the\ntarget offset to be something like (0,1,0) so that units that shoot at the unit fire into the middle of the unit.\nTypically, the X and Z values are 0 (the center of the unit) and the Y value specifies a height.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunittargetoffset","kind":"Function"},{"name":"getunittrueguid","displayName":"GetUnitTrueGuid","usage":"GetUnitTrueGuid(Self) ->trueGuid","description":"<p>\nReturn the internal globally unique GUID for a unit (a string). True GUIDs are totally unique for all instances of all units across all games forever and forever (or close enough).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunittrueguid","kind":"Function"},{"name":"getunittype","displayName":"GetUnitType","usage":"GetUnitType(<-unitUID)","description":"<p>\nReturns the string type of the unit. For custom units, this is the <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> <abbr title=\"Unique Identifier.\">UID</abbr>. For built in units, it is the string unit type (like “cannon”). In both cases, the string can be passed to <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:createunit\" class=\"wikilink1\" title=\"4rpl:commands:createunit\" data-wiki-id=\"4rpl:commands:createunit\">CreateUnit</a> and other APIs that take units. \n</p>\n\n<p>\nSee <a href=\"/wiki/doku.php?id=4rpl:commands:unit_types\" class=\"wikilink1\" title=\"4rpl:commands:unit_types\" data-wiki-id=\"4rpl:commands:unit_types\">Unit Types</a> for the list of Unit Names for built in units. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunittype","kind":"Function"},{"name":"getunituioptions","displayName":"GetUnitUIOptions","usage":"GetUnitUIOptions(<-unit <-slot) ->optionsList","description":"<p>\nGets the list of options for a given <abbr title=\"User Interface\">UI</abbr> control slot.  Custom units can have <abbr title=\"User Interface\">UI</abbr> configuration widgets. These are configured in the CPack manager.\nEach widget occupies a slot, 0-7. Each widget also has options.\nFor the Label and Button widgets the options are empty.<br>\n\nFor the Flip and Choice widget, the options are the values shown in the control.<br>\n\n<br>\n\nNote that this call only works on custom units.  If used on a built in unit, it will return 0.<br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunituioptions","kind":"Function"},{"name":"getunituistate","displayName":"GetUnitUIState","usage":"GetUnitUIState(<-unit <-slot) ->state","description":"<p>\nGets the integer <abbr title=\"User Interface\">UI</abbr> state for a given <abbr title=\"User Interface\">UI</abbr> control slot.  Custom units can have <abbr title=\"User Interface\">UI</abbr> configuration widgets. These are configured in the CPack manager.\nEach widget occupies a slot, 0-7. Each widget also has a state. For the Label and Button widgets the state is always &#039;0&#039;. For the FlipButton widget, the state is\n0 or 1.  For the Choice widget the state is 0-N based on the number of choice items configured.<br>\n\n<br>\n\nNote that this call only works on custom units.  If used on a built in unit, it will return 0.<br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunituistate","kind":"Function"},{"name":"getunituitext","displayName":"GetUnitUIText","usage":"GetUnitUIText(<-unit <-slot) ->text","description":"<p>\nGets the string <abbr title=\"User Interface\">UI</abbr> text for a given <abbr title=\"User Interface\">UI</abbr> control slot.  Custom units can have <abbr title=\"User Interface\">UI</abbr> configuration widgets. These are configured in the CPack manager.\nEach widget occupies a slot, 0-7. Each widget also has a text..\nFor the Label and Button widgets the text is what is shown on the widget.<br>\n\nFor the Flip and Choice widget, the text is the label and the value is controlled by the state.<br>\n\n<br>\n\nNotes:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n This call only works on custom units.  If used on a built in unit, it will return 0.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n Unless the value is explicitly set using <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunituitext\" class=\"wikilink1\" title=\"4rpl:commands:setunituitext\" data-wiki-id=\"4rpl:commands:setunituitext\">SetUnitUIText</a> a null value will be returned. \n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunituitext","kind":"Function"},{"name":"getunitupdatecount","displayName":"GetUnitUpdateCount","usage":"GetUnitUpdateCount","description":"<p>\nPushes the unit&#039;s update count to the stack. The update count for a unit starts at 0 when the unit is first created. It is incremented once for each frame that the game executes.\nIt does not increment when the game is paused. It only ever goes up through a mission.\nIdeally, it increases at 30 UPS<sup><a href=\"https://knucklecracker.com#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup>.\nWhen used in the console,  GetUnitUpdateCount will also work. It will start at 0 when you first run the script in the console.\n</p>\n\n<p>\n Also refer to <a href=\"/wiki/doku.php?id=4rpl:commands:getgameupdatecount\" class=\"wikilink1\" title=\"4rpl:commands:getgameupdatecount\" data-wiki-id=\"4rpl:commands:getgameupdatecount\">GetGameUpdateCount</a> and <a href=\"/wiki/doku.php?id=4rpl:commands:getgametickcount\" class=\"wikilink1\" title=\"4rpl:commands:getgametickcount\" data-wiki-id=\"4rpl:commands:getgametickcount\">GetGameTickCount</a> for additional timer-based commands.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitupdatecount","kind":"Function"},{"name":"getvoidheight","displayName":"GetVoidHeight","usage":"GetVoidHeight ->voidHeight","description":"<p>\nGets the pseudo terrain height of the void. The default value is 2146. The void height is the height that the creeper sees the void as.\nSo a height of 500 means that creeper at a height of 500 would overflow onto the void.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getvoidheight","kind":"Function"},{"name":"gt","displayName":"gt","usage":"5 gt (4)","description":"<p>\nThe first item on the stack is compared to the second item on the stack. Both items are removed from the stack. If the first item is greater than the second, True (1) is pushed to the stack. If not, False (o) is pushed to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gt","kind":"Function"},{"name":"gt0","displayName":"gt0","usage":"gt0","description":"<p>\nTop item is popped from the stack and compared if greater than 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gt0","kind":"Function"},{"name":"gte","displayName":"gte","usage":"5 gte (5)","description":"<p>\nThe first item on the stack is compared to the second item on the stack. Both items are removed from the stack. If the first item is greater than or equal to the second, True (1) is pushed to the stack. If not, False (o) is pushed to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gte","kind":"Function"},{"name":"gte0","displayName":"gte0","usage":"gte0","description":"<p>\nTop item is popped from the stack and compared if greater than or equal 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:gte0","kind":"Function"},{"name":"halfpi","displayName":"HalfPI","usage":"HALFPI","description":"<p>\nPushes the value of PI/2 to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:halfpi","kind":"Constant"},{"name":"i","displayName":"I","usage":"I","description":"<p>\nCurrent loop index. Pushes the value of the current “do” loop onto the stack. Only use within loops.\n</p>\n\n<p>\nNote that I refers to the innermost loop. As loops are nested, I will continue to reference the innermost of the nested loops.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:i","kind":"Function"},{"name":"if","displayName":"if","usage":"if (<-var1 eq (<-var2))","description":"<p>\nEvaluate the first element on the stack. If True, then execute statements that follow, up to the endif or else statement. If False, execution skips to the first statement following the endif or else statement. Any nonzero value is considered True, a value of zero is False.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:if","kind":"Function"},{"name":"insertlistelement","displayName":"InsertListElement","usage":"InsertListElement(<-list 3 <-value)","description":"<p>\nStores a value at the specified index of a list. The previously stored value, and all subsequent values have their indices shifted up by one.\n</p>\n\n<p>\nNote that insertion beyond the current list size is not supported. Use <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:appendtolist\" class=\"wikilink1\" title=\"4rpl:commands:appendtolist\" data-wiki-id=\"4rpl:commands:appendtolist\">AppendToList</a> or <a href=\"/wiki/doku.php?id=4rpl:commands:pushlist\" class=\"wikilink1\" title=\"4rpl:commands:pushlist\" data-wiki-id=\"4rpl:commands:pushlist\">Pushlist</a> in that instance. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:insertlistelement","kind":"Function"},{"name":"invocationcount","displayName":"InvocationCount","usage":"InvocationCount","description":"<p>\nPushes the execution count of the script to the stack. The invocation count gets reset at each game load, so it is NOT an absolute counter that always goes up.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:invocationcount","kind":"Function"},{"name":"isadamessageread","displayName":"IsADAMessageRead","usage":"IsADAMessageRead(<-message) ->ADAMessageRead","description":"<p>\nReturns a boolean indicating if the ada message has been read\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isadamessageread","kind":"Function"},{"name":"isadamessageshowing","displayName":"IsADAMessageShowing","usage":"IsADAMessageShowing ->ADAMessageShowing","description":"<p>\nReturns a boolean indicating if the ada message log is open.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isadamessageshowing","kind":"Function"},{"name":"isbeam","displayName":"IsBeam","usage":"IsBeam(<-beamUID)","description":"<p>\nChecks to see if beamUID represents a valid beam.  If the beam has been destroyed or points to something other than a beam, false is returned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isbeam","kind":"Function"},{"name":"isbuildunitselected","displayName":"IsBuildUnitSelected","usage":"IsBuildUnitSelected ->isBuildUnitSelected","description":"<p>\nReturns a boolean indicating if the player currently has a unit selected to build.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isbuildunitselected","kind":"Function"},{"name":"iscreepercutoff","displayName":"IsCreeperCutoff","usage":"IsCreeperCutoff ->cutoff","description":"<p>\nReturns true or false based on if the maps average creeper per cell level is at or above the creeper cutoff level.\nReturns false if the creepercutoff level is at or less than 0.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:iscreepercutoff","kind":"Function"},{"name":"isgamemessageshowing","displayName":"IsGameMessageShowing","usage":"IsGameMessageShowing ->gameMessageShowing","description":"<p>\nReturns a boolean indicating if a game message is currently showing.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isgamemessageshowing","kind":"Function"},{"name":"ismissioncomplete","displayName":"IsMissionComplete","usage":"IsMissionComplete","description":"<p>\nPushes true to the stack if the victory conditions for the mission have been satisfied.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ismissioncomplete","kind":"Function"},{"name":"isnull","displayName":"IsNull","usage":"IsNull (<-something) ->isNull","description":"<pre class=\"code 4rpl\">CreateList <span class=\"re0\">-&gt;emptyList</span>\nPopList<span class=\"br0\">&#40;</span><span class=\"re0\">&lt;-emptyList</span><span class=\"br0\">&#41;</span> <span class=\"re0\">-&gt;nulItem</span>\n<span class=\"kw1\">if</span> <span class=\"br0\">&#40;</span>isNull<span class=\"br0\">&#40;</span><span class=\"re0\">&lt;-nullItem</span><span class=\"br0\">&#41;</span><span class=\"br0\">&#41;</span>\n   trace<span class=\"br0\">&#40;</span><span class=\"st0\">&quot;Null Item&quot;</span><span class=\"br0\">&#41;</span>\n<span class=\"kw1\">endif</span></pre>\n\n<p>\n⇐<a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:start\" class=\"wikilink1\" title=\"4rpl:start\" data-wiki-id=\"4rpl:start\"> Index</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isnull","kind":"Function"},{"name":"isv2inmap","displayName":"IsV2InMap","usage":"IsV2InMap(<-position) ->isInMap","description":"<p>\nReturns true if the x and y elements of the supplied position vector are within the map bounds.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isv2inmap","kind":"Function"},{"name":"isv3inmap","displayName":"IsV3InMap","usage":"IsV3InMap(<-position) ->isInMap","description":"<p>\nReturns true if the x and z elements of the supplied position vector are within the map bounds.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:isv3inmap","kind":"Function"},{"name":"j","displayName":"J","usage":"J","description":"<p>\nFirst outer loop index. When loops are nested, this pushes the value of the first (or only) outer “do” loop onto the stack. Do not use outside nested loops.\n</p>\n\n<p>\nNote: after the inner loop finishes, this value is accessed with I, it being now the innermost loop.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:j","kind":"Function"},{"name":"k","displayName":"K","usage":"K","description":"<p>\nOuter loop index. When “do” loops are nested, this pushes the value of the third-innermost loop onto the stack. Do not use outside of triply-nested loops.\n</p>\n\n<p>\nNote that before the inner loops begin, after they end, or between inner loops, this value may need to be referred to with J or even I.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:k","kind":"Function"},{"name":"lf","displayName":"LF","usage":"LF","description":"<p>\nPushes a line feed to the stack. Useful for printing\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:lf","kind":"Function"},{"name":"list","displayName":"List","usage":"List ->list","description":"<p>\nCreates a list and populates it with the contents of the stack. The entire contents of the stack will be added to a newly created list.\nThe top item on the stack will be the last item in the list.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:list","kind":"Function"},{"name":"listcontains","displayName":"ListContains","usage":"ListContains(<-list <-item) ->contained","description":"<p>\nReturns a bool indicating if the item is contained in the list\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:listcontains","kind":"Function"},{"name":"listn","displayName":"ListN","usage":"ListN(<-N) ->list","description":"<p>\nCreates a list and populates it with N items from the stack.\nThe top item on the stack (after N) will be the last item in the list.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:listn","kind":"Function"},{"name":"ln","displayName":"ln","usage":"LN","description":"<p>\nThe natural logarithm. Gives the magnitude of the number. On zero, returns -inf. Below zero, returns NaN, a special value that always causes failure when compared to other numbers. Eg. (NaN&lt;0) -> false, (Nan&gt;=0) -> false\n</p>\n\n<p>\nother logarithms\n</p>\n<div class=\"wrap_indent wrap__dark plugin_wrap\">\n<p>\nln(x) = log(x, e) <br>\n\nln(x)/ln(10) = log10(x) <br>\n\nln(2)=0.6931… <br>\n\nln(e)=.999999 <br>\n\nln(10)=2.3026… \n</p>\n</div>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ln","kind":"Function"},{"name":"log","displayName":"log","usage":"log","description":"<p>\nAllows the performance of arbitrary based logarithms. See examples. On zero, returns -inf. Below zero, returns NaN, a special value that always causes failure when compared to other numbers. Eg. (NaN&lt;0) -> false, (Nan&gt;=0) -> false\n</p>\n\n<p>\nother logarithms \n</p>\n<div class=\"wrap_indent wrap__dark plugin_wrap\">\n<p>\nlog(x,10) = log10(x) <br>\n\nlog(x,e) = ln(x)\n</p>\n</div>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:log","kind":"Function"},{"name":"log10","displayName":"log10","usage":"LOG10","description":"<p>\nThe base ten logarithm. Gives the number of digits in the number before the decimal point. On zero, returns -inf. Below zero, returns NaN, a special value that always causes failure when compared to other numbers. Eg. (NaN&lt;0) -> false, (Nan&gt;=0) -> false\n</p>\n\n<p>\nother logarithms:\n</p>\n<div class=\"wrap_indent wrap__dark plugin_wrap\">\n<p>\nlog10(x) = log(x, 10) <br>\n\nlog10(x)/log10(e) = ln(x) <br>\n\nlog10(2)=0.3010-<em>ish</em> <br>\n\nlog10(e)=0.4343-<em>ish</em> <br>\n\nlog10(10)=1 <br>\n\n</p>\n</div>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:log10","kind":"Function"},{"name":"loop","displayName":"loop","usage":"loop","description":"<p>\nTerminates the ‘do’ instruction loop . Control flow will return to the ‘do’ instruction until the Index is equal to the Limit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:loop","kind":"Function"},{"name":"lt","displayName":"lt","usage":"LT","description":"<p>\nFirst item on the stack is compared to the second item on the stack.<br>\n\n0 (fasle) or 1 (true) is pushed to the stack depending on whether the first value was less than the second or not.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:lt","kind":"Function"},{"name":"lt0","displayName":"lt0","usage":"lt0","description":"<p>\nTop item is popped from the stack and compared if less than 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:lt0","kind":"Function"},{"name":"lte","displayName":"lte","usage":"LTE","description":"<p>\nFirst item on the stack is compared to the second item on the stack.<br>\n\n0 (fasle) or 1 (true) is pushed to the stack depending on whether the first value was less or equal to the second or not. ## Examples\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>\n<pre class=\"code 4rpl\"><span class=\"kw1\">if</span> <span class=\"br0\">&#40;</span><span class=\"nu0\">1</span> <span class=\"kw3\">lte</span> <span class=\"br0\">&#40;</span><span class=\"nu0\">1</span><span class=\"br0\">&#41;</span><span class=\"br0\">&#41;</span>\n    trace<span class=\"br0\">&#40;</span><span class=\"st0\">&quot;1 is less than or equal to 1&quot;</span><span class=\"br0\">&#41;</span>\n<span class=\"kw1\">endif</span></pre>\n\n<p>\n⇐<a href=\"/wiki/doku.php?id=4rpl:start\" class=\"wikilink1\" title=\"4rpl:start\" data-wiki-id=\"4rpl:start\"> Index</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:lte","kind":"Function"},{"name":"lte0","displayName":"lte0","usage":"lte0","description":"<p>\nTop item is popped from the stack and compared if less than or equal 0. 0 (false) or 1 (true) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:lte0","kind":"Function"},{"name":"magnitude","displayName":"Magnitude","usage":"Magnitude(<-vector) ->length","description":"<p>\nReturns the length of the specified vector\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:magnitude","kind":"Function"},{"name":"max","displayName":"max","usage":"max(<-number1 <-number2)","description":"<p>\nPush the greater of two arguments to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:max","kind":"Function"},{"name":"min","displayName":"min","usage":"MIN","description":"<p>\nPush the smaller of two arguments to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:min","kind":"Function"},{"name":"mod","displayName":"mod","usage":"<-a <-b mod ->result","description":"<p>\nPerform integer division and returns the value (modulo) of the difference.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:mod","kind":"Function"},{"name":"mod2","displayName":"mod2","usage":"<-a <-b mod2 ->result","description":"<p>\nPerform integer division and returns the value (modulo) of the difference. <br>\n\nWorks differently with negative numbers than <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:mod\" class=\"wikilink1\" title=\"4rpl:commands:mod\" data-wiki-id=\"4rpl:commands:mod\">mod</a>, if the result of the modulo operation is negative, the divisor will be added to the result.<br>\n\nPerforms this calculation: <code>result = a % b; if (result &lt; 0) result += b;</code> <br>\n\n</p>\n\n<p>\nWhen using a positive number as divisor, mod2 is useful for &#039;wrapping&#039; a value between 0 and the divisor.<br>\n\nFor example: -50 mod(360) will normally return -50, but using mod2 it will return 310.\n</p>\n\n<p>\nIf the divisor is a negative number and the result of the normal modulo operation is too, then the divisor still gets added. <br>\n\nThis means -50 mod2(-360) will return -410 rather than -50\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:mod2","kind":"Function"},{"name":"movetowards","displayName":"MoveTowards","usage":"MoveTowards(<-current <-target <-maxDistance) ->result","description":"<p>\nCalculate a position between the points specified by current and target, moving no farther than the distance specified by maxDistance.\nCurrent, target are treated as vector3.  MaxDistance is a float. Result is a vector3.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:movetowards","kind":"Function"},{"name":"movetowardsandavoid","displayName":"MoveTowardsAndAvoid","usage":"MoveTowardsAndAvoid(<-start <-target <-delta <-minHeight <-checkRange <-checkCreeper <-checkAC <-checkPseudoTerrain) ->pos","description":"<p>\nTakes a starting 3D position (a 3-vector) and generates a new 3D position that is moved towards the target (also a 3-vector). The resulting point will not be displaced more than the delta argument.\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n The minHeight argument restricts how close, height wise, the resulting point can be to the terrain and/or creeper.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The checkRange argument is an integer that specifies how many cells outward to inspect when enforcing the minHeight.  A value of 0 means to only check the map cell that the target is currently within on.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The checkCreeper argument is a Boolean indicating whether to look at creeper for enforcing the minHeight.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The checkAC argument is a Boolean indicating whether to look at anticreeper for enforcing the minHeight.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The checkPseudoTerrain argument is a Boolean indicating whether to look at invisible pseudo terrain (like a shield creates) for enforcing the minHeight.\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:movetowardsandavoid","kind":"Function"},{"name":"movetowardscellandavoid","displayName":"MoveTowardsCellAndAvoid","usage":"MoveTowardsCellAndAvoid(<-start <-targetCellX  <-targetcellZ <-delta <-minHeight <-checkRange <-checkCreeper <-checkAC <-checkPseudoTerrain) ->pos","description":"<p>\nTakes a starting 3D position (a 3-vector) and generates a new 3D position using two variables for the X and Z coordinates that can be used by <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitposition\" class=\"wikilink1\" title=\"4rpl:commands:setunitposition\" data-wiki-id=\"4rpl:commands:setunitposition\">SetUnitPosition</a> to move towards the target location. The resulting point will not be displaced more than the delta argument.\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n The minHeight argument restricts how close, height wise, the resulting point can be to the terrain and/or creeper.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The checkRange argument is an integer that specifies how many cells outward to inspect when enforcing the minHeight. A value of 0 means to only check the map cell that the unit is currently occupying.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The checkCreeper argument is a Boolean indicating whether to look at creeper for enforcing the minHeight.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The checkAC argument is a Boolean indicating whether to look at anticreeper for enforcing the minHeight.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n The checkPseudoTerrain argument is a Boolean indicating whether to look at invisible pseudo terrain (like from shields) for enforcing the minHeight.\n</div></li>\n</ul>\n\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" ><br>\n\nTo clarify, the only difference in this <abbr title=\"Application Programming Interface\">API</abbr> and <a href=\"/wiki/doku.php?id=4rpl:commands:movetowardsandavoid\" class=\"wikilink1\" title=\"4rpl:commands:movetowardsandavoid\" data-wiki-id=\"4rpl:commands:movetowardsandavoid\">MoveTowardsAndAvoid</a> is that you can independently specify an X coordinate variable and an Z coordinate variable while not needing a Y coordinate variable. The generated next position will not be limited to the X and Z axis unlike how other TowardsCell <abbr title=\"Application Programming Interface\">API</abbr>&#039;s like <a href=\"/wiki/doku.php?id=4rpl:commands:rotateunittowardscell\" class=\"wikilink1\" title=\"4rpl:commands:rotateunittowardscell\" data-wiki-id=\"4rpl:commands:rotateunittowardscell\">RotateUnitTowardsCell</a> tend to behave.<br>\n\nSo be sure to avoid thinking of this <abbr title=\"Application Programming Interface\">API</abbr> as being similar in behavior to the other TowardsCell <abbr title=\"Application Programming Interface\">API</abbr>&#039;s or it will get very confusing very quickly.<br>\n\nIf you came to this <abbr title=\"Application Programming Interface\">API</abbr> thinking it could generate a next position on only the X-Z axis&#039;s, a way to do so is to take the resulting V3 and set the Y-vector to the unit&#039;s Y-position.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:movetowardscellandavoid","kind":"Function"},{"name":"msg_frameadvance","displayName":"MSG_FrameAdvance","usage":"","description":"<p>\n“MSG_FrameAdvance” is a message that is automatically sent every frame of the game. Any listening script can receive this message. Frames happen at up to 60 times per second. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmousedelta\" class=\"wikilink1\" title=\"4rpl:commands:getmousedelta\" data-wiki-id=\"4rpl:commands:getmousedelta\">GetMouseDelta</a> for an example of what this might be good for.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:msg_frameadvance","kind":"Value"},{"name":"msg_postupdate","displayName":"MSG_PostUpdate","usage":"","description":"<p>\n“MSG_PostUpdate” is a message that is automatically sent by the game after all of the units are updated. It is sent even when the game is paused.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:msg_postupdate","kind":"Value"},{"name":"msg_preupdate","displayName":"MSG_PreUpdate","usage":"","description":"<p>\n“MSG_PreUpdate” is a message that is automatically sent by the game before all of the units are updated. It is sent even when the game is paused.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:msg_preupdate","kind":"Value"},{"name":"msg_savegame","displayName":"MSG_SaveGame","usage":"","description":"<p>\n“MSG_SaveGame” is a message that is automatically sent by the game just before the game is saved. This message is sent any time the game is saved (whether the user manually saves the game, or the game saves for some other reason).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:msg_savegame","kind":"Value"},{"name":"mul","displayName":"mul","usage":"<-a <-b mul ->result","description":"<p>\nMultiplies the two arguments together and pushes the result on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:mul","kind":"Function"},{"name":"nearestspecialtarget","displayName":"","usage":"GetNearestSpecialTarget(<-specialTarget <-worldPosition <-range <-includeIsBuilding) ->unit","description":"<p>\nFinds the nearest unit that is tagged as a special target within range (a float) from worldPosition (a vector3). The &#039;specialTarget&#039; argument is a V4 that specifies the target types. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitspecialtarget\" class=\"wikilink1\" title=\"4rpl:commands:getunitspecialtarget\" data-wiki-id=\"4rpl:commands:getunitspecialtarget\">GetUnitSpecialTarget</a>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:nearestspecialtarget","kind":"Function"},{"name":"neg","displayName":"neg","usage":"NEG","description":"<p>\nCalculates the negative value of the item and pushes the result on the stack. The result is effectively the same as multiplying the original number by -1.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > From V 1.9, NEG will also operate against a Vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:neg","kind":"Function"},{"name":"neq","displayName":"neq","usage":"NEQ","description":"<p>\nTop two items are popped from the stack and compared for equality. 0 or 1 is pushed back to the stack where 0 indicates false and 1 indicates true.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:neq","kind":"Function"},{"name":"neq0","displayName":"neq0","usage":"NEQ0","description":"<p>\nfirst item on the stack is compared to zero. If zero, true (1) is pushed on the stack, otherwise false (0) is pushed back to the stack.\n</p>\n\n<p>\nNote: See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:data_types\" class=\"wikilink1\" title=\"4rpl:data_types\" data-wiki-id=\"4rpl:data_types\">Data Types</a> for comparison between dissimilar types and type conversion. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:neq0","kind":"Function"},{"name":"normalize","displayName":"Normalize","usage":"Normalize(<-vector) ->normVector","description":"<p>\nNormalizes a vector. To normalize a vector is to take a vector of any length and, keeping it pointing in the same direction, change its length to 1, turning it into what is called a unit vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:normalize","kind":"Function"},{"name":"not","displayName":"not","usage":"NOT","description":"<p>\nTreats first item on the stack as a boolean value (true/false (1/0) , ‘nots’ it, and pushes 0 or 1 back to the stack. If the item is TRUE, 0 is pushed to the stack. If the item is FALSE, 1 is pushed to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:not","kind":"Function"},{"name":"notpersist","displayName":"NotPersist","usage":"NotPersist(“var_name”)","description":"<p>\nBy default, variables persist across saves. Using this command makes them not persist across saves.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:notpersist","kind":"Function"},{"name":"null","displayName":"NULL","usage":"NULL ->thisIsNull","description":"<p>\nPushes an &#039;empty&#039; data item to the stack. The item has an internal type of &#039;null&#039;.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:null","kind":"Constant"},{"name":"once","displayName":"once","usage":"ONCE","description":"<p>\nStart a block of instructions that are executed once only for the lifetime of the entity the script is associated with.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:once","kind":"Function"},{"name":"or","displayName":"or","usage":"OR","description":"<p>\nPops two items from the stack, treats them as boolean values, ‘ors’ them, and pushes 0 or 1 back to the stack. If one or both items evaluate to True, it returns TRUE (1) to the stack. If both items evaluate to FALSE, FALSE (0) is returned to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:or","kind":"Function"},{"name":"pi","displayName":"PI","usage":"PI","description":"<p>\nPushes the value of PI (3.14159265…) to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:pi","kind":"Constant"},{"name":"playsound","displayName":"PlaySound","usage":"PlaySound(<-soundName <-volume)","description":"<p>\nPlays a sound.  The volume ranges from 0 to 1. Valid sound names can be found in <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sounds\" class=\"wikilink1\" title=\"4rpl:commands:sounds\" data-wiki-id=\"4rpl:commands:sounds\">Sound Names</a>:<br>\n\nNote that nearly all sounds will play at the world position 0,0,0.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:playsound","kind":"Function"},{"name":"playsoundatposition","displayName":"PlaySoundAtPosition","usage":"PlaySoundAtPosition(<-soundName <-volume <-pos)","description":"<p>\nPlays a sound at the specified vector position in world coordinates.  The volume ranges from 0.0 to 5.0.<br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sounds\" class=\"wikilink1\" title=\"4rpl:commands:sounds\" data-wiki-id=\"4rpl:commands:sounds\">Sounds</a> for a list of sounds.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:playsoundatposition","kind":"Function"},{"name":"playsoundloop","displayName":"PlaySoundLoop","usage":"PlaySoundLoop(<-soundName <-volume <-unit)","description":"<p>\nPlays a sound loop and attaches to the specified unit.  The volume ranges from 0 to 1.\nThe sound will play based on the location of the unit (if the unit moves the sound moves with it).\nThe loop will autoterminate if the unit is destroyed.<br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sounds\" class=\"wikilink1\" title=\"4rpl:commands:sounds\" data-wiki-id=\"4rpl:commands:sounds\">Sounds</a> for a list of sounds.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:playsoundloop","kind":"Function"},{"name":"pop","displayName":"pop","usage":"POP","description":"<p>\nRemoves the item at the top of the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:pop","kind":"Function"},{"name":"poplist","displayName":"PopList","usage":"PopList(<-list)","description":"<p>\nPops an item from the end of a list. Popping will remove the list item from the list and place it on the stack.\nIf the list is empty, an null item is added to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:poplist","kind":"Function"},{"name":"pow","displayName":"pow","usage":"pow(<-number <-power) ->result","description":"<p>\nPops two arguments from the stack and raises the first to the second and pushes the result to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:pow","kind":"Function"},{"name":"prependstacktolist","displayName":"PrependStackToList","usage":"PrependStackToList (“Hello” “Creeper” “World” <-list)","description":"<p>\nInserts the contents of the stack at the beginning of L1 (at index 0) and shifts the index of all other elements in the list up by the number of elements on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:prependstacktolist","kind":"Function"},{"name":"prependtolist","displayName":"PrependToList","usage":"PrependToList ( <-list item)","description":"<p>\nAdds a value to the beginning of a list. Any values previously stored in the list are shifted up by one.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:prependtolist","kind":"Function"},{"name":"print","displayName":"Print","usage":"PRINT (“Hello World”)","description":"<p>\nTakes one item from the stack and writes it on a new line in a file called RPL.txt in the game’s root content folder, preceded by the identifying information that indicates which unit or component called the PRINT function. Note that this file is truncated (cleared) each time a map is loaded.\n</p>\n\n<p>\nTo avoid having to constantly re-open the RPL.txt file to refresh it, a Windows Powershell commad (or Linus shell command) can be written to monitor the file and show new output.\n</p>\n\n<p>\nEg. Create a file in the game’s root directory named ShowRPL.PS1. Put this single line in the file\n</p>\n<pre class=\"code\">Get-Content RPL.txt -wait</pre>\n\n<p>\nNow, in the context menu for the file, click on “Run with PowerShell”.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:print","kind":"Function"},{"name":"print2","displayName":"Print2","usage":"PRINT2 (“Hello” “World”)","description":"<p>\nPrints 2 values from the stack into the rpl.txt output file.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:print2","kind":"Function"},{"name":"print3","displayName":"Print3","usage":"PRINT3 (“Hello” “World” “ Again”)","description":"<p>\nPrints 3 values from the stack into the rpl.txt output file.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:print3","kind":"Function"},{"name":"print4","displayName":"Print4","usage":"PRINT4 (“Oh” “Hello” “World” “ Again”)","description":"<p>\nPrints 4 values from the stack into the rpl.txt output file.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:print4","kind":"Function"},{"name":"print5","displayName":"Print5","usage":"PRINT5 (“not” “another” “Hello” “world” “example”)","description":"<p>\nPrints 5 values from the stack into the rpl.txt output file.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:print5","kind":"Function"},{"name":"printall","displayName":"PrintAll","usage":"PRINTALL","description":"<p>\nRemoves all values from the stack and prints them in the RPL.txt file The values will be on a single line and <strong>not</strong> separated by a space when printed.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:printall","kind":"Function"},{"name":"printallsp","displayName":"PrintAllSp","usage":"PrintAllSp","description":"<p>\nRemoves all values from the stack and prints them into the RPL.txt file The values will be on a single line and <strong>will</strong> be separated by a space when printed.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:printallsp","kind":"Function"},{"name":"printstack","displayName":"PrintStack","usage":"PrintStack","description":"<p>\nPrints all the values from the stack to the RPL.txt file without removing them. The top and bottom of the stack will be identified, and the data type of each item will be provided.\n</p>\n\n<p>\nNote ## Examples\n</p>\n<pre class=\"code 4rpl\">PrintStack <span class=\"br0\">&#40;</span><span class=\"st0\">&quot;cat&quot;</span> <span class=\"st0\">&quot;dog&quot;</span> <span class=\"st0\">&quot;rat&quot;</span> <span class=\"st0\">&quot;mouse&quot;</span> <span class=\"st0\">&quot;flea&quot;</span> <span class=\"st0\">&quot;tick&quot;</span> <span class=\"st0\">&quot;worm&quot;</span> <span class=\"st0\">&quot;caterpillar&quot;</span> <span class=\"br0\">&#41;</span></pre>\n\n<p>\n⇐<a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:start\" class=\"wikilink1\" title=\"4rpl:start\" data-wiki-id=\"4rpl:start\"> Index</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:printstack","kind":"Function"},{"name":"pushlist","displayName":"PushList","usage":"PushList( <-list <-var)","description":"<p>\nAdds a value to the end of a list. Same as <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:appendtolist\" class=\"wikilink1\" title=\"4rpl:commands:appendtolist\" data-wiki-id=\"4rpl:commands:appendtolist\">AppendToList</a>. Convenience routine when treating a list as a stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:pushlist","kind":"Function"},{"name":"quarterpi","displayName":"QuarterPI","usage":"QuarterPI","description":"<p>\nPushes the value of PI/4 to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:quarterpi","kind":"Constant"},{"name":"rad2deg","displayName":"Rad2Deg","usage":"Rad2Deg","description":"<p>\nPushes the constant to use in converting radians to degrees onto the stack. Multiply this value with a value expressed in radians to obtain degrees.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rad2deg","kind":"Constant"},{"name":"randfloat","displayName":"RandFloat","usage":"randfloat ->rand","description":"<p>\nGives a random floating-point number between 0 and 1\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:randfloat","kind":"Function"},{"name":"randint","displayName":"RandInt","usage":"randInt(<-first <-second) ->randi","description":"<p>\nReturns a random integer from a range of two numbers inclusive of the first number, but exclusive of the second number. A workaround for between 0 and 10 both inclusive is in the example below. It is to do 0 11 RandInt, so 11 will exclude but 10 will include [basically, 0 10 1 add RandInt]\n</p>\n\n<p>\nGeneral convention would be having the first number be lower, but it does also work in reverse, but the second number stays as the exclusive one.  I.e. RandInt (1 -1) can return 1 or 0.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:randint","kind":"Function"},{"name":"rastercolor","displayName":"RasterColor","usage":"RasterColor(<-color)","description":"<p>\nSets the default color for SetRasterC. This setting is associated with the raster itself.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rastercolor","kind":"Function"},{"name":"refcall","displayName":"refcall","usage":"refcall","description":"<p>\nTakes a string from the stack and invokes a function of that name. Note that the string is case insensitive.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:refcall","kind":"Function"},{"name":"refreshunitloscache","displayName":"RefreshUnitLosCache","usage":"RefreshUnitLosCache(<-unit)","description":"<p>\nCauses the unit to perform line of sight calculations based on the LOS settings. The results are stored and used by <abbr title=\"Application Programming Interface\">API</abbr>&#039;s like <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:findunitenemy\" class=\"wikilink1\" title=\"4rpl:commands:findunitenemy\" data-wiki-id=\"4rpl:commands:findunitenemy\">FindUnitEnemy</a>. The LOS cache should be updated when the unit is moved, but not more frequently than absolutely necessary due to it&#039;s high performance cost.\n</p>\n<hr>\n\n<p>\nThe range of the unit is also a major factor in the performance intensity of calling this <abbr title=\"Application Programming Interface\">API</abbr>. It is highly discouraged to use this <abbr title=\"Application Programming Interface\">API</abbr> for any unit with a range larger than 100. If you however still do, the best way to deal with the performance intensity is to have each unit call RefreshUnitLosCache at a slightly different frame from each other to prevent major stutters and make the performance impact unnoticeable.\n</p>\n\n<p>\nFor additional reference, do not use this <abbr title=\"Application Programming Interface\">API</abbr> for a unit with a range more than 200. Any much higher and this <abbr title=\"Application Programming Interface\">API</abbr> on it&#039;s own even when called by a single unit has enough performance impact to cause a noticeable stutter. Besides, you should only really need a max of 200 range for any moving unit if it can go off map, even less if it can&#039;t. 300 range should be map-sized most of the time too and best suited for units like the Bertha which don&#039;t need this <abbr title=\"Application Programming Interface\">API</abbr> due to being stationary and having indirect line of sight, being mortar like, or other such units which use <a href=\"/wiki/doku.php?id=4rpl:commands:getmaxcreepercell\" class=\"wikilink1\" title=\"4rpl:commands:getmaxcreepercell\" data-wiki-id=\"4rpl:commands:getmaxcreepercell\">GetMaxCreeperCell</a> or <a href=\"/wiki/doku.php?id=4rpl:commands:getmaxcreepercellwithdamage\" class=\"wikilink1\" title=\"4rpl:commands:getmaxcreepercellwithdamage\" data-wiki-id=\"4rpl:commands:getmaxcreepercellwithdamage\">GetMaxCreeperCellWithDamage</a> instead of this far more expensive <abbr title=\"Application Programming Interface\">API</abbr>. \n</p>\n\n<p>\nIn fact, when using <a href=\"/wiki/doku.php?id=4rpl:commands:getmaxcreepercell\" class=\"wikilink1\" title=\"4rpl:commands:getmaxcreepercell\" data-wiki-id=\"4rpl:commands:getmaxcreepercell\">GetMaxCreeperCell</a> but you still want line-of-sight as a factor for a non-mortar-like unit, you can use the <abbr title=\"Application Programming Interface\">API</abbr> <a href=\"/wiki/doku.php?id=4rpl:commands:getterrainlos\" class=\"wikilink1\" title=\"4rpl:commands:getterrainlos\" data-wiki-id=\"4rpl:commands:getterrainlos\">GetTerrainLOS</a> but the unit will only target a specific location so you will need to fill in the details on how it reacts to having a blocked line-of-sight.\n</p>\n\n<p>\nThere isn&#039;t much difference between a unit with 200 range and a unit with 300 range for most maps and circumstances anyways. So please consider this when using this <abbr title=\"Application Programming Interface\">API</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:refreshunitloscache","kind":"Function"},{"name":"registerformsg","displayName":"RegisterForMSG","usage":"RegisterForMSG(<-channel <-callbackFunction)","description":"<p>\nRegisters a script to receive callbacks whenever somethings sends a message to &#039;channel&#039;. \nThe channel is just a string.\n</p>\n\n<p>\nCallbacks are made at the time sending happens. Note that some callbacks can be made from system objects, like the InfoCache.\nThe callback is made to the function specified by &#039;callbackFunction&#039;. It is not case sensitive. A var named “_DATA” will be set before the function\nis invoked on the script. That var can have any type, it depends what type the sender sent.<br>\n\n</p>\n\n<p>\nMessages are registered by channel. So if you call RegisterForMSG more than once with the same channel, but different callbackFunctions, only one registration is performed.  Subsequent calls to register on the same channel will replace any previous registrations. Multiple scripts can register to a single channel, but a single script can only have one registration for a particular channel at one time.    \n</p>\n\n<p>\nRegisterForMSG is persistent, so you only need to call it once.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:registerformsg","kind":"Function"},{"name":"registerscript","displayName":"RegisterScript","usage":"RegisterScript(<-name)","description":"<p>\nRegisters the current script instance with a name. This name can be used with <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getregisteredscriptvar\" class=\"wikilink1\" title=\"4rpl:commands:getregisteredscriptvar\" data-wiki-id=\"4rpl:commands:getregisteredscriptvar\">GetRegisteredScriptVar</a>. If the same name is used as another script instance, this call will deregister the other script instance and replace it with the new one. A script on a unit is a unique instance. Each global script instance is also unique. \n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > Note that registering a script is NOT persistent. It will not be saved in a save game file. You must reregister a script.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:registerscript","kind":"Function"},{"name":"registerscriptvar","displayName":"","usage":"RegisterScript(<-name)","description":"<p>\nRegisters the current script instance with a name. This name can be used with <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getregisteredscriptvar\" class=\"wikilink1\" title=\"4rpl:commands:getregisteredscriptvar\" data-wiki-id=\"4rpl:commands:getregisteredscriptvar\">GetRegisteredScriptVar</a>. If the same name is used as another script instance, this call will deregister the other script instance and replace it with the new one. A script on a unit in a unique instance. Each global script instance is also unique. Note that registering a script is NOT persistent. It will not be saved in a save game file. You must reregister a script.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:registerscriptvar","kind":"Function"},{"name":"removeaswareholder","displayName":"RemoveAsWareHolder","usage":"RemoveAsWareHolder(<-unit <-wareType)","description":"<p>\nUnsets this unit as having a ware available to dispatch.\nThese are the ware types:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n 1 = Anticreeper\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 2 = Arg\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 3 = Liftic\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 4 = Bluite\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 5 = Redon\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n 6 = Greenar\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:removeaswareholder","kind":"Function"},{"name":"removelistelement","displayName":"RemoveListElement","usage":"RemoveListElement(<-list, <-element)","description":"<p>\nRemoves an element from a list at a given position. Position are indexed from 0.\n</p>\n\n<p>\nElements after the removed one will be shifted towards the start of the list.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:removelistelement","kind":"Function"},{"name":"removetableelement","displayName":"RemoveTableElement","usage":"RemoveTableElement(<-table <-key)","description":"<p>\nRemoves an element from a table. Note that keys are case sensitive strings.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:removetableelement","kind":"Function"},{"name":"removeunitdamagemap","displayName":"RemoveUnitDamageMap","usage":"RemoveUnitDamageMap(<-unit)","description":"<p>\nRemoves any and all damage map data associated with a unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:removeunitdamagemap","kind":"Function"},{"name":"removewhitespace","displayName":"RemoveWhiteSpace","usage":"RemoveWhiteSpace (<-inputString) ->newString","description":"<p>\nRemoves whitespace from the specified string and returns a new string sans whitespace. Line feed, carriage returns, tabs, spaces all count as whitespace.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:removewhitespace","kind":"Function"},{"name":"repeat","displayName":"repeat","usage":"Repeat","description":"<p>\nPart of the “while: loop construct. Pops an item from the stack. If true, execute the following statements. If false, jump to the statement following ‘endwhile’.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:repeat","kind":"Function"},{"name":"resetcamera","displayName":"ResetCamera","usage":"ResetCamera(<-instantly)","description":"<p>\nSame as when the player pressed the reset camera button. Move the camera to the default position\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:resetcamera","kind":"Function"},{"name":"return","displayName":"return","usage":"return","description":"<p>\nStops execution of a function call and returns immediately. If called from some place other than a function, it will stop the script execution and ‘return’ immediately. Useful for aborting function execution or script execution when necessary.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:return","kind":"Function"},{"name":"reverselist","displayName":"ReverseList","usage":"ReverseList(<-list) ->reversedList","description":"<p>\nTakes a list from the stack, makes a deep copy, reverses its contents, then pushes the new list back to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:reverselist","kind":"Function"},{"name":"rotateobj","displayName":"RotateObj","usage":"RotateObj(<-unit <-obj <-rot <-maxDegrees)","description":"<p>\nRotates an obj no more than maxDegrees towards the angles (in degrees) specified by the rot vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rotateobj","kind":"Function"},{"name":"rotateobjtowards","displayName":"RotateObjTowards","usage":"RotateObjTowards(<-UID “ObjName” <-pos <-maxRotationDeg)","description":"<p>\nRotates an obj so that its forward, or positive Z axis, points towards the supplied vector position. The vector pos (X,Y,Z coordinates) are a position in 3D space.\nThe max rotation can be limited by supplying a maxRotationDeg in degrees.\nIf a negative value is specified for the maxRotationDeg, the rotation will move away from rather than towards the specified target location.\nThe rotation of the obj is in world space, not unit local space.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rotateobjtowards","kind":"Function"},{"name":"rotateobjtowardscell","displayName":"RotateObjTowardsCell","usage":"RotateObjTowardsCell(<-UID “ObjName” <-posX  <-posZ <-maxRotationDeg)","description":"<p>\nRotates an object so that its forward, or positive Z axis, points towards the supplied position, but with rotation confined to the plane of the map (the XZ plane).\nThe X, Z coordinates are a position in the plane of the map.\nThe max rotation can be limited by supplying a maxRotationDeg in degrees.\nIf a negative value is specified for the maxRotationDeg, the rotation will move away from rather than towards the specified target location.\nThe rotation of the obj is in world space, not unit local space.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" > The X &amp; Z axis rotation will always be set to 0 when using this <abbr title=\"Application Programming Interface\">API</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rotateobjtowardscell","kind":"Function"},{"name":"rotatetowards","displayName":"RotateTowards","usage":"RotateTowards(<-startDir <-targetDir <-maxDegrees) ->newDir","description":"<ul>\n<li class=\"level1\"><div class=\"li\">\n <strong>startDir</strong>: The directional vector to start at.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>targetDir</strong>: The directional vector to end up at.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>maxDegrees</strong>: The maximum amount of degrees the start direction will rotate towards the target direction.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>newDir</strong>: The new directional vector (normalized).\n</div></li>\n</ul>\n\n\n<p>\nA directional vector is defined as a line drawn from the origin <code>(0, 0, 0)</code> to a coordinate at the xyz values of the vector. This means 4 dimensional vectors are not supported. The magnitude of the vector (distance from origin to point) is ignored.\n</p>\n\n<p>\nThe <strong>startDir</strong> vector will be rotated round toward the <strong>targetDir</strong> by an angle of <strong>maxDegrees</strong>, although it will land exactly on the target rather than overshoot. If a negative value is used for <strong>maxDegrees</strong>, the vector will rotate away from <strong>targetDir</strong> until it is pointing in exactly the opposite direction, then stops.\n</p>\n\n<p>\nThe resulting vector <strong>newDir</strong> is normalized, meaning its magnitude will always be exactly 1. Inputting <strong>targetDir</strong> <code>(1, 1, 1)</code> and successfully rotating towards it will therefore output <code>(0.5773503, 0.5773503, 0.5773503)</code>, not <code>(1, 1, 1)</code>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rotatetowards","kind":"Function"},{"name":"rotatetowardscell","displayName":"RotateTowardsCell","usage":"RotateTowardsCell(<-sx <-sz <-tx <-tz <-maxDegrees) ->angZ ->angX","description":"<p>\nSimilar to RotatedTowards but operations only in 2 dimensions.\nRotates a start vector (ss, sz) towards a target vector (tx,tz). Will not move more than maxDegrees.  The resulting vector is pushed to the stack as two floats.\nEach vector is treated as a direction rather than a position.\nIf negative maxDegrees is specified, the result is a vector that rotates away from the target vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rotatetowardscell","kind":"Function"},{"name":"rotateunit","displayName":"RotateUnit","usage":"RotateUnit(<-unit <-rot <-maxDegrees)","description":"<p>\nRotates a unit no more than maxDegrees towards the angles (in degrees) specified by the rot vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rotateunit","kind":"Function"},{"name":"rotateunittowards","displayName":"RotateUnitTowards","usage":"RotateUnitTowards(<-UID <-pos <-maxRotationDeg)","description":"<p>\nRotates a unit so that its forward, or positive Z axis, points towards the supplied vector position. The vector pos (X,Y,Z coordinates) are a position in 3D space.\nThe max rotation can be limited by supplying a maxRotationDeg in degrees.\nIf a negative value is specified for the maxRotationDeg, the rotation will move away from rather than towards the specified target location\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rotateunittowards","kind":"Function"},{"name":"rotateunittowardscell","displayName":"RotateUnitTowardsCell","usage":"RotateUnitTowardsCell(<-UID <-posX  <-posZ <-maxRotationDeg)","description":"<p>\nRotates a unit so that its forward, or positive Z axis, points towards the supplied position, but with rotation confined to the plane of the map (the XZ plane).\nThe X, Z coordinates are a position in the plane of the map.\nThe max rotation can be limited by supplying a maxRotationDeg in degrees.\nIf a negative value is specified for the maxRotationDeg, the rotation will move away from rather than towards the specified target location\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rotateunittowardscell","kind":"Function"},{"name":"round","displayName":"round","usage":"Round (<-value <-decimalPlaces)","description":"<p>\nRounds off a number to the specified number of decimal places. This always returns a float, even when you are rounding to a whole number.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:round","kind":"Function"},{"name":"rplcamcopyposandrot","displayName":"RPLCamCopyPosAndRot","usage":"RPLCamCopyPosAndRot","description":"<p>\nCauses the internal values of rplcam position and rotation to copy the current values of the camera&#039;s position and rotation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rplcamcopyposandrot","kind":"Function"},{"name":"rplcamtween","displayName":"RPLCamTween","usage":"RPLCamTween(<-pos <-rot <-time)","description":"<p>\nCauses the camera, in rpl mode, to move to pos and rotate to rot (both vector3s) over the specified time in seconds.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rplcamtween","kind":"Function"},{"name":"rplcamtweenlookat","displayName":"RPLCamTweenLookAt","usage":"RPLCamTweenLookAt(<-pos <-lookatPos <-time)","description":"<p>\nCauses the camera, in rpl mode, to move to pos and lookat the lookatPos (both vector3s) over the specified time in seconds.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:rplcamtweenlookat","kind":"Function"},{"name":"self","displayName":"Self","usage":"Self","description":"<p>\nPushes the <abbr title=\"Unique Identifier.\">UID</abbr> of the current unit to the stack. A unit <abbr title=\"Unique Identifier.\">UID</abbr> is needed by many commands to determine which unit to act on.  &#039;Self&#039; is a way to reference the unit that the\nexecuting script is attached to. Note that unit <abbr title=\"Unique Identifier.\">UID</abbr>&#039;s are permanent and persist over save/load.\n</p>\n\n<p>\nNote: When run in Console scripts, or in Global Control (Pre or Post), -1 is returned. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:self","kind":"Constant"},{"name":"sendmsg","displayName":"SendMsg","usage":"SendMsg(<-channel <-data)","description":"<p>\nSends a message. A message can contain any &#039;data&#039; type. Any script registered to receive messages on the specified &#039;channel&#039; will receive the message.\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:registerformsg\" class=\"wikilink1\" title=\"4rpl:commands:registerformsg\" data-wiki-id=\"4rpl:commands:registerformsg\">RegisterForMSG</a> for information on the callbacks. <br>\n\nSendMSG is primarily intended for sending message between different scripts.  Prior to the 2.0 release of CW4, any call to SendMSG that ends up calling backing into the same script that SendMSG was called from, will produce errors in some cases.  This can happen,for instance, if you destroy some other unit from script A. Script B (on the destroyed unit) has a :Destroyed handler that calls SendMSG on a channel that script A listens on.  \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sendmsg","kind":"Function"},{"name":"sendmversemsg","displayName":"SendMVerseMsg","usage":"SendMVerseMsg(<-channel <-data)","description":"<p>\nSimilar to <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sendmsg\" class=\"wikilink1\" title=\"4rpl:commands:sendmsg\" data-wiki-id=\"4rpl:commands:sendmsg\">SendMsg</a>, except the message is sent to other clients in an mverse session. Note that the message will NOT be sent to client doing the sending. It is only sent to other clients. The data can be any 4rpl data type, including a list or a table. Care should be taken to not call SendMVerseMsg more than necessary or with more data than necessary since the call sends a message across the network to all clients.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sendmversemsg","kind":"Function"},{"name":"setadalogopen","displayName":"SetADALogOpen","usage":"SetADALogOpen(<-open)","description":"<p>\nOpens or closes the <abbr title=\"Automated Data Analyzer in CW4\">ADA</abbr> message log\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setadalogopen","kind":"Function"},{"name":"setalllegalunitcells","displayName":"SetAllLegalUnitCells","usage":"SetAllLegalUnitCells(<-val)","description":"<p>\nSets the state of building/moving legality for the whole map. This call can be used to clear all, or to set the entire state to &#039;true&#039; for instance.<br>\n\nNote: You must call <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:uselegalunitcells\" class=\"wikilink1\" title=\"4rpl:commands:uselegalunitcells\" data-wiki-id=\"4rpl:commands:uselegalunitcells\">UseLegalUnitCells</a>(true) for legal cells to be used.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setalllegalunitcells","kind":"Function"},{"name":"setbeambrightness","displayName":"SetBeamBrightness","usage":"SetBeamBrightness(<-beamUID <-brightness)","description":"<p>\nSet a beam&#039;s brightness. Values range from 0 to 10.  A value of 0 is totally black.  A value of 0.5 is half brightness. A value of 1 is full brightness.  Values greater than 1 push the color into the HDR range and\nresult is the beam blooming and glowing (if enabled in the player&#039;s graphics settings).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setbeambrightness","kind":"Function"},{"name":"setbeamcolor","displayName":"SetBeamColor","usage":"SetBeamColor(<-beamUID <-color)","description":"<p>\nSet a beams color. Possible color values are:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n “black”\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “red”\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “orange”\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “yellow”\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “green”\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “blue”\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “purple”\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “white”\n</div></li>\n</ul>\n\n\n<p>\nThe default color is &#039;white&#039; and will be used if an invalid color value is supplied.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setbeamcolor","kind":"Function"},{"name":"setbeamend","displayName":"SetBeamEnd","usage":"SetBeamEnd(<-beamUID <-end)","description":"<p>\nSet a beam&#039;s vector ending position in 3D space. For an unattached beam, the ending coordinates are in world space.  This means that 0,0,0 is in the lower left of the map.  The endY coordinate\nis the height above the terrain and endX is along the right/left direction of the map and endZ is the forward/back direction.\nFor a beam that is attached to a unit, the end position REMAINS IN WORLD COORDINATES unless the beam has been set to SetBeamForceLocalEnd.\n</p>\n\n<p>\n<strong>Important note:</strong> If you are planning to create a continuous beam on a unit that will be moving while firing, do not attach the beam to the unit. An attached beam will be unable to maintain the correct visual orientation and length. An unattached beam so long as its&#039; start location is updated will retain a correct visual orientation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setbeamend","kind":"Function"},{"name":"setbeamforcelocalend","displayName":"SetBeamForceLocalEnd","usage":"SetBeamForceLocalEnd(<-beamUID <-forceLocalEnd)","description":"<p>\nWhen set to true on a beam, the beam will use local coordinates for the end point when attached to a unit.  Normally, the end point of a beam is always in global coordinates even when the beam\nis attached to a unit.  If you want the end point to also be relative to the unit, then SetBeamForceLocalEnd to true.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setbeamforcelocalend","kind":"Function"},{"name":"setbeamstart","displayName":"SetBeamStart","usage":"SetBeamStart(<-beamUID <-start)","description":"<p>\nSet a beam&#039;s vector starting position in 3D space. For an unattached beam, the starting coordinates are in world space.  This means that 0,0,0 is in the lower left of the map.  The startY coordinate\nis the height above the terrain and startX is along the right/left direction of the map and startZ is the forward/back direction. For a beam that is attached to a unit, the start position is relative to the unit.\nThis means that 0,0,0 is at the origin of the unit it is attached to (and will remain there as the unit moves).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setbeamstart","kind":"Function"},{"name":"setbeamvisible","displayName":"SetBeamVisible","usage":"SetBeamVisible(<-beamUID <-visible)","description":"<p>\nSet a beam to be visible or invisible.  Invisible beams are not destroyed they are simply not visible.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setbeamvisible","kind":"Function"},{"name":"setbeamwidth","displayName":"SetBeamWidth","usage":"SetBeamWidth(<-beamUID <-width)","description":"<p>\nSet a beam&#039;s width. The width is the thickness of the beam. Beams are made from flat geometry that attempts to face the player camera (as best it can).\nBecause of this it is generally better to keep width relativly small (under 10 in most cases).\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" > Beams become very difficult to see from long distances when they are a size lower than 0.35 so if you want the beam to always be visible, keep the width at a minimum of 0.35.<br>\n\nThis can also be useful when using a large number of beams such as targeting lasers for decorating purposes rather than functional purposes to ensure the player&#039;s screen is not flooded with beams when zoomed out when using many of that unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setbeamwidth","kind":"Function"},{"name":"setcameraposition","displayName":"SetCameraPosition","usage":"SetCameraPosition(<-pos)","description":"<p>\nSets the position of the camera. &#039;pos&#039; should be a Vector3 (V3).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcameraposition","kind":"Function"},{"name":"setcamerarotation","displayName":"SetCameraRotation","usage":"SetCameraRotation(<-rotation)","description":"<p>\nSets a Vector3 (V3) indicating the X/Y/Z rotation of the camera.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcamerarotation","kind":"Function"},{"name":"setcameratopdown","displayName":"SetCameraTopDown","usage":"SetCameraTopDown(<-topDown)","description":"<p>\nCauses the camera to enter or exit top down mode. Same as when the player presses the “Top Down” button in the game.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcameratopdown","kind":"Function"},{"name":"setcanmoveunits","displayName":"SetCanMoveUnits","usage":"SetCanMoveUnits(<-canMoveUnits)","description":"<p>\nSets if the player can move units\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcanmoveunits","kind":"Function"},{"name":"setcelloccupiedcount","displayName":"SetCellOccupiedCount","usage":"SetCellOccupiedCount(<-cellX <-cellZ <-count)","description":"<p>\nSets the occupied count for a map cell. Extreme caution must be exercised when using this command. Normally units will increase the count for cells they occupy when they land or are created. The units will also decrease the count by 1 whenever they take off or are destroyed. Messing with the count can create &#039;phantom&#039; areas on the map where units can&#039;t land or where they can stack. Units do not know that you have altered the count! So if you change the occupied count, a unit will still decrease the count by 1 when it takes off or is destroyed.\n</p>\n\n<p>\nThe effect of SetCellOccupiedCount does not persist between save and loads, as all units rebuild their cell occupied counts whenever the game is loaded and units are rebuilt from the save file.\n</p>\n\n<p>\nIf you&#039;re trying to make a custom unit occupy cells in a custom shape rather than the default box shape, refer to <a href=\"https://knucklecracker.com/wiki/doku.php?id=cw4:4rpl_tools#custom_celloccupiedcount_shape\" class=\"wikilink1\" title=\"cw4:4rpl_tools\" data-wiki-id=\"cw4:4rpl_tools\">Custom CellOccupiedCount shape</a> for a copy-paste ready script that simplifies creating one and handles all of the difficult parts of using SetCellOccupiedCount, including handling unit movement.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcelloccupiedcount","kind":"Function"},{"name":"setcmodeditmenuname","displayName":"SetCModEditMenuName","usage":"SetCModEditMenuName(<-CModUID <-name)","description":"<p>\nCauses the unit to be added to the edit menu with the specified name. The CModUID (a unit template defined in a <abbr title=\"Custom Package. Custom unit/scripts package.\">CPACK</abbr>) references the unit definition.\nYou can get the <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> <abbr title=\"Unique Identifier.\">UID</abbr> from within the <abbr title=\"Custom Package. Custom unit/scripts package.\">CPACK</abbr> manager. <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> UIDs are unique and never change.\nOnce added, the map maker can click on the button that contains the\nname and build the specified unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcmodeditmenuname","kind":"Function"},{"name":"setcmodplayermenuname","displayName":"SetCModPlayerMenuName","usage":"SetCModPlayerMenuName(<-CModUID <-name <-section)","description":"<p>\nCauses the unit to be added to the player build menu with the specified name. The CModUID (a unit template defined in a <abbr title=\"Custom Package. Custom unit/scripts package.\">CPACK</abbr>) references the unit definition.\nYou can get the <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> <abbr title=\"Unique Identifier.\">UID</abbr> from within the <abbr title=\"Custom Package. Custom unit/scripts package.\">CPACK</abbr> manager. <abbr title=\"Custom Module. Custom unit/module defined in a CPACK.\">CMOD</abbr> UIDs are unique and never change.\nOnce added, the player can click on the button that contains the\nname and build the specified unit.\nThe section is a number that specified which menu the name is added to. It can be 0,1,2,3,4. 0 means the Struct menu, 1 means the Weapons menu, 2 is the Air menu, 3 is the Special menu, and 4 is the Custom menu.\n</p>\n\n<p>\nSetCModPlayerMenuName rebuilds the entire unit menu on the left. So it will be expensive in terms of CPU cycles. It is not intended that it be be called frequently (just when adding something to the menu).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcmodplayermenuname","kind":"Function"},{"name":"setcreeper","displayName":"SetCreeper","usage":"SetCreeper(<-cellX <-cellZ <-creeperAmt <-dontLower)","description":"<p>\nSets the creeper amount at the specified integer map coordinates.  A value of 0 means no creeper.  A negative value indicates anticreeper.\n</p>\n\n<p>\nThe dontLower argument is a Boolean indicating whether the call is allowed to reduce the amount of creeper or anticreeper. If set to true and the amount of creeper in the cell exceeds the amount being set, the call will not affect the creeper.  See Notes\n</p>\n\n<p>\nThe amount specified is a floating point number where 1 represents creeper that has a height of 1 terrain unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcreeper","kind":"Function"},{"name":"setcreepercutoff","displayName":"SetCreeperCutoff","usage":"SetCreeperCutoff(<-creeperCutoff)","description":"<p>\nSets the cutoff level for emitting creeper. This is the value show in the “emit mode” vertical chart next too the creeper graph.\nThe value represents the average creeper per map cell. The value includes the entire surface area of the map, including void.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcreepercutoff","kind":"Function"},{"name":"setcreepergraphavailable","displayName":"SetCreeperGraphAvailable","usage":"SetCreeperGraphAvailable(<-available)","description":"<p>\nSets if the creeper graph is visible\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcreepergraphavailable","kind":"Function"},{"name":"setcreeperinrange","displayName":"SetCreeperInRange","usage":"SetCreeperInRange{<-cellX <-cellZ <-radius <-isSquare <-creeperAmt <-dontLower)","description":"<p>\nSets the creeper amount in the specified integer map area.  A value of 0 means no creeper.  A negative value indicates anticreeper.\nThe dontLower argument is a boolean indicating whether the call is allowed to reduce the amount of creeper or anticreeper.\nIf set to true and the amount of creeper in the cell exceeds the amount being set, the call will not affect the creeper.\nThe dontlower argument only affects SetCreeper if a like-type of creeper is being set.  For instance if you call setcreeper with a positive amount (creeper)\nand the destination contains creeper.  Or if you call setcreeper with a negative amount (anticreeper) and the destination contains anticreeper.\nIf you call SetCreeper with a positive number (creeper) and anticreeper is at the destination, dontlower has no effect.  Similar for anticreeper with creeper at the destination.\nThe amount specified is a floating point number where 1 represents creeper that has a height of 1 terrain unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcreeperinrange","kind":"Function"},{"name":"setcrimson","displayName":"SetCrimson","usage":"SetCrimson(<-cellX <-cellZ <-crimson)","description":"<p>\nSets the crimson amount for a specified cell. Note that a unit should continuously (or periodically) set crimson in a cell if you want it to spread. Crimson evaporates so either deposit a lot semi periodically, or a smaller amount continuously. A crystal deposts 8 every frame. A Forb deposits 1 every frame.\n</p>\n\n<p>\nThis function has no effect if crimson is set to a value of 2148 or higher. The number must be below that.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcrimson","kind":"Function"},{"name":"setcustomobjectivetext","displayName":"SetCustomObjectiveText","usage":"SetCustomObjectiveText(<-text)","description":"<p>\nThe text that is show for the custom objective. Keep it short.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcustomobjectivetext","kind":"Function"},{"name":"setdecalcolor","displayName":"SetDecalColor","usage":"SetDecalColor(<-decal <-color)","description":"<p>\nSets the color (V4) of a decal. A decal is specified by its ID (shown in the decal editor pane).\nThe color value should be a Vector4 (V4) containing the r,g,b,a values of a color\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setdecalcolor","kind":"Function"},{"name":"setdecalposition","displayName":"SetDecalPosition","usage":"SetDecalPosition(<-decal <-position)","description":"<p>\nSets the position (V2) of a decal. A decal is specified by its ID (shown in the decal editor pane).\nThe position is where the decal is on the map. The X,Z map coordinates are stored in the X.Y values of a Vector 2 and are rounded to the nearest int.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setdecalposition","kind":"Function"},{"name":"setdecalsize","displayName":"SetDecalSize","usage":"SetDecalSize(<-decal <-size)","description":"<p>\nSets the Size (V2) of a decal. A decal is specified by its ID (shown in the decal editor pane).\nThe width should be in the x postion of the supplied vector2 (V2) and the depth should be in the y position. Values for width and depth will be rounded to the nearest integer values.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setdecalsize","kind":"Function"},{"name":"setdecalvisible","displayName":"SetDecalVisible","usage":"SetDecalVisible(<-decal <-visible)","description":"<p>\nSets the visiblity (boolean) of a decal. A decal is specified by its ID (shown in the decal editor pane).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setdecalvisible","kind":"Function"},{"name":"setdepartbuttonavailable","displayName":"SetDepartButtonAvailable","usage":"SetDepartButtonAvailable(<-available)","description":"<p>\nSets if the depart button is available. This only applies before the depart button is made available. It will not remove the player&#039;s ability to Rift Jump if they can already though that can be done by making a new objective required (while it is incomplete of course).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setdepartbuttonavailable","kind":"Function"},{"name":"seteggorbdata","displayName":"SetEggOrbData","usage":"SetEggOrbData(<-eggOrOrb <-initData)","description":"<p>\nSets data on the supplied egg or orb.\n</p>\n\n<p>\nThe following key values <strong>must be fully lowercased</strong>.\n</p>\n\n<p>\nThe possible values in initTable are:<br>\n\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n “payload” : The amount of creeper for the egg to carry. A float.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “moveto” : The location for the egg to move to. A Vector3.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “showpathline” : If the egg should draw a line to its moveTo position. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “showpathlinecolor” : The color of the pathLine, if any. A Vector4.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “bounce” : Whether the orb bounces on the terrain. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “includepseudoterrain” : Whether the orb bounces on pseudoterrain (when bounce is set to true). A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “bounceshield” : Whether the orb bounces on shields. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “creeperdamps” : If the motion of the orb is slowed when in creeper. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “destroywhenstill” : If the orb should auto destroy when it comes to rest. A bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “destroywhendrytime” : If -1, then the orb will not auto destroy when out of the creeper. Otherwise, the nubmer of frames that it must be dry before it auto destroys. An Int.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “releaseondestroy” : If the orb releases its payload when destroyed by a sniper. A Bool.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “attachedto” : Specifies the <abbr title=\"Unique Identifier.\">UID</abbr> of another egg/orb to create an attachment to. An attachment is a link that binds the orbs together\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “attachedtoobj” : Specifies the name of the obj to use on the attachedto object. Only works if attachedto points to a cmod unit. \n</div></li>\n</ul>\n\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > There isn&#039;t perfect symmetry between CreateOrb and CreateEgg.  CreateEgg doesn&#039;t pay attention to “attachedto” or “attachedtoobj”.  CreateOrb does.  SetEggOrbData pays attention to “attachedto” but what it attaches to has to be another egg or orb (otherwise it ignores it). SetEggOrbData does not pay attention to “attachedtoobj” (for either an egg or org). \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:seteggorbdata","kind":"Function"},{"name":"setfactorywares","displayName":"SetFactoryWares","usage":"SetFactoryWares(<-wareType <-wareCount)","description":"<p>\nSets count of the number of wares of a particular type currently held in the factory. WareType should be 1,2, or 3. 1 = AC, 2 = ARG, 3 = Liftic.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setfactorywares","kind":"Function"},{"name":"setfieldcell","displayName":"SetFieldCell","usage":"SetFieldCell(<-cellX <-cellZ <-AC <-fieldValue)","description":"<p>\nSets the field cell as the specified location.  If &#039;AC&#039; is true, then the AC affecting fields will be altered. If false, then the creeper affecting field will be altered. The fieldValue is a V2 in non normalized form (so it has high values, like 1000000 in it).\n</p>\n\n<p>\n<strong>Fields are reset on map load, so any fields must be recreated in the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:func_awake\" class=\"wikilink1\" title=\"4rpl:commands:func_awake\" data-wiki-id=\"4rpl:commands:func_awake\">:awake</a> method.</strong>\n</p>\n\n<p>\nThis method will <strong>set</strong> the field on the specified cell to a certain value. That means if there already was a field underneath, its effect will be erased. If you&#039;re not careful, you will erase the effect of nearby shields, singularity or other custom fields with this. This is something you should never allow to happen, as shields/singularity/custom fields will attempt to add a field of opposite force to erase their effect when they are no longer working, which will create an opposite field in the area that was previously reset with <a href=\"/wiki/doku.php?id=4rpl:commands:setfieldcell\" class=\"wikilink1\" title=\"4rpl:commands:setfieldcell\" data-wiki-id=\"4rpl:commands:setfieldcell\">SetFieldCell</a>.\n</p>\n\n<p>\nIn order to add to a field rather than set it, retrieve its current values first using <a href=\"/wiki/doku.php?id=4rpl:commands:getfieldcell\" class=\"wikilink1\" title=\"4rpl:commands:getfieldcell\" data-wiki-id=\"4rpl:commands:getfieldcell\">GetFieldCell</a>, add to those values, then set those values as the new field. To erase the new field, do the same thing, but instead subtract what was previously added. Alternatively, you can use <a href=\"/wiki/doku.php?id=4rpl:commands:setfieldrect\" class=\"wikilink1\" title=\"4rpl:commands:setfieldrect\" data-wiki-id=\"4rpl:commands:setfieldrect\">SetFieldRect</a>, which adds fields rather than sets them.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setfieldcell","kind":"Function"},{"name":"setfieldrect","displayName":"SetFieldRect","usage":"SetFieldRect(<-cellX <-cellZ <-fieldRect <-rectWidth <-strength <-direction <-affected <-deploy)","description":"<p>\nSets the field cells as defined by the fieldRect.\n</p>\n\n<p>\n<strong>Fields are reset on map load, so any fields must be recreated in the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:func_awake\" class=\"wikilink1\" title=\"4rpl:commands:func_awake\" data-wiki-id=\"4rpl:commands:func_awake\">:awake</a> method.</strong>\n</p>\n\n<p>\nThis method is, in essence, a more performant way to call <a href=\"/wiki/doku.php?id=4rpl:commands:setfieldcell\" class=\"wikilink1\" title=\"4rpl:commands:setfieldcell\" data-wiki-id=\"4rpl:commands:setfieldcell\">SetFieldCell</a> over a larger area. Despite the name, this method <strong>adds</strong> field cells rather than sets them, meaning the effect of existing fields will not be erased. To cancel the effect of calling SetFieldRect on an area, you should call SetFieldRect with the same properties in the same position, but opposite strength to the call used to create it. This will cancel out the effect.\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n <strong>cellX</strong>: The X position to deploy the field rect. The center of the field rect will be at this position.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>cellZ</strong>: The Z position to deploy the field rect. The center of the field rect will be at this position.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>fieldRect</strong>: A list containing vectors that describe the field direction at each cell in the rectangle. Values are treated as normalized values in the range of -1 to 1. Each vector in the list specifies the X and Z directions of the field via the first and SECOND elements of the supplied vectors.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>rectWidth</strong>: The width of the rectangle that the fieldRect contains the data for. The height of the rectangle is determined by taking the fieldRect length and dividing it by the rectWidth.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>strength</strong>: The strength is multiplied by the normalized value in the fieldRect to determine the actual value writing to the game&#039;s field array.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>direction</strong>: A fieldRect is specified in a direction that can be thought of as pointing to the right (the positive X direction). The direction parameter can be 0,1,2,3. O leaves the fieldRect unmodified. 1 will cause the field to be deployed as if the fieldRect was rotated 90 degrees counterclockwise. 2 as if it was rotated 180 degrees, and 3 as if 270 degrees.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>affected</strong>: 0 means the field applies to both creeper and AC. 1 means creeper only, and 2 means AC only.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>deploy</strong>: If <em>true </em>then values are written to the game&#039;s field array. If <em>false</em>, then negative values are written to the game&#039;s field array. Useful for exactly reversing a deployed field.\n</div></li>\n</ul>\n\n\n<p>\nNote: The values are read from the bottom left corner, doing a row at a time.  So if you&#039;re doing the double for loop like the example, the inner loop has to be x, and the outer loop has to be z.  \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setfieldrect","kind":"Function"},{"name":"setflow","displayName":"SetFlow","usage":"SetFlow(<-cellX <-cellZ <-flowX <-flowZ)","description":"<p>\nSets the wave flow vector for a given map location.\nPerfectly still creeper that isn&#039;t flowing will have a {0,0} flow vector. Once creeper starts to flow, the flow vector will\nstore the amount of creper that moved in or out of the cell on the last game update frame. So creeper flowing only towards the right of the map,\nwould return a positive flowX and a zero flowZ.\nNote that flow values in integer creeper values. A value of 1000000 (1 million) represents an amount of “1” creeper on the map.\nFlow values can be useful for finding/setting waves.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setflow","kind":"Function"},{"name":"setgamemessagetext","displayName":"SetGameMessageText","usage":"SetGameMessageText(<-index <-text)","description":"<p>\nSets the text of a message block in the game message. The index specifies which &#039;block&#039; within the message to set the text for. The first block is 0.\nIf the block at the index is not a text block, the call has no effect. Note that a single quote can be used in place of a double quote for convenience.\nNOTE: A backquote ( ` ) will get turned into a double quote when the text is applied to the message.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setgamemessagetext","kind":"Function"},{"name":"setgloballist","displayName":"SetGlobalList","usage":"SetGlobalList(<-index <-data)","description":"<p>\nSets an entry in the global list. The global list is a single list per mission.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setgloballist","kind":"Function"},{"name":"setglobaltable","displayName":"SetGlobalTable","usage":"SetGlobalTable(“key” <-data)","description":"<p>\nSets an entry in the global table. The global table is a single table per mission.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setglobaltable","kind":"Function"},{"name":"setlegalunitcells","displayName":"SetLegalUnitCells","usage":"SetLegalUnitCells(<-listOfCells <-val)","description":"<p>\nSets a list of Vector2 (V2) map locations that are the only legal places for the player to build or move units.\nThe list must contain vector2 items consisting of the X/Z postion on the map that is legal. Note that the entire footprint of the unit being built/moved must be over a legal build cell.\nSo if a 3&times;3 unit is to be placed, there must be a 3&times;3 legal area (9 cells) that are legal.\nSet &#039;val&#039; to true to allow a unit to be built/moved and to false to disallow the unit from building/moving to that location.<br>\n\nNote: You must call UseLegalUnitCells(true) for legal cells to be used.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setlegalunitcells","kind":"Function"},{"name":"setlistelement","displayName":"SetListElement","usage":"SetListElement(<-list <-index <-value)","description":"<p>\nStores a value at the specified index of a list. The previously stored value is overwritten.\n</p>\n\n<p>\nIf a list is stored in a variable, this can be abbreviated to <code><-value ->list[<-index]</code>.\n</p>\n\n<p>\nFor doing the same thing but with arguments in order of <strong>value, list</strong>, <strong>index</strong>, see <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setlistelementrpn\" class=\"wikilink1\" title=\"4rpl:commands:setlistelementrpn\" data-wiki-id=\"4rpl:commands:setlistelementrpn\">SetListElementRPN</a>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setlistelement","kind":"Function"},{"name":"setlistelementrpn","displayName":"SetListElementRPN","usage":"SetListElementRPN(<-value <-list <-index)","description":"<p>\nStores a value at the specified index of a list. The previously stored value is overwritten.\n</p>\n\n<p>\nIf a list is stored in a variable, setting a value in it can be abbreviated to <code><-value ->list[<-index]</code>, which will be executed as <code><-value <-list <-index SetListelementRPN</code>\n</p>\n\n<p>\nFor doing the same thing but with arguments in order of <strong>list</strong>, <strong>index</strong>, <strong>value</strong>, see <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setlistelement\" class=\"wikilink1\" title=\"4rpl:commands:setlistelement\" data-wiki-id=\"4rpl:commands:setlistelement\">SetListElement</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setlistelementrpn","kind":"Function"},{"name":"setmappanenabled","displayName":"SetMapPanEnabled","usage":"SetMapPanEnabled(<-enabled)","description":"<p>\nSets if the map can be panned by the player.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmappanenabled","kind":"Function"},{"name":"setmaprotateenabled","displayName":"SetMapRotateEnabled","usage":"SetMapRotateEnabled(<-enabled)","description":"<p>\nSets if the map can be rotated by the player.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmaprotateenabled","kind":"Function"},{"name":"setmapzoomenabled","displayName":"SetMapZoomEnabled","usage":"SetMapZoomEnabled(<-enabled)","description":"<p>\nSets if the map can be zoomed by the player.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmapzoomenabled","kind":"Function"},{"name":"setmeshhealth","displayName":"SetMeshHealth","usage":"SetMeshHealth(<-cellX <-cellZ <-health)","description":"<p>\nSets the mesh health value for a given cell.<br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getmeshhealth\" class=\"wikilink1\" title=\"4rpl:commands:getmeshhealth\" data-wiki-id=\"4rpl:commands:getmeshhealth\">GetMeshHealth</a> for the value ranges. Note that this does not create Mesh at a location if it does not exist.  To create mesh where it does not exist (or remove it), use <a href=\"/wiki/doku.php?id=4rpl:commands:setterrainspecial\" class=\"wikilink1\" title=\"4rpl:commands:setterrainspecial\" data-wiki-id=\"4rpl:commands:setterrainspecial\">SetTerrainSpecial</a>.\n</p>\n\n<p>\nApplying this to cells without Mesh can create problems, such as creeper ignoring void height. Therefore it&#039;s best to only apply this function to cells that have Mesh.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmeshhealth","kind":"Function"},{"name":"setmissionobjectiveenabled","displayName":"SetMissionObjectiveEnabled","usage":"SetMissionObjectiveEnabled(<-objectiveNumber <-enabled)","description":"<p>\nSets if the specified mission objective is a enabled. Note that only NULLIFY, SURVIVE, COLLECT ITEMS and CUSTOM can be set. ACTIVATE TOTEMS and RECLAIM are auto determined by units that are on the map.\n</p>\n\n<p>\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:acquiremissionobjective\" class=\"wikilink1\" title=\"4rpl:commands:acquiremissionobjective\" data-wiki-id=\"4rpl:commands:acquiremissionobjective\">AcquireMissionObjective</a> for the enumeration of mission objectives. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmissionobjectiveenabled","kind":"Function"},{"name":"setmissionobjectiverequired","displayName":"SetMissionObjectiveRequired","usage":"SetMissionObjectiveRequired(<-objectiveNumber <-required)","description":"<p>\nSets if the specified mission objective is a required objective.\n</p>\n\n<p>\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:acquiremissionobjective\" class=\"wikilink1\" title=\"4rpl:commands:acquiremissionobjective\" data-wiki-id=\"4rpl:commands:acquiremissionobjective\">AcquireMissionObjective</a> for the enumeration of mission objectives. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmissionobjectiverequired","kind":"Function"},{"name":"setmsgbutton","displayName":"SetMSGButton","usage":"SetMSGButton(<-slot <-enabled <-text <-color <-msgChannel <-msgText)","description":"<p>\nSets the state of a MSG Button.  MSG Buttons appear on the left of the display and to the right of the unit build pane. Up to 12 MSG buttons are supported.  Each MSG button will send a 4rpl message (same as <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sendmsg\" class=\"wikilink1\" title=\"4rpl:commands:sendmsg\" data-wiki-id=\"4rpl:commands:sendmsg\">SendMSG</a>) when clicked if the msgChannel and msgText are set. \n</p>\n<dl>\n<dt class=\"level1\"><span class=\"dt\"> slot</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n The slot number for the button. The slots range 0 to 11 inclusive.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> enabled</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n A Boolean indicating if the button is visible.  All buttons are disabled by default.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> text</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n The text to appear on the button. Keep it short.  It will wrap and the button height will stretch to accommodate the text. This has access to all of CW4&#039;s <a href=\"/wiki/doku.php?id=cw4:a.d.a_syntax_syntax_guide\" class=\"wikilink1\" title=\"cw4:a.d.a_syntax_syntax_guide\" data-wiki-id=\"cw4:a.d.a_syntax_syntax_guide\">rich text formatting can be used</a>.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> color</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n  The background color of the button, expressed as a <a href=\"/wiki/doku.php?id=4rpl:commands:v4\" class=\"wikilink1\" title=\"4rpl:commands:v4\" data-wiki-id=\"4rpl:commands:v4\">V4</a> <a href=\"/wiki/doku.php?id=4rpl:commands:specialsyntax#vectors\" class=\"wikilink1\" title=\"4rpl:commands:specialsyntax\" data-wiki-id=\"4rpl:commands:specialsyntax\">vector</a>. Each of the 4 fields is a floating-point value between 0 (zero) and 1 (one) indicating, respectively, the Red, Green, Blue and Alpha component values. Numbers larger than 1 are treated as 1. \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> msgChannel</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n The MSG channel to send the message on when clicked. \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> msgText</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n The string to send to the MSG channel. You must provide a non-empty string, otherwise the message will not be sent.\n</div></dd>\n</dl>\n\n\n<p>\nMSG buttons persist across save/load. So you can set the MSG buttons once from script and they will be present for the rest of a game, even across saves.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmsgbutton","kind":"Function"},{"name":"setmversecreatesunitghost","displayName":"SetMVerseCreatesUnitGhost","usage":"SetMVerseCreatesUnitGhost(<-unit <-createsMVerseGhost)","description":"<p>\nSpecifies if a custom unit will create an mverse ghost. An mverse ghost is the colored representation of a unit that is seen by other mverse players. If a ghost is created it will match the general look and position/rotation of the custom unit.  The ghost can be enabled/disabled at run time and will appear and disappear on clients.  This call only works for custom units. By default, custom units create ghosts.\n</p>\n\n<p>\nIt is suggested to use this call inside <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:func_gameloaded\" class=\"wikilink1\" title=\"4rpl:commands:func_gameloaded\" data-wiki-id=\"4rpl:commands:func_gameloaded\">:GameLoaded</a> so that it is called properly for mverse clients. <a href=\"/wiki/doku.php?id=4rpl:commands:func_awake\" class=\"wikilink1\" title=\"4rpl:commands:func_awake\" data-wiki-id=\"4rpl:commands:func_awake\">:Awake</a> or <a href=\"/wiki/doku.php?id=4rpl:commands:func_once\" class=\"wikilink1\" title=\"4rpl:commands:func_once\" data-wiki-id=\"4rpl:commands:func_once\">:Once</a> will work for host but not clients.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmversecreatesunitghost","kind":"Function"},{"name":"setmversesendcreeperchanges","displayName":"SetMVerseSendCreeperChanges","usage":"SetMVerseSendCreeperChanges (<-sendCreeperChanges)","description":"<p>\nSpecifies if calls to creeper manipulation APIs should automatically happen locally and be sent to other clients in an mverse session.  The affected APIS are: <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setcreeper\" class=\"wikilink1\" title=\"4rpl:commands:setcreeper\" data-wiki-id=\"4rpl:commands:setcreeper\">SetCreeper</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:setcreeperinrange\" class=\"wikilink1\" title=\"4rpl:commands:setcreeperinrange\" data-wiki-id=\"4rpl:commands:setcreeperinrange\">SetCreeperInRange</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:addcreeper\" class=\"wikilink1\" title=\"4rpl:commands:addcreeper\" data-wiki-id=\"4rpl:commands:addcreeper\">AddCreeper</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:addcreeperwithcap\" class=\"wikilink1\" title=\"4rpl:commands:addcreeperwithcap\" data-wiki-id=\"4rpl:commands:addcreeperwithcap\">AddCreeperWithCap</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:addcreeperinrange\" class=\"wikilink1\" title=\"4rpl:commands:addcreeperinrange\" data-wiki-id=\"4rpl:commands:addcreeperinrange\">AddCreeperInRange</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:addcreeperwithcapinrange\" class=\"wikilink1\" title=\"4rpl:commands:addcreeperwithcapinrange\" data-wiki-id=\"4rpl:commands:addcreeperwithcapinrange\">AddCreeperWithCapInRange</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:convertcreepertoac\" class=\"wikilink1\" title=\"4rpl:commands:convertcreepertoac\" data-wiki-id=\"4rpl:commands:convertcreepertoac\">ConvertCreeperToAC</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:convertactocreeper\" class=\"wikilink1\" title=\"4rpl:commands:convertactocreeper\" data-wiki-id=\"4rpl:commands:convertactocreeper\">ConvertACToCreeper</a>, <a href=\"/wiki/doku.php?id=4rpl:commands:setcrimson\" class=\"wikilink1\" title=\"4rpl:commands:setcrimson\" data-wiki-id=\"4rpl:commands:setcrimson\">SetCrimson</a> <br>\n\n</p>\n\n<p>\nBy default these APIs happen locally and also send a message to other clients to perform the same action. If you do not want this, then you can disable the behavior on a per script basis.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setmversesendcreeperchanges","kind":"Function"},{"name":"setobjactive","displayName":"SetObjActive","usage":"SetObjActive(<-Unit “ObjName” <-isActive)","description":"<p>\nSets the active state of the obj.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjactive","kind":"Function"},{"name":"setobjcolor","displayName":"SetObjColor","usage":"SetObjColor(<-Unit “ObjName” <-colorVector)","description":"<p>\nSets the RGB color unit&#039;s object from the specified color vector. Objects are the sub-parts that make up a unit.\nThe first three values of the vector, red/green/blue, are passed in. Each is a floating point number where 1 is full brightness and 0 is minimal brightness.\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjcolor","kind":"Function"},{"name":"setobjforward","displayName":"SetObjForward","usage":"SetObjForward(<-Unit “ObjName” <-pos)","description":"<p>\nSets a vector (X,Y,Z) representing the object&#039;s forward direction (the positive z direction of the unit).\nThe vector is in world space, and is not relative to the object&#039;s parent.\nNote, use “” (empty string) to indicate the root level object.\nBy setting the object&#039;s forward direction, the object can be made to point in the direction specified by the supplied vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjforward","kind":"Function"},{"name":"setobjlightconevisible","displayName":"SetObjLightConeVisible","usage":"SetObjLightConeVisible(<-Unit “ObjName” <-visible)","description":"<p>\nSets light cone visibility of a unit&#039;s object. Objects are the sub-parts that make up a unit.\nA light cone is a volumetric light (like the light that circles at the top of the Rift Lab). It is used for visual effects typically.\nThe light cone will always point in the direction of the object, so rotate the object to change the way the light cone points.\nUse of an &#039;empty&#039; object (no mesh) on the unit can be useful when you want the light cone to rotate or move without moving visible geometry on the unit.\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjlightconevisible","kind":"Function"},{"name":"setobjposition","displayName":"SetObjPosition","usage":"SetObjPosition(<-Unit “ObjName” <-pos <-world)","description":"<p>\nSets the position vector (X,Y,Z coordinates) of a unit&#039;s object. Objects are the sub-parts that make up a unit.\nIf world is false, then the coordinates are relative to the object&#039;s parent, otherwise the coordinates are world coordinates.\nIf the object is the root, then the position is in world coordinates regardless world.\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjposition","kind":"Function"},{"name":"setobjrotation","displayName":"SetObjRotation","usage":"SetObjRotation(<-Unit “ObjName” <-rotDeg <-world)","description":"<p>\nSets the X,Y,Z angle in degrees of a unit&#039;s object from the specified rotDeg vector. Objects are the sub-parts that make up a unit.\nIf world is false then the rotation is relative to the object&#039;s parent, otherwise the rotation is a world rotation.\nNote, use “” (empty string) to indicate the root level object.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > <strong>Note:</strong> Because SetObjRotation sets the value of <a href=\"https://knucklecracker.comhttps://docs.unity3d.com/ScriptReference/Transform-eulerAngles.html\" class=\"urlextern\" title=\"https://docs.unity3d.com/ScriptReference/Transform-eulerAngles.html\" rel=\"ugc nofollow\">eulerAngles</a>, some rotations will get represented differently when you set euler angles and then read them back out. Do not expect that the values set by SetObjRotation or the initial values set in the unit settings will come out the same when retrieved with GetObjRotation. For example, a unit that&#039;s set with a rotation of (180, 0, 0) will produce a result of (0, 180, 180) when retrieved with GetObjRotation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjrotation","kind":"Function"},{"name":"setobjscale","displayName":"SetObjScale","usage":"SetObjScale(<-Unit “ObjName” <-scale)","description":"<p>\nSets the X,Y,Z scale of a unit&#039;s object from the specified scale vector. Objects are the sub-parts that make up a unit.\nThe scale is relative to the object&#039;s parent. If the object is the root, then the scale is the units scale.\nNote, use “” (empty string) to indicate the root level object.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjscale","kind":"Function"},{"name":"setobjtext","displayName":"SetObjText","usage":"SetObjText(<-Unit “ObjName” <-text)","description":"<p>\nSets text of a unit&#039;s object. Objects are the sub-parts that make up a unit.<br>\n\nWhen text is set on an object it will show an in-game text field on the object. By default the text will billboard, that is to say it will always face the camera.<br>\n\nTo remove text from an object set the text to empty string (“”).\n</p>\n\n<p>\nThis <abbr title=\"Application Programming Interface\">API</abbr> and <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitdebugtext\" class=\"wikilink1\" title=\"4rpl:commands:setunitdebugtext\" data-wiki-id=\"4rpl:commands:setunitdebugtext\">SetUnitDebugText</a> have access to all compatible formats in CW4. If you plan to resize the text, you will need to use the format “<span style='color:#8BDFFF; '>&lt;line-height=[Insert number]&gt;</span>” after resizing as the changed size of text will not scale it&#039;s line-height correctly without intervention. Typically; “<span style='color:#8BDFFF; '>&lt;size=[SOME NUMBER]&gt;&lt;line-height=100%&gt;</span>” solves this problem entirely. Unlike <a href=\"/wiki/doku.php?id=4rpl:commands:setunitdebugtext\" class=\"wikilink1\" title=\"4rpl:commands:setunitdebugtext\" data-wiki-id=\"4rpl:commands:setunitdebugtext\">SetUnitDebugText</a> however, the line width is not limited and without intervention, the entire String will be displayed as a single line of text. To fix this, be sure to limit the line-width by adding “<span style='color:#8BDFFF; '>&lt;br&gt;</span>” to create new lines or limit the left line-margin using “<span style='color:#8BDFFF; '>&lt;margin-right=[Insert number]&gt;</span>”.<br>\n\nThe full list of formats in CW4 can be found in the <a href=\"/wiki/doku.php?id=cw4:a.d.a_syntax_syntax_guide\" class=\"wikilink1\" title=\"cw4:a.d.a_syntax_syntax_guide\" data-wiki-id=\"cw4:a.d.a_syntax_syntax_guide\">A.D.A. Message editor format</a> guide.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjtext","kind":"Function"},{"name":"setobjtextbillboard","displayName":"SetObjTextBillboard","usage":"SetObjTextBillboard(<-Unit “ObjName” <-billboard)","description":"<p>\nSets the billboard boolean of an object&#039;s text. Objects are the sub-parts that make up a unit. If the text has not yet been created by a call to SetObjText, this call will create it with default text.\nWhen set to true, the text will always face the camera. When false, the text faces in the direction of the object it is attached to.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjtextbillboard","kind":"Function"},{"name":"setobjtextcolor","displayName":"SetObjTextColor","usage":"SetObjTextColor(<-Unit “ObjName” <-color)","description":"<p>\nSets color of an object&#039;s text. Objects are the sub-parts that make up a unit. If the text has not yet been created by a call to SetObjText, this call will create it with default text.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjtextcolor","kind":"Function"},{"name":"setobjtextfontsize","displayName":"SetObjTextFontSize","usage":"SetObjTextFontSize(<-Unit “ObjName” <-fontSize)","description":"<p>\nSets the font size of an object&#039;s text. Objects are the sub-parts that make up a unit. If the text has not yet been created by a call to SetObjText, this call will create it with default text.\nThe default font size is 20.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjtextfontsize","kind":"Function"},{"name":"setorbitalcount","displayName":"SetOrbitalCount","usage":"SetOrbitalCount(<-orbitals)","description":"<p>\nSets the number of available orbitals\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setorbitalcount","kind":"Function"},{"name":"setpause","displayName":"SetPause","usage":"SetPause(<-paused)","description":"<p>\nSets the pause state of game. Different things can pause the game and some pauses &#039;stack&#039;.\nThis call sets the &#039;main&#039; pause state of the game (same as the main game pause button).<br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setpause","kind":"Function"},{"name":"setprintprefixenabled","displayName":"SetPrintPrefixEnabled","usage":"SetPrintPrefixEnabled(<-enabled)","description":"<p>\nSets if print statements should prefix each output with the name of the script. On by default.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setprintprefixenabled","kind":"Function"},{"name":"setraster","displayName":"SetRaster","usage":"SetRaster(<-x <-y <-color)","description":"<p>\nSets a pixel in the raster to the specified color. The origin is in the lower left of the raster.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setraster","kind":"Function"},{"name":"setrasterc","displayName":"SetRasterC","usage":"SetRasterC(<-x <-y)","description":"<p>\nSets a pixel in the raster to the color specified previously by RasterColor. The origin is in the lower left of the raster.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrasterc","kind":"Function"},{"name":"setrastersize","displayName":"SetRasterSize","usage":"SetRasterSize(<-width <-height)","description":"<p>\nChanges the width and height of the raster display. The raster will default to the same dimensions as the game map.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrastersize","kind":"Function"},{"name":"setregisteredscriptvar","displayName":"SetRegisteredScriptVar","usage":"SetRegisteredScriptVar(<-RegisteredScriptName <-varName <-varValue","description":"<p>\nSets the named variable on the specified registered script. If the registered script not exist, this call has no effect.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setregisteredscriptvar","kind":"Function"},{"name":"setrplcam","displayName":"SetRPLCam","usage":"SetRPLCam(<-rplCam)","description":"<p>\nSets if the camera is controlled by rpl. When in this mode, the camera position and rotation must be set by rpl.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrplcam","kind":"Function"},{"name":"setrplcamcursorlocked","displayName":"","usage":"SetRPLCamCursorLock(<-locked)","description":"<p>\nCauses the mouse cursor to become invisible and locked to the center of the game view. If the player presses ESC to bring up the menu, the cursor will revert to being visible and movable. If the main menu is dismissed, the cursor will return to the locked state.  This <abbr title=\"Application Programming Interface\">API</abbr> only works while RPLCam mode is enabled.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrplcamcursorlocked","kind":"Function"},{"name":"setrplcamforward","displayName":"SetRPLCamForward","usage":"SetRPLCamForward(<-forwardDir)","description":"<p>\nSets the camera&#039;s forward directional vector when in rpl mode. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrplcamforward","kind":"Function"},{"name":"setrplcamposition","displayName":"SetRPLCamPosition","usage":"SetRPLCamPosition(<-pos)","description":"<p>\nSets the camera position when in rpl mode. Pos is a Vector3. Only has an affect when the camera is in rpl mode.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrplcamposition","kind":"Function"},{"name":"setrplcamright","displayName":"SetRPLCamRight","usage":"SetRPLCamRight(<-RightDir)","description":"<p>\nSets the camera&#039;s right directional vector when in rpl mode. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrplcamright","kind":"Function"},{"name":"setrplcamrotation","displayName":"SetRPLCamRotation","usage":"SetRPLCamRotation(<-rot)","description":"<p>\nSets the camera rotation when in rpl mode. Rot is a Vector3. Only has an affect when the camera is in rpl mode.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrplcamrotation","kind":"Function"},{"name":"setrplcamup","displayName":"SetRPLCamUp","usage":"SetRPLCamUp(<-upDir)","description":"<p>\nSets the camera&#039;s up directional vector when in rpl mode. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setrplcamup","kind":"Function"},{"name":"setscript1var","displayName":"SetScript1Var","usage":"SetScript1Var(<-unit <-varName <-val)","description":"<p>\nSets the named variable on the specified unit&#039;s first script\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setscript1var","kind":"Function"},{"name":"setscriptvar","displayName":"SetScriptVar","usage":"SetScriptVar(<-unit <-scriptName <-varName <-val)","description":"<p>\nSets the named variable on the specified unit and script.\nThe script is referenced by name. If the name is an empty string, the first (possibly only) script on the unit will be referenced.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setscriptvar","kind":"Function"},{"name":"setsoylentcount","displayName":"SetSoylentCount","usage":"SetSoylentCount(<-count)","description":"<p>\nSets the maximum number of soylent cells to deploy per interval. The default is 1. If you set this to higher than the max number of soylent cells around a tower, then a tower will deploy all available cells at once. This is similar to setting the soylent delay to 0.  Note that if you set the soylent delay to 0, this value is ignored.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setsoylentcount","kind":"Function"},{"name":"setsoylentdelay","displayName":"SetSoylentDelay","usage":"SetSoylentDelay(<-delay)","description":"<p>\nSets the interval towers use for deploying soylent cells. Default is 6. Set to 0 for instant deployment.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setsoylentdelay","kind":"Function"},{"name":"setsoylentmode","displayName":"SetSoylentMode","usage":"SetSoylentMode(<-soylentMode)","description":"<p>\nSets a boolean indicating if towers can produce energy (the green soylent area)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setsoylentmode","kind":"Function"},{"name":"settableelement","displayName":"SetTableElement","usage":"SetTableElement(<-table <-key <-value)","description":"<p>\nSets an element in a table. Note that keys are case sensitive strings.\n</p>\n\n<p>\nFor doing the same thing but with arguments in order of <strong>value</strong>, <strong>table</strong>, <strong>key</strong>, see <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settableelementrpn\" class=\"wikilink1\" title=\"4rpl:commands:settableelementrpn\" data-wiki-id=\"4rpl:commands:settableelementrpn\">SetTableElementRPN</a>.\n</p>\n\n<p>\nA special syntax can also be used to set a table element. See the example below.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settableelement","kind":"Function"},{"name":"settableelementrpn","displayName":"SetTableElementRPN","usage":"SetTableElementRPN(<-value <-table <-key)","description":"<p>\nSets an element in a table. Note that keys are case sensitive strings.\n</p>\n\n<p>\nFor doing the same thing but with arguments in order of <strong>table</strong>, <strong>key</strong>, <strong>value</strong>, see <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settableelement\" class=\"wikilink1\" title=\"4rpl:commands:settableelement\" data-wiki-id=\"4rpl:commands:settableelement\">SetTableElement</a>.\n</p>\n\n<p>\nA special syntax can also be used to set a table element. See the example below.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settableelementrpn","kind":"Function"},{"name":"setterraformactivecell","displayName":"SetTerraformActiveCell","usage":"SetTerraformActiveCell(<-cellX <-cellY <-active)","description":"<p>\nIndicates that a cell is actively being terraformed. Referenced by terps and by <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterraformdigsite\" class=\"wikilink1\" title=\"4rpl:commands:getterraformdigsite\" data-wiki-id=\"4rpl:commands:getterraformdigsite\">GETTERRAFORMDIGSITE</a>. Terps will tag a cell as active when they begin terraforming. This is to prevent other terps from working on the same cell. Care must be taken with this api. Only set inactive cells that you set active. Also, don&#039;t forget to set inactive cells that you set active. <br>\n\nWhen you call this <abbr title=\"Application Programming Interface\">API</abbr> a value will be added or removed (based on the &#039;active&#039; argument) to a game wide hashmap. Terps will reference this hashmap to determine if a cell is active. <br>\n\nNOTE: Active cells are NOT serialized in save game files.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setterraformactivecell","kind":"Function"},{"name":"setterraformmarker","displayName":"SetTerraformMarker","usage":"SetTerraformMarker(<-cellX <-cellY <-level)","description":"<p>\nSets an int indicating the terraform marker level at the specified location. A value of ⇐ 0 means to remove the marker. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setterraformmarker","kind":"Function"},{"name":"setterrain","displayName":"SetTerrain","usage":"SetTerrain(<-cellX <-cellZ <-terrainHeight)","description":"<p>\nSets the integer height of the terrain at the specified integer map coordinates.  A value of 0 means “void” or no terrain.\nA value less than 0 or greater than Max Height (20) will do nothing.\nChanging the terrain will cause the terrain to redraw and nearby units to recalculate line of sight and other data.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setterrain","kind":"Function"},{"name":"setterraininrange","displayName":"SetTerrainInRange","usage":"SetTerrainInRange(<-cellX <-cellZ <-minTerrainHeight <-maxTerrainHeight <-radius <-isSquare <-fillRatio)","description":"<p>\nSets the heights of the terrain within the radius of specified integer map coordinates.  A value of 0 for terrainHeight means “void” or no terrain.\nIf the min and max heights are different, a random height will be chosen in the range from [min,max].\nThe isSquare parameter is a boolean indicating where to fill terrain in a square (true) or a circle (false) from the specified coordinates.\nThe fillRatio is a float in the range [0,1]. A value of 1 means to change the height of every cell in range.  A value of 0 means to\ndo nothing.  Values in between will affect a partial amount of terrain cells in range.\n</p>\n\n<p>\nNote: Changing the terrain will cause the terrain to redraw and nearby units to recalculate line of sight and other data.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setterraininrange","kind":"Function"},{"name":"setterrainline","displayName":"SetTerrainLine","usage":"SetTerrainLine(<-startX <-startZ <-endX <-endZ <-minTerrainHeight <-maxTerrainHeight <-lineWidth <-fillRatio)","description":"<p>\nSets the heights of the terrain on a line of width lineWidth from start to end.  A value of 0 for terrainHeight means “void” or no terrain.\nIf the min and max heights are different, a random height will be chosen in the range from [min,max].\nThe fillRatio is a float in the range [0,1]. A value of 1 means to change the height of every cell in range.  A value of 0 means to\ndo nothing.  Values in between will affect a partial amount of terrain cells in range.\n</p>\n\n<p>\nNote: Changing the terrain will cause the terrain to redraw and nearby units to recalculate line of sight and other data.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setterrainline","kind":"Function"},{"name":"setterrainoverride","displayName":"SetTerrainOverride","usage":"SetTerrainOverride(<-cellX <-cellY <-override)","description":"<p>\nSets the terrain override for a terrain cell. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getterrainoverride\" class=\"wikilink1\" title=\"4rpl:commands:getterrainoverride\" data-wiki-id=\"4rpl:commands:getterrainoverride\">GetTerrainOverride</a> for more details.\n</p>\n\n<p>\nTerrain overrides persist through game reloads.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setterrainoverride","kind":"Function"},{"name":"setterrainspecial","displayName":"SetTerrainSpecial","usage":"SetTerrainSpecial(<-posX <-posZ <-specialTerrainSlot)","description":"<p>\nSets the slot for the special terrain at the terrain location specified by posX and posZ. A value of 0 mean no special terrain is present.\nA value of 1 through 10 (inclusive) indicates the special terrain slot present at the location. The special terrain slots are defined in the &#039;Creeper&#039; tab in the editor.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setterrainspecial","kind":"Function"},{"name":"setthemeclifflight","displayName":"SetThemeCliffLight","usage":"SetThemeCliffLight(<-red <-green <-blue)","description":"<p>\nSets the current theme&#039;s cliff light color.\nThree values; red/green/blue are passed in. Each is a floating point number where 1 is full brightness and 0 is minimal brightness.\nThe texture light gets multiplied with the texture color at each pixel to determine the final color to show on the screen.\nSo a color of [1,1,1] will leave the texture unaltered.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeclifflight","kind":"Function"},{"name":"setthemeclifflightboost","displayName":"SetThemeCliffLightBoost","usage":"SetThemeCliffLightBoost(<-lightBoost)","description":"<p>\nSets the current theme&#039;s cliff light boost.\nThe light boost is a number that gets multiplied with the light color before the light is applied to the texture.\nThe default value for the boost is 1, so it makes no changes to the color.  When the value is set to 2 (what the theme editor sets the\nvalue to when &#039;2X intensity&#039; is checked), the light color gets doubled. The resulting light, when multiplied with the texture, can produce a\nresulting color that is brighther than the SDR color range. If the game has the bloom effect enabled, the resulting texture will appear to glow\nat any pixels whose resulting color is greater than &#039;1&#039;.\nValues can be any floating point value, but values of 1 and 2 are most common and what the theme editor in the game works with.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeclifflightboost","kind":"Function"},{"name":"setthemecliffnormal","displayName":"SetThemeCliffNormal","usage":"SetThemeCliffNormal(<-normalMapNumber)","description":"<p>\nSets the current theme&#039;s cliff normal map.\nNormal map numbers are in the range of 0 to 400, with 0 to 380 being built in normal maps.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemecliffnormal","kind":"Function"},{"name":"setthemecliffnormalamt","displayName":"SetThemeCliffNormalAmt","usage":"SetThemeCliffNormalAmt(<-normalAmt)","description":"<p>\nSets the current theme&#039;s cliff normal map amount.\nThe amount is a floating point number that specifies the intensity of the normals to apply to the texture. A value of 0\ndisables the normal map.  Higher values make the normals appear more pronounced. A value of &#039;2&#039; is the default.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemecliffnormalamt","kind":"Function"},{"name":"setthemecliffnormalscale","displayName":"SetThemeCliffNormalScale","usage":"SetThemeCliffNormalScale(<-normalScale)","description":"<p>\nSets the current theme&#039;s cliff normal map scale.\nThe scale is a floating point number that specifies the size the normal map appears. Higher numbers make the normal map appear larger.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemecliffnormalscale","kind":"Function"},{"name":"setthemecliffscale","displayName":"SetThemeCliffScale","usage":"SetThemeCliffScale(<-textureScale)","description":"<p>\nSets the current theme&#039;s cliff texture scale.\nThe scale is a floating point number that specifies the size the texture appears. Higher numbers make the texture appear larger.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemecliffscale","kind":"Function"},{"name":"setthemeclifftexture","displayName":"SetThemeCliffTexture","usage":"SetThemeCliffTexture(<-textureNumber)","description":"<p>\nSets the current theme&#039;s cliff texture number.\nTexture numbers are in the range of 0 to 400, with 0 to 380 being built in textures.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeclifftexture","kind":"Function"},{"name":"setthemenormal","displayName":"SetThemeNormal","usage":"SetThemeNormal(<-terrainLevel <-normalMapNumber)","description":"<p>\nSets the current theme&#039;s normal map number for the specified level. Terrain levels range from 1 to 20.\nNormal map numbers are in the range of 0 to 400, with 0 to 380 being built in normal maps.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemenormal","kind":"Function"},{"name":"setthemenormalamt","displayName":"SetThemeNormalAmt","usage":"SetThemeNormalAmt(<-terrainLevel <-normalAmt)","description":"<p>\nSets the current theme&#039;s normal map amount for the specified level. Terrain levels range from 1 to 20.\nThe amount is a floating point number that specifies the intensity of the normals to apply to the texture. A value of 0\ndisables the normal map.  Higher values make the normals appear more pronounced. A value of &#039;2&#039; is the default.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemenormalamt","kind":"Function"},{"name":"setthemenormalscale","displayName":"SetThemeNormalScale","usage":"SetThemeNormalScale(<-terrainLevel <-normalScale)","description":"<p>\nSets the current theme&#039;s normal map scale for the specified level. Terrain levels range from 1 to 20.\nThe scale is a floating point number that specifies the size the normal map appears. Higher numbers make the normal map appear larger.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemenormalscale","kind":"Function"},{"name":"setthemeoverlayapplytocliffs","displayName":"SetThemeOverlayApplyToCliffs","usage":"SetThemeOverlayApplyToCliffs(<-overlayNumber <-applyToCliffs)","description":"<p>\nSets if the theme overlay texture is show on cliffs. The overlayNumber should be 0 or 1.<br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypixels\" class=\"wikilink1\" title=\"4rpl:commands:setthemeoverlaypixels\" data-wiki-id=\"4rpl:commands:setthemeoverlaypixels\">SetThemeOverlayPixels</a> for a larger example of theme overlay use. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlayapplytocliffs","kind":"Function"},{"name":"setthemeoverlaycolor","displayName":"SetThemeOverlayColor","usage":"SetThemeOverlayColor(<-overlayNumber <-color)","description":"<p>\nSets the theme overlay color. The color is multiplied by the entire overlay image to produce the result seen on the screen. The color is a V4 that uses the 4th field for the alpha value. The overlayNumber should be 0 or 1. <br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypixels\" class=\"wikilink1\" title=\"4rpl:commands:setthemeoverlaypixels\" data-wiki-id=\"4rpl:commands:setthemeoverlaypixels\">SetThemeOverlayPixels</a> for a larger example of theme overlay use.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaycolor","kind":"Function"},{"name":"setthemeoverlayenabled","displayName":"SetThemeOverlayEnabled","usage":"SetThemeOverlayEnabled(<-overlayNumber <-enabled)","description":"<p>\nEnables or disables the specified overlay. The overlayNumber should be 0 or 1. <br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypixels\" class=\"wikilink1\" title=\"4rpl:commands:setthemeoverlaypixels\" data-wiki-id=\"4rpl:commands:setthemeoverlaypixels\">SetThemeOverlayPixels</a> for a larger example of theme overlay use.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlayenabled","kind":"Function"},{"name":"setthemeoverlayoffset","displayName":"SetThemeOverlayOffset","usage":"SetThemeOverlayOffset(<-overlayNumber <-offsetX <-offsetY)","description":"<p>\nSets the theme overlay offset. Typically, the offset is 0,0. The overlayNumber should be 0 or 1.<br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypixels\" class=\"wikilink1\" title=\"4rpl:commands:setthemeoverlaypixels\" data-wiki-id=\"4rpl:commands:setthemeoverlaypixels\">SetThemeOverlayPixels</a> for a larger example of theme overlay use.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlayoffset","kind":"Function"},{"name":"setthemeoverlaypixels","displayName":"SetThemeOverlayPixels","usage":"SetThemeOverlayPixels(<-overlayNumber <-targetX <-targetZ <-blockWidth <-blockHeight <-pixelData)","description":"<p>\nSets a block of pixels in the theme overlay texture. The overlayNumber should be 0 or 1.<br>\n\nThe targetX and targetZ parameters specify the location to apply the block of pixel data. The block will be applied starting at the lower leftof the block.<br>\n\nThe blockWidth and blockHeight specify the width and height of the pixelData.<br>\n\nThe pixelData is a list of color values. It&#039;s length should be blockWidth * blockHeight.<br>\n\nThe colors in the pixelData are V4 values and the 4th field is treated as the transparency (alpha) value. \n</p>\n\n<p>\nAn alpha value of 0 is transparent, 1 is opaque. If the alpha value is higher than 1, this is interpreted as a special value meaning to not apply the pixel. This allows for pixel values within blocks that will not be applied to the overlay texture (the pixels in the overlay texture will remain undisturbed).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypixels","kind":"Function"},{"name":"setthemeoverlaypointfilter","displayName":"SetThemeOverlayPointFilter","usage":"SetThemeOverlayPointFilter(<-overlayNumber <-pointFilter)","description":"<p>\nSets if the theme overlay texture is showing using a point filter. If true, a point filter is used (sharp pixel rendering). If false, a bilinear smoothing filter is used. The overlayNumber should be 0 or 1. <br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypixels\" class=\"wikilink1\" title=\"4rpl:commands:setthemeoverlaypixels\" data-wiki-id=\"4rpl:commands:setthemeoverlaypixels\">SetThemeOverlayPixels</a> for a larger example of theme overlay use.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypointfilter","kind":"Function"},{"name":"setthemeoverlayrectpixels","displayName":"SetThemeOverlayRectPixels","usage":"SetThemeOverlayRectPixels(<-overlayNumber <-targetX <-targetY <-width <-height <-color)","description":"<p>\nSets a rectangle of pixels to &#039;color&#039; in the theme overlay texture. The overlayNumber should be 0 or 1.<br>\n\nThe targetX and targetY parameters specify the lower left corner of the rectangle.<br>\n\nThe width and height specify the size of the rectangle.<br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlayrectpixels","kind":"Function"},{"name":"setthemeoverlayscale","displayName":"SetThemeOverlayScale","usage":"SetThemeOverlayScale(<-overlayNumber <-scaleX <-scaleY)","description":"<p>\nSets the theme overlay scale. Typically, the scale will match the map dimensions. The overlayNumber should be 0 or 1.<br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlaypixels\" class=\"wikilink1\" title=\"4rpl:commands:setthemeoverlaypixels\" data-wiki-id=\"4rpl:commands:setthemeoverlaypixels\">SetThemeOverlayPixels</a> for a larger example of theme overlay use.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemeoverlayscale","kind":"Function"},{"name":"setthemetexture","displayName":"SetThemeTexture","usage":"SetThemeTexture(<-terrainLevel <-textureNumber)","description":"<p>\nSets the current theme&#039;s texture number for the specified level. Terrain levels range from 1 to 20.\nTexture numbers are in the range of 0 to 400, with 0 to 380 being built in textures.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemetexture","kind":"Function"},{"name":"setthemetexturedetile","displayName":"SetThemeTextureDeTile","usage":"SetThemeTextureDeTile(<-terrainLevel <-deTileAmt)","description":"<p>\nSets the current theme&#039;s texture detiling value for the specified level. Terrain levels range from 1 to 20.\nThe detiling value should be in the range 0 to 1, inclusive.  A value of 0 disables detiling and higher values increase the detiling amount.\nA value of 0.2 is the normal detiling amount.  Higher values will soften the effect.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemetexturedetile","kind":"Function"},{"name":"setthemetexturelight","displayName":"SetThemeTextureLight","usage":"SetThemeTextureLight(<-terrainLevel <-red <-green <-blue)","description":"<p>\nSets the current theme&#039;s light color for the specified level. Terrain levels range from 1 to 20.\nThree values; red/green/blue are passed in. Each is a floating point number where 1 is full brightness and 0 is minimal brightness.\nThe texture light gets multiplied with the texture color at each pixel to determine the final color to show on the screen.\nSo a color of [1,1,1] will leave the texture unaltered.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemetexturelight","kind":"Function"},{"name":"setthemetexturelightboost","displayName":"SetThemeTextureLightBoost","usage":"SetThemeTextureLightBoost(<-terrainLevel <-lightBoost)","description":"<p>\nSets the current theme&#039;s light boost for the specified level. Terrain levels range from 1 to 20.\nThe light boost is a number that gets multiplied with the light color before the light is applied to the texture.\nThe default value for the boost is 1, so it makes no changes to the color.  When the value is set to 2 (what the theme editor sets the\nvalue to when &#039;2X intensity&#039; is checked), the light color gets doubled. The resulting light, when multiplied with the texture, can produce a\nresulting color that is brighther than the SDR color range. If the game has the bloom effect enabled, the resulting texture will appear to glow\nat any pixels whose resulting color is greater than &#039;1&#039;.\nValues can be any floating point value, but values of 1 and 2 are most common and what the theme editor in the game works with.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemetexturelightboost","kind":"Function"},{"name":"setthemetexturescale","displayName":"SetThemeTextureScale","usage":"SetThemeTextureScale(<-terrainLevel <-textureScale)","description":"<p>\nSets the current theme&#039;s texture scale for the specified level. Terrain levels range from 1 to 20.\nThe scale is a floating point number that specifies the size the texture appears. Higher numbers make the texture appear larger.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setthemetexturescale","kind":"Function"},{"name":"settimer0","displayName":"SetTimer0","usage":"SetTimer0(<-amt)","description":"<p>\nSets the current value of timer 0. Timers are set to some value, and then decrease by 1 each game frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settimer0","kind":"Function"},{"name":"settimer1","displayName":"SetTimer1","usage":"SetTimer1(<-amt)","description":"<p>\nSets the current value of timer 1. Timers are set to some value, and then decrease by 1 each game frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settimer1","kind":"Function"},{"name":"settimer2","displayName":"SetTimer2","usage":"SetTimer2(<-amt)","description":"<p>\nSets the current value of timer 2. Timers are set to some value, and then decrease by 1 each game frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settimer2","kind":"Function"},{"name":"settimer3","displayName":"SetTimer3","usage":"SetTimer3(<-amt)","description":"<p>\nSets the current value of timer 3. Timers are set to some value, and then decrease by 1 each game frame.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settimer3","kind":"Function"},{"name":"settimerobeypause0","displayName":"SetTimerObeyPause0","usage":"SetTimerObeyPause0(<-obey)","description":"<p>\nIndicates if the timer should obey the game&#039;s pause state and not decrease when the game is paused. This only has a effect if the script is set to run when paused.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settimerobeypause0","kind":"Function"},{"name":"settimerobeypause1","displayName":"SetTimerObeyPause1","usage":"SetTimerObeyPause1(<-obey)","description":"<p>\nIndicates if the timer should obey the game&#039;s pause state and not decrease when the game is paused. This only has a effect if the script is set to run when paused.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settimerobeypause1","kind":"Function"},{"name":"settimerobeypause2","displayName":"SetTimerObeyPause2","usage":"SetTimerObeyPause2(<-obey)","description":"<p>\nIndicates if the timer should obey the game&#039;s pause state and not decrease when the game is paused. This only has a effect if the script is set to run when paused.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settimerobeypause2","kind":"Function"},{"name":"settimerobeypause3","displayName":"SetTimerObeyPause3","usage":"SetTimerObeyPause3(<-obey)","description":"<p>\nIndicates if the timer should obey the game&#039;s pause state and not decrease when the game is paused. This only has a effect if the script is set to run when paused.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settimerobeypause3","kind":"Function"},{"name":"settotemactivated","displayName":"SetTotemActivated","usage":"SetTotemActivated(<-totem <-activated)","description":"<p>\nSets the activated state of a totem.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:settotemactivated","kind":"Function"},{"name":"setundercreepereffectenabled","displayName":"SetUnderCreeperEffectEnabled","usage":"SetUnderCreeperEffectEnabled(<-enabled)","description":"<p>\nSets if the special effect is enabled when the camera is below the creeper. This setting is not persistent, so you must always turn it off if you intend for it to stay off after a save/load of a mission.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setundercreepereffectenabled","kind":"Function"},{"name":"setunitammo","displayName":"SetUnitAmmo","usage":"SetUnitAmmo(<-unit <-amt)","description":"<p>\nSets the ammo of the unit. A value of 1 is how much a packet normally delivers.\nThe ammo can not exceed the max ammo, so set max ammo first. Amt values less than zero are changed to zero.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitammo","kind":"Function"},{"name":"setunitammoware","displayName":"SetUnitAmmoWare","usage":"SetUnitAmmoWare(<-unit  <-unitAmmoWare)","description":"<p>\nSet the ammo ware type of the unit to the stack. 0 = energy, 1 = anticreeper, 2 = arg, 3 = liftic. When used on a Porter, it will do nothing.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitammoware","kind":"Function"},{"name":"setunitanticreeperdamages","displayName":"SetUnitAnticreeperDamages","usage":"SetUnitAnticreeperDamages(<-unit <-bool)","description":"<p>\nSets whether anticreeper damages this unit when landed.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitanticreeperdamages","kind":"Function"},{"name":"setunitarmed","displayName":"SetUnitArmed","usage":"SetUnitArmed(<-unit <-armed)","description":"<p>\nSets the armed status of a unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitarmed","kind":"Function"},{"name":"setunitbuildlimit","displayName":"SetUnitBuildLimit","usage":"SetUnitBuildLimit(<-unitType <-unitBuildLimit)","description":"<p>\nSets the build limit for the specified unit type. Set to -1 (or any negative number) to remove the unit build limit. The only types that are supported are the built in unit types that the player can build, and custom units.  See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunittype\" class=\"wikilink1\" title=\"4rpl:commands:getunittype\" data-wiki-id=\"4rpl:commands:getunittype\">GetUnitType</a>. For custom units, specify the CMod GUID for the type.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitbuildlimit","kind":"Function"},{"name":"setunitbuildware","displayName":"SetUnitBuildWare","usage":"SetUnitBuildWare(<-unit <-unitBuildWare)","description":"<p>\nSets the build ware type of the unit. 0 = energy, 1 = anticreeper, 2 = arg, 3 = liftic.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitbuildware","kind":"Function"},{"name":"setunitcanbuild","displayName":"SetUnitCanBuild","usage":"SetUnitCanBuild(<-unitType <-canBuild)","description":"<p>\nSets a boolean indicating if the specified unit can be built. This call controls the visibility of the build buttons in the left build pane.<br>\n\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitcanbuild\" class=\"wikilink1\" title=\"4rpl:commands:getunitcanbuild\" data-wiki-id=\"4rpl:commands:getunitcanbuild\">GetUnitCanBuild</a> for the list of unit types.<br>\n\n<strong>Note:</strong> This does not work for custom units. You must must use <a href=\"/wiki/doku.php?id=4rpl:commands:setcmodplayermenuname\" class=\"wikilink1\" title=\"4rpl:commands:setcmodplayermenuname\" data-wiki-id=\"4rpl:commands:setcmodplayermenuname\">SetCModPlayerMenuName</a> instead.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitcanbuild","kind":"Function"},{"name":"setunitcandestroy","displayName":"SetUnitCanDestroy","usage":"SetUnitCanDestroy(<-unit <-canDestroy)","description":"<p>\nSets the &#039;user can destroy&#039; state of the unit to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitcandestroy","kind":"Function"},{"name":"setunitcanmove","displayName":"SetUnitCanMove","usage":"SetUnitCanMove(<-unit <-canMove)","description":"<p>\nSets if the unit can be moved using the normal built in unit movement mechanic.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitcanmove","kind":"Function"},{"name":"setunitcanstun","displayName":"SetUnitCanStun","usage":"SetUnitCanStun(<-unit <-canStun)","description":"<p>\nSets if the unit can be stunned.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitcanstun","kind":"Function"},{"name":"setunitcell","displayName":"SetUnitCell","usage":"SetUnitCell(<-UID <-cellX <-cellZ <-snapToTerrain)","description":"<p>\nSets the 2D map position of a unit.  The arguments are unit uid, the X and Z positions on the map, and whether the unit should be move to the terrain height at the target location.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitcell","kind":"Function"},{"name":"setunitconnectable","displayName":"SetUnitConnectable","usage":"SetUnitConnectable(<-unit <-bool)","description":"<p>\nSets whether the unit can connect to other connectable units (like towers and pylons).\n</p>\n\n<p>\nNote, the frame this is set, it will interfere with any dispatched packets sent from this unit and they won&#039;t be created, so avoid calling it every frame if you&#039;re trying to send packets.  \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitconnectable","kind":"Function"},{"name":"setunitcreeperdamages","displayName":"SetUnitCreeperDamages","usage":"SetUnitCreeperDamages(<-unit <-bool)","description":"<p>\nSets whether creeper damages this unit when landed.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitcreeperdamages","kind":"Function"},{"name":"setunitdamagedbyac","displayName":"SetUnitDamagedByAC","usage":"SetUnitDamagedByAC(<-unit <-damaged)","description":"<p>\nSets if the unit is damaged by AC.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitdamagedbyac","kind":"Function"},{"name":"setunitdamagedbycreeper","displayName":"SetUnitDamagedByCreeper","usage":"SetUnitDamagedByCreeper(<-unit <-damaged)","description":"<p>\nSets if the unit is damaged by creeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitdamagedbycreeper","kind":"Function"},{"name":"setunitdebugtext","displayName":"SetUnitDebugText","usage":"SetUnitDebugText(<-unit <-text)","description":"<p>\nSets a text to appear above a unit.\n</p>\n\n<p>\nThis text can be used instead of, or in conjunction with <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setobjtext\" class=\"wikilink1\" title=\"4rpl:commands:setobjtext\" data-wiki-id=\"4rpl:commands:setobjtext\">SetObjText</a> to display some text above a unit. It is directly attached to the unit and cannot be re-positioned. Although being labeled as “debug”, it can be used in non-editor gameplay. For example, the game uses it to display the out-of-ammo message for the Airship.<br>\n\nBoth this <abbr title=\"Application Programming Interface\">API</abbr> and <a href=\"/wiki/doku.php?id=4rpl:commands:setobjtext\" class=\"wikilink1\" title=\"4rpl:commands:setobjtext\" data-wiki-id=\"4rpl:commands:setobjtext\">SetObjText</a> have access to all compatible formats in CW4. If you plan to resize the text, you will need to use the format “<span style='color:#8BDFFF; '>&lt;line-height=[Insert number]&gt;</span>” after resizing as the changed size of text will not scale it&#039;s line-height correctly without intervention. Typically; “<span style='color:#8BDFFF; '>&lt;size=[SOME NUMBER]&gt;&lt;line-height=100%&gt;</span>” solves this problem entirely. Unlike <a href=\"/wiki/doku.php?id=4rpl:commands:setobjtext\" class=\"wikilink1\" title=\"4rpl:commands:setobjtext\" data-wiki-id=\"4rpl:commands:setobjtext\">SetObjText</a>, new lines will be created so you won&#039;t need to manually add formats like “<span style='color:#8BDFFF; '>&lt;br&gt;</span>”.<br>\n\nThe full list of formats in CW4 can be found in the <a href=\"/wiki/doku.php?id=cw4:a.d.a_syntax_syntax_guide\" class=\"wikilink1\" title=\"cw4:a.d.a_syntax_syntax_guide\" data-wiki-id=\"cw4:a.d.a_syntax_syntax_guide\">A.D.A. Message editor format</a> guide.\n</p>\n\n<p>\nThe text displayed by SetUnitDebugText is cleared upon game reload. If needed, it is recommended to re-apply the text display inside the <a href=\"/wiki/doku.php?id=4rpl:commands:func_awake\" class=\"wikilink1\" title=\"4rpl:commands:func_awake\" data-wiki-id=\"4rpl:commands:func_awake\">:Awake</a> function.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitdebugtext","kind":"Function"},{"name":"setunitdestroyunevenland","displayName":"SetUnitDestroyUnevenLand","usage":"SetUnitDestroyUnevenLand(<-unit <-destroy)","description":"<p>\nSets if the unit is destroyed on uneven land.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitdestroyunevenland","kind":"Function"},{"name":"setunitenabled","displayName":"SetUnitEnabled","usage":"SetUnitEnabled(<-unit <-enabled)","description":"<p>\nSets the enabled status of a unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitenabled","kind":"Function"},{"name":"setuniternsimulated","displayName":"SetUnitERNSimulated","usage":"SetUnitERNSimulated(<-unit <-state)","description":"<dl>\n<dt class=\"level1\"><span class=\"dt\"> State </span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n controls the ERN override. If state is \n</div><dl>\n<dt class=\"level2\"><span class=\"dt\"> 1, </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n then the unit will act as if it has an ERN. \n</div></dd>\n<dt class=\"level2\"><span class=\"dt\"> -1, </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n then unit will act as if it does not have an ERN, even it is actually does. \n</div></dd>\n<dt class=\"level2\"><span class=\"dt\"> 0, </span></dt>\n<dd class=\"level2\"><div class=\"dd\">\n<p>\n then there is no override to either ERN state. Note that the visual state of the unit is not affected by this call, only the effects of an ERN are altered.\n</p>\n</div></dd>\n</dl>\n</dd>\n</dl>\n\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" ><br>\n\nPylons are an exception to this. This <abbr title=\"Application Programming Interface\">API</abbr> will not change the connection range of a Pylon although traditional ERNs will. It will be completely unaffected. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setuniternsimulated","kind":"Function"},{"name":"setunitfireoffset","displayName":"SetUnitFireOffset","usage":"SetUnitFireOffset(<-unit <-pos)","description":"<p>\nSets the fire offset of a unit.\nThe fire offset is the vector representing a position relative to the unit that the unit should produce any projectile or beam from.  It is set in the cpack unit editor.\nTypically, the X and Z values are 0 (the center of the unit) and the Y value specifies a height.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitfireoffset","kind":"Function"},{"name":"setunitfootprintresistscreeperheight","displayName":"SetUnitFootprintResistsCreeperHeight","usage":"SetUnitFootprintResistsCreeperHeight(<-unit <-amt)","description":"<p>\nSets the false terrain height of a unit so that it will resist the flow of creeper.\nThe amt is an integer. It represents the height that the unit will create a rectangle of invisible &#039;terrain&#039; that resists the flow of creeper.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitfootprintresistscreeperheight","kind":"Function"},{"name":"setunitforward","displayName":"SetUnitForward","usage":"SetUnitForward(<-UID <-forward)","description":"<p>\nSet the &#039;forward&#039; vector of a unit. The forward vector is the direction of a units positive Z axis. For an unrotated unit the forward direction would be\n{0 0 1}.  As a unit rotates the direction of the Z axis can point in any direction. SetUnitForward takes a vector of three values, X, Y, and Z, that are the direction\nthat the z axis should point.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitforward","kind":"Function"},{"name":"setunitgrowsmesh","displayName":"SetUnitGrowsMesh","usage":"SetUnitGrowsMesh(<-unit true)","description":"<p>\nSets if a unit causes mesh to grow when over it.  For instance, the emitter will cause mesh to grow. Custom units (or any unit) can have the GrowsMesh attribute and if so it will cause mesh to grow (turn from gray to blue) when over it.  Note that the emitter by default sets this attribute every time it is created/loaded.  All other units do not set this attribute by default.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitgrowsmesh","kind":"Function"},{"name":"setunithealrate","displayName":"SetUnitHealRate","usage":"SetUnitHealRate(<-unit <-unitHealRate)","description":"<p>\nSets the unit&#039;s heal rate. The default heal rate is 0.001. This is how much health is recovered per frame. A negative value will reduce unit health over time rather than healing it. A value of 0 for the heal rate means health will not recover over time.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunithealrate","kind":"Function"},{"name":"setunithealth","displayName":"SetUnitHealth","usage":"SetUnitHealth(<-unit <-amt)","description":"<p>\nSets the health of the unit. A standard health amout is 1.\nThe health can not exceed the Max Health, so set max health first if a value greater than 1 is desired.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunithealth","kind":"Function"},{"name":"setunitlosenabled","displayName":"SetUnitLOSEnabled","usage":"SetUnitLOSEnabled(<-unit <-enabled)","description":"<p>\nSets if the unit has line of sight enabled.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitlosenabled","kind":"Function"},{"name":"setunitmaxammo","displayName":"SetUnitMaxAmmo","usage":"SetUnitMaxAmmo(<-unit <-amt)","description":"<p>\nSets the max ammo of the unit. A value of 1 is is how much a packet normally carries.\nIf ammo is higher than max ammo, then the ammo will be lowered to the value max ammo is set to.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitmaxammo","kind":"Function"},{"name":"setunitmaxhealth","displayName":"SetUnitMaxHealth","usage":"SetUnitMaxHealth(<-unit <-amt)","description":"<p>\nSets the max health of the unit. A value of 1 is a standard health amt.\nIf health is higher than max health, then the health will be lowered the the value max health is set to.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitmaxhealth","kind":"Function"},{"name":"setunitminimapimage","displayName":"SetUnitMiniMapImage","usage":"SetUnitMiniMapImage(<-unit <-imageData)","description":"<p>\nSets the minimap image for the unit. The imageData is a string consisting of 0, 1, and 2 characters. It should be 144 characters long (a 12&times;12 square) with the top left corner being the first &#039;pixel&#039; of the resulting image. A 0 means a transparent pixel, a 1 means a &#039;white&#039; pixel, and &#039;2&#039; means a black  pixel. Note that <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitminimapimagecolor\" class=\"wikilink1\" title=\"4rpl:commands:setunitminimapimagecolor\" data-wiki-id=\"4rpl:commands:setunitminimapimagecolor\">SetUnitMiniMapImageColor</a> can be used to change the color of the &#039;white&#039; pixels.\nNote that this only works for custom units - built-in units cannot have their image overwritten.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitminimapimage","kind":"Function"},{"name":"setunitminimapimagecolor","displayName":"SetUnitMiniMapImageColor","usage":"SetUnitMiniMapImageColor(<-unit <-color)","description":"<p>\nSets the minimap image color (a V4). Note that the 4th value in the vector, the alpha value, is supported. 0 Means fully transparent and 1 means fully opaque. Values above 1 are ignored and treated as 1.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitminimapimagecolor","kind":"Function"},{"name":"setunitminimaptext","displayName":"SetUnitMiniMapText","usage":"SetUnitMiniMapText(<-unit <-text)","description":"<p>\nSets the minimap text to show for the image when there is a non zero event time specified and the player places the mouse over the icon in the minimap.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitminimaptext","kind":"Function"},{"name":"setunitminimaptimetoevent","displayName":"SetUnitMiniMapTimeToEvent","usage":"SetUnitMiniMapTimeToEvent(<-unit <-timeToEvent)","description":"<p>\nSets the time, in frames, till some event. When there is an event time greater than 0, the minimap text will be shown above the minimap. The unit icon in the minimap will also blink while there is a time to event set.  Note that the time to event must be updated constantly if you want the time to tick down. Also note that there must be a unit minimap image assigned before the time to event will take affect.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitminimaptimetoevent","kind":"Function"},{"name":"setunitmodranges","displayName":"SetUnitModRanges","usage":"SetUnitModRanges(<-unit <-ernRangeUpgrade <-portalRangeUpgrade)","description":"<p>\nSets modifiers for a unit&#039;s range. The ernRangeUpgrade effects how much of a boost an ERN makes when docked with a unit. The portalRangeUpgrade affects how much of a boost the range upgrade at the ERN portal makes.  The ernRangeUpgrade (ERU) and portalRangeUpgrade (PRU) add to the unit&#039;s actual range in the following way: <br>\n\n</p>\n<pre class=\"code\">RANGE = BASE_RANGE * (1 + ERU) * (1 + PRU * Current_Portal_Range_Efficiency)</pre>\n\n<p>\nThe Current_Portal_Range_Efficiency ranges from 0 to 1 based on the Range Upgrade upgrade at the ERN portal.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitmodranges","kind":"Function"},{"name":"setunitmovecell","displayName":"SetUnitMoveCell","usage":"SetUnitMoveCell(<-unit <-cellX <-cellZ)","description":"<p>\nSets the move cell for a unit. A unit must be set to movable (by the player), otherwise this call has no effect. When called, the unit&#039;s move ghost will be positioned at the specified coordinates.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitmovecell","kind":"Function"},{"name":"setunitoccupiesland","displayName":"SetUnitOccupiesLand","usage":"SetUnitOccupiesLand(<-unit <-occupies)","description":"<p>\nSets if the unit occupies land (based on its footprint).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitoccupiesland","kind":"Function"},{"name":"setunitorientation","displayName":"SetUnitOrientation","usage":"SetUnitOrientation(<-unit <-orientation)","description":"<p>\nSet the orientation of a unit. The orientation is one of 4 values, 0,1,2,3. These correspond to FORWARD, RIGHT, BACK, LEFT. The default orientation for units is 0, or FORWARD.  Changing the orientation will rotate the unit, in increments of 90 degrees, to face in the given orientation. If the unit occupies the map, the cells occupied by the unit will be updated.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitorientation","kind":"Keyword"},{"name":"setunitoutlinecolor","displayName":"SetUnitOutlineColor","usage":"SetUnitOutlineColor(<-unit <-color)","description":"<p>\nSets the units visual outline color\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitoutlinecolor","kind":"Function"},{"name":"setunitoutlineenabled","displayName":"SetUnitOutlineEnabled","usage":"SetUnitOutlineEnabled(<-unit <-enabled)","description":"<p>\nSets if the unit has a visual outline.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitoutlineenabled","kind":"Function"},{"name":"setunitoutlinemode","displayName":"SetUnitOutlineMode","usage":"SetUnitOutlineMode(<-unit <-showAlways)","description":"<p>\nSets the visual outline mode. If showalways is true, then the outline is always visible. Othewise, it only shows when behind other geometry. The default is “false”, to only show when hidden.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitoutlinemode","kind":"Function"},{"name":"setunitoutlinewidth","displayName":"SetUnitOutlineWidth","usage":"SetUnitOutlineWidth(<-unit <-width)","description":"<p>\nSets if the unit outline width. The default is 1.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitoutlinewidth","kind":"Function"},{"name":"setunitpacketrequestrate","displayName":"SetUnitPacketRequestRate","usage":"SetUnitPacketRequestRate(<-unit <-rate)","description":"<p>\nSets the rate at which a unit can request packets. The rate is a number of frames. The normal value is 15 (so 2 packets per second).\n</p>\n\n<p>\nNote: If used before a unit is finished building, it will affect the build speed as well as the ammo rate.  \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitpacketrequestrate","kind":"Function"},{"name":"setunitpopupenabled","displayName":"SetUnitPopupEnabled","usage":"SetUnitPopupEnabled(<-UID <-enabled)","description":"<p>\nTurns the unit popup on or off for a custom unit. A popup appears when the player mouses over the unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitpopupenabled","kind":"Function"},{"name":"setunitpopuptext0","displayName":"SetUnitPopupText0","usage":"SetUnitPopupText0(<-UID <-text)","description":"<p>\nSets the top line in the unit popup.\n</p>\n\n<p>\nNote: If SetPopupText is called with an empty string, they will default back to whatever values are specified in the <abbr title=\"User Interface\">UI</abbr> settings for the cmod. If you want to show &#039;nothing&#039;, but also want to have a default value in the <abbr title=\"User Interface\">UI</abbr> settings for the Cmod, then pass in “ ” (an empty space).\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" ><br>\n\nThe entered text has access to all compatible CW4 text formating.<br>\n\n<strong>However:</strong> the textbox <em class=\"u\">will not wrap to fit the text</em>. Text size is the only means to fit the text within the displayed box so beware when using the format <span style='color:#8BDFFF; '>&lt;size=[Insert Number]&gt;</span>.<br>\n\nThe full list of formats in CW4 can be found in the <a href=\"https://knucklecracker.com/wiki/doku.php?id=cw4:a.d.a_syntax_syntax_guide\" class=\"wikilink1\" title=\"cw4:a.d.a_syntax_syntax_guide\" data-wiki-id=\"cw4:a.d.a_syntax_syntax_guide\">A.D.A. Message editor format</a> guide.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitpopuptext0","kind":"Function"},{"name":"setunitpopuptext1","displayName":"SetUnitPopupText1","usage":"SetUnitPopupText1(<-UID <-text)","description":"<p>\nSets the bottom line in the unit popup.\n</p>\n\n<p>\nNote: If SetPopupText is called with an empty string, they will default back to whatever values are specified in the <abbr title=\"User Interface\">UI</abbr> settings for the cmod. If you want to show &#039;nothing&#039;, but also want to have a default value in the <abbr title=\"User Interface\">UI</abbr> settings for the Cmod, then pass in “ ” (an empty space).\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" ><br>\n\nThe entered text has access to all compatible CW4 text formating.<br>\n\n<strong>However:</strong> the textbox <em class=\"u\">will not wrap to fit the text</em>. Text size is the only means to fit the text within the displayed box so beware when using the format <span style='color:#8BDFFF; '>&lt;size=[Insert Number]&gt;</span>.<br>\n\nThe full list of formats in CW4 can be found in the <a href=\"https://knucklecracker.com/wiki/doku.php?id=cw4:a.d.a_syntax_syntax_guide\" class=\"wikilink1\" title=\"cw4:a.d.a_syntax_syntax_guide\" data-wiki-id=\"cw4:a.d.a_syntax_syntax_guide\">A.D.A. Message editor format</a> guide.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitpopuptext1","kind":"Function"},{"name":"setunitposition","displayName":"SetUnitPosition","usage":"SetUnitPosition(<-UID <-pos)","description":"<p>\nSets the 3D position of a unit.  The pos argument is a vector that represents the position of the unit is space.  The X and Z positions are where on the map the unit is, and the Y coordinate\nis the height, or elevation, of the unit.\nNote that is moves the unit in space to any location. It can be used to move a unit above or below the terrain.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitposition","kind":"Function"},{"name":"setunitrange","displayName":"SetUnitRange","usage":"SetUnitRange(<-unit <-amt)","description":"<p>\nSets the Range of the unit. The range is an integer and how it is interpreted depends on the unit. It typically means the weapon range, or the area of affect of the unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitrange","kind":"Function"},{"name":"setunitrequestpackets","displayName":"SetUnitRequestPackets","usage":"SetUnitRequestPackets(<-unit <-requestPackets)","description":"<p>\nSets if the unit can request packets.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitrequestpackets","kind":"Function"},{"name":"setunitrotation","displayName":"SetUnitRotation","usage":"SetUnitRotation(<-UID <-rotDeg)","description":"<p>\nSet the rotation of a unit, in degrees. A vector (x,y,z) is passed in representing the rotation around the x,y,z axes.\nNote the Y axis is the &#039;vertical&#039; axis relative to the map plane.\n</p>\n\n<p>\nNote: The rotation <abbr title=\"Application Programming Interface\">API</abbr> will rotate the unit, but no changes will be made the map cells occupied by the unit. Non 90 degree rotations aren&#039;t supported by the map cells. To properly reflect rotation on occupied map cells, use the Unit Orientation APIs.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitrotation","kind":"Function"},{"name":"setunitselectable","displayName":"SetUnitSelectable","usage":"SetUnitSelectable(<-unit <-selectable)","description":"<p>\nSets the selectable state of a unit.\n</p>\n\n<p>\nIf the targeted unit is selected by the player before making this call, it will remain selected until the player deselects it, then will be unselectable by the player. You may want to deselect the unit first with <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitselected\" class=\"wikilink1\" title=\"4rpl:commands:setunitselected\" data-wiki-id=\"4rpl:commands:setunitselected\">SetUnitSelected</a> before calling SetUnitSelectable. \n</p>\n\n<p>\nBe mindful of the order of operations, if you make a unit unselectable with SetUnitSelectable first and then try to deselect it with SetUnitSelected, the SetUnitSelected call will fail, because the unit isn&#039;t selectable. So deselect the unit first, then make it unselectable.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitselectable","kind":"Function"},{"name":"setunitselected","displayName":"SetUnitSelected","usage":"SetUnitSelected(<-unit <-isSelected)","description":"<p>\nSets the selected state of a unit. This call only affects the selection state of the specified unit.\nIf the unit can not be selected, this call has no effect.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitselected","kind":"Function"},{"name":"setunitsettings","displayName":"SetUnitSettings","usage":"SetUnitSettings(<-unit <-settings)","description":"<p>\nSets a table containing the settings for the specified unit. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitsettings\" class=\"wikilink1\" title=\"4rpl:commands:getunitsettings\" data-wiki-id=\"4rpl:commands:getunitsettings\">GetUnitSettings</a> for more details and a list of all setting names.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitsettings","kind":"Function"},{"name":"setunitshieldrange","displayName":"SetUnitShieldRange","usage":"SetUnitShieldRange(<-unit <-range)","description":"<p>\nSets the radius of a unit&#039;s shield. Range is an integer in map cell units.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitshieldrange","kind":"Function"},{"name":"setunitshieldvisible","displayName":"SetUnitShieldVisible","usage":"SetUnitShieldVisible(<-unit <-isVisible)","description":"<p>\nChanges the visibility state of a unit shield. This property is persistent and only needs to be set once per unit.\nIt can be set before or after the shield is deployed. It is more efficient to set it first, since changing the state after a shield is deployed causes the shield to internally de-deploy and redeploy.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitshieldvisible","kind":"Function"},{"name":"setunitspecialtarget","displayName":"SetUnitSpecialTarget","usage":"SetUnitSpecialTarget(<-unit <-specialTargetVal)","description":"<p>\nSets an V4 representing the current special target status of the unit. The V4 tells which target types the unit is tagged as. A value of 0 or 1 will be in each field of the V4. A value of 1 in a field means the unit is targeted by that type of weapon. <br>\n\ntargetVal.0 : Snipers will target <br>\n\ntargetVal.1 : Missiles will target <br>\n\ntargetVal.2 : Custom0 will target <br>\n\ntargetVal.3 : Custom1 will target <br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitspecialtarget","kind":"Function"},{"name":"setunitspecifiedtarget","displayName":"SetUnitSpecifiedTarget","usage":"SetUnitSpecifiedTarget(<-Unit <-pos)","description":"<p>\nSets a unit&#039;s specified target location. The specified target is a map cell location that is set either by player interaction or by script.\n</p>\n\n<p>\nThe value to set is a vector consisting of three coordinates.  The map position is in the X and Z locations. The Y-value/2nd vector of this V3 is ignored but still needs to “exist” so you can&#039;t use only a V2 as the 2nd vector of the V2 will be placed in the Y-vector of the V3 only to then be ignored, causing a V3 of (X Z 0). To avoid this, either use a V3 like in the example or organize a V3 like so: “V3(<-X 0 <-Z)” or “V3(<-.x 0 <-.z)”. You can not directly input a V2 into this <abbr title=\"Application Programming Interface\">API</abbr> because of this need of organizing the stack around the Y-value vector.\n</p>\n<hr>\n\n<p>\nThe “SpecifiedTarget” only exists when the unit has “Can Specify Target” enabled in their cpack settings, found in the “Basic” tab of Settings. When a unit allows “Can Specify Target”, an opaque line or arch (specified by <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitspecifiedtargetpathheight\" class=\"wikilink1\" title=\"4rpl:commands:setunitspecifiedtargetpathheight\" data-wiki-id=\"4rpl:commands:setunitspecifiedtargetpathheight\">SetUnitSpecifiedTargetPathHeight</a><sup><a href=\"#fn__1\" id=\"fnt__1\" class=\"fn_top\">1)</a></sup>) can be seen even when inside or behind terrain along with a visable gray target icon at the SpecifiedTarget location. The gray line can become invisible by using the <abbr title=\"Application Programming Interface\">API</abbr> <a href=\"/wiki/doku.php?id=4rpl:commands:setunitspecifiedtargetshowpath\" class=\"wikilink1\" title=\"4rpl:commands:setunitspecifiedtargetshowpath\" data-wiki-id=\"4rpl:commands:setunitspecifiedtargetshowpath\">SetUnitSpecifiedTargetShowPath</a> to set it to <span style='color:#8BDFFF; '>false</span>, making <em class=\"u\">only the gray line invisible</em> (except at 0,0,0).<br>\n\nBoth the gray line (if visible) and gray target marker will follow the mouse when selected. SpecifiedTarget is good for units that like to allow a player to specify where they should fire or, for especially flying and controllable units, move to without involving the unit ghost created by the game&#039;s built-in movement system which implies the unit is meant for the ground and not the air. The Thor is a perfect example of using SpecifiedTarget as a way for a player to control air units neatly. Just beware of how visually noisy the opaque lines can be.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitspecifiedtarget","kind":"Function"},{"name":"setunitspecifiedtargetoccupiesmap","displayName":"SetUnitSpecifiedTargetOccupiesMap","usage":"SetUnitSpecifiedTargetOccupiesMap(<-Unit <-occupiesMapBool)","description":"<p>\nIf set to true, the specified target will occupy space on the map (prevent units from landing).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitspecifiedtargetoccupiesmap","kind":"Function"},{"name":"setunitspecifiedtargetpathheight","displayName":"SetUnitSpecifiedTargetPathHeight","usage":"SetUnitSpecifiedTargetPathHeight(<-Unit <-pathHeight)","description":"<p>\nIndicates the max height for a specified target indicator. A specified target path forms an arc from the source unit to the target location.\nThe height is the maxmum height (in world space) that the arce will attain.  The default  value is 30 so that the arc appears well above the highest possible terrain.\nIf you want a straight line, not an arc, set the height to 0.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitspecifiedtargetpathheight","kind":"Function"},{"name":"setunitspecifiedtargetpathsourceoffset","displayName":"SetUnitSpecifiedTargetPathSourceOffset","usage":"SetUnitSpecifiedTargetPathSourceOffset(<-Unit <-offset)","description":"<p>\nA specified path normally originates at the origin of the source unit.\nThis function allows an offset from that origin to be used as the starting point for the specified path.\nThe offset is specified with a vector\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitspecifiedtargetpathsourceoffset","kind":"Function"},{"name":"setunitspecifiedtargetshowpath","displayName":"SetUnitSpecifiedTargetShowPath","usage":"SetUnitSpecifiedTargetShowPath(<-Unit <-showPath)","description":"<p>\nIndicates if a specified target indicator for a unit should draw a path line from the unit to the target.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitspecifiedtargetshowpath","kind":"Function"},{"name":"setunitsselectable","displayName":"SetUnitsSelectable","usage":"SetUnitsSelectable(<-canSelect)","description":"<p>\nSets a Boolean indicating if the player can select units. If any units are selected when this call is made, they will be deselected.<br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitsselectable","kind":"Function"},{"name":"setunitstuncount","displayName":"SetUnitStunCount","usage":"SetUnitStunCount(<-unit <-amt)\n\n\n\nSets the stun count for a unit. When a unit is stunned the stun count is set to 300.  Over time this value decreases automatically and when it is 0, the unit is no longer stunned. You can use this API to change the stun count directly.","description":"<pre class=\"code 4rpl\">SetUnitStunCount<span class=\"br0\">&#40;</span>self <span class=\"nu0\">180</span><span class=\"br0\">&#41;</span> <span class=\"co1\">#stun unit for 180 frames (6 seconds)</span></pre>\n\n<p>\n⇐<a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:start\" class=\"wikilink1\" title=\"4rpl:start\" data-wiki-id=\"4rpl:start\"> Index</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitstuncount","kind":"Function"},{"name":"setunitsupplied","displayName":"SetUnitSupplied","usage":"SetUnitSupplied(<-unit <-supplied)","description":"<p>\nSets the supplied status of a unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitsupplied","kind":"Function"},{"name":"setunitsuppresscount","displayName":"SetUnitSuppressCount","usage":"SetUnitSuppressCount(<-unit <-count)","description":"<p>\nSets the suppress count.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitsuppresscount","kind":"Function"},{"name":"setunitsuppressedmovement","displayName":"SetUnitSuppressedMovement","usage":"SetUnitSuppressedMovement(<-unit <-suppress)","description":"<p>\nSets a boolean indicating if the unit&#039;s movement is suppressed. A unit that is normally movable, but has suppressed movement, can not be moved by the player.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunitsuppressedmovement","kind":"Keyword"},{"name":"setunittargetoffset","displayName":"SetUnitTargetOffset","usage":"SetUnitTargetOffset(<-unit <-pos)","description":"<p>\nSets the target offset of a unit.\nThe target offset is the position relative to the unit that the unit should be targeted, or shot at. For instance, if a unit sits on the terrain but has some height, you would want the\ntarget offset to be something like (0,1,0) so that units that shoot at the unit fire into the middle of the unit.\nTypically, the X and Z values are 0 (the center of the unit) and the Y value specifies a height.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunittargetoffset","kind":"Function"},{"name":"setunituioptions","displayName":"SetUnitUIOptions","usage":"SetUnitUIOptions(<-unit <-slot <-optionsList)","description":"<p>\nSets the options for a given <abbr title=\"User Interface\">UI</abbr> control slot.  Custom units can have <abbr title=\"User Interface\">UI</abbr> configuration widgets. These are configured in the CPack manager.\nEach widget occupies a slot, 0-7.\nFor the Label and Button widgets the options have no effect.<br>\n\nFor the Flip and Choice widget, the options are the values shown in the ui widget.<br>\n\n<br>\n\nNote that this call only works on custom units.  If used on a built in unit, it will do nothing.<br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunituioptions","kind":"Function"},{"name":"setunituistate","displayName":"SetUnitUIState","usage":"SetUnitUIState(<-unit <-slot <-state)","description":"<p>\nSets the integer <abbr title=\"User Interface\">UI</abbr> state for a given <abbr title=\"User Interface\">UI</abbr> control slot.  Custom units can have <abbr title=\"User Interface\">UI</abbr> configuration widgets. These are configured in the CPack manager.\nEach widget occupies a slot, 0-7. Each widget also has a state. For the Label and Button widgets the state is always &#039;0&#039;. For the FlipButton widget, the state is\n0 or 1.  For the Choice widget the state is 0-N based on the number of choice items configured.<br>\n\nSetting the state for a given unit is typically not needed. The state is usually controlled by the player interacting with <abbr title=\"User Interface\">UI</abbr> widgets for the flip and choice widgets.\n<br>\n\nNote that this call only works on custom units.  If used on a built in unit, it will do nothing.<br>\n\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunituistate","kind":"Function"},{"name":"setunituitext","displayName":"SetUnitUIText","usage":"SetUnitUIText(<-unit <-slot <-text)","description":"<p>\nSets the string <abbr title=\"User Interface\">UI</abbr> text for a given <abbr title=\"User Interface\">UI</abbr> control slot.  Custom units can have <abbr title=\"User Interface\">UI</abbr> configuration widgets. These are configured in the CPack manager.\nEach widget occupies a slot, 0-7. Each widget also has a text.\nFor the Label and Button widgets the text is what is shown on the widget.<br>\n\nFor the Flip and Choice widget, the text is the label and the value is controlled by the state.<br>\n\n<br>\n\nNote that this call only works on custom units.  If used on a built in unit, it will do nothing.<br>\n\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/local/note-yellow.png\" class=\"icon smiley\" alt=\":NOTE:\" ><br>\n\nAll formats do not operate in the <abbr title=\"User Interface\">UI</abbr> text such as &lt;color&gt; and &lt;b&gt;.<br>\n\nTo create a line break, add a line break via pressing ENTER to create a new line (see 2nd example). &lt;br&gt; and <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:cr\" class=\"wikilink1\" title=\"4rpl:commands:cr\" data-wiki-id=\"4rpl:commands:cr\">CR</a> will fail to create a line break.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setunituitext","kind":"Function"},{"name":"setvoidheight","displayName":"SetVoidHeight","usage":"SetVoidHeight(<-voidHeight)","description":"<p>\nSets the pseudo terrain height of the void. The default value is 2146. The void height is the height that the creeper sees the void as.\nSo a height of 500 means that creeper at a height of 500 would overflow onto the void.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setvoidheight","kind":"Function"},{"name":"setwallcharged","displayName":"SetWallCharged","usage":"SetWallCharged(<-wall <-chargeLevel <-all)","description":"<p>\nSet&#039;s the charged state of the wall and optionally all connected walls. Wall is the wall id, charged is a float from 0 to 1 indicating the charge state of the wall.\nThe &#039;all&#039; input means to set the state on all walls connected to the specified wall. If all is false, the charge is only set on the specified wall.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:setwallcharged","kind":"Function"},{"name":"shortestangle","displayName":"ShortestAngle","usage":"ShortestAngle(<-cur <-new) ->rotAngle","description":"<p>\nGiven two angles in radians, calculates the shortest angle between the two. Useful for determining which direction a unit should rotate in order to turn to a given direction. A positive or negative value will be returned in the range of PI to -PI. Negative values indicate clockwise rotation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:shortestangle","kind":"Function"},{"name":"showadamessage","displayName":"ShowADAMessage","usage":"ShowADAMessage(<-messageKey <-messageType)","description":"<p>\nMessageKey is the name of the message entry created in the editor <abbr title=\"Graphical User Interface\">GUI</abbr>. \n</p>\n\n<p>\nShows an <abbr title=\"Automated Data Analyzer in CW4\">ADA</abbr> message by message key. The messageType is one of:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n “ASSESSMENT” : Initial information about map overview.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “ANALYSIS” : Description of map features, locations, objects.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “INFOCACHE” : Message from a retrieved info cache.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “TRANSMISSION” : Message from some transmitting source.\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n “DATA” : Generic data.\n</div></li>\n</ul>\n\n\n<p>\nThe game will auto unpause when the player closes the <abbr title=\"Automated Data Analyzer in CW4\">ADA</abbr> message log.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:showadamessage","kind":"Function"},{"name":"showadamessageatcell","displayName":"ShowADAMessageAtCell","usage":"ShowADAMessageAtCell(<-message <-messageType <-cellX <-cellY)","description":"<p>\nSame as ShowADAMessage, except map coordinates are specified. The coordinates are in map cells and become associated with the message.\nWhen the player views the message, indicators show the location(s) on the map.  If ShowADAMessageAtCell is called repeatedly with the same\nmessage key but different cell coordinates, the additional cell coordinates also become associated with the message.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:showadamessageatcell","kind":"Function"},{"name":"showadamessageatunit","displayName":"ShowADAMessageAtUnit","usage":"ShowADAMessageAtUnit(<-message <-messageType <-unit)","description":"<p>\nSame as ShowADAMessage, except an unit is specified.\nWhen the player views the message, indicators show the location of the unit(s) on the map.  If ShowADAMessageAtUnit is called repeatedly with the same\nmessage key but different units, the additional units also become associated with the message.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:showadamessageatunit","kind":"Function"},{"name":"showgamemessage","displayName":"ShowGameMessage","usage":"ShowGameMessage(<-messageID <-button0Text <-button1Text <-pauseGame <-messageChannel)","description":"<p>\nShows a game message by message key. A game message is a popup message that appears at the top of the screen.\n</p>\n<dl>\n<dt class=\"level1\"><span class=\"dt\"> messageID </span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n the <abbr title=\"Automated Data Analyzer in CW4\">ADA</abbr> message ID to show. Create a message using the <a href=\"https://knucklecracker.com/wiki/doku.php?id=cw4:custom_maps#ada_message_editor\" class=\"wikilink1\" title=\"cw4:custom_maps\" data-wiki-id=\"cw4:custom_maps\">ADA message editor</a>, and reference it via it&#039;s ID.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> button0Text</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n  and \n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> button1Text</span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n  show one or two buttons. If you don&#039;t want button(s), set them to “”. Otherwise buttons will be shown and the specified text will be on the buttons.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> pauseGame </span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n true  to auto pause the game.\n</div></dd>\n<dt class=\"level1\"><span class=\"dt\"> messageChannel </span></dt>\n<dd class=\"level1\"><div class=\"dd\">\n the name of the message channel to broadcast on when a button is pressed.\n</div></dd>\n</dl>\n\n\n<p>\nIf a button is shown, a message will be sent when the button is pressed. A variable named &#039;_DATA&#039; will contain either a 0 or 1 to indicate which button was pressed.\n</p>\n\n<p>\nIn order to allow the player to close the message, a script must be registered for the message channel specified using <a href=\"/wiki/doku.php?id=4rpl:commands:registerformsg\" class=\"wikilink1\" title=\"4rpl:commands:registerformsg\" data-wiki-id=\"4rpl:commands:registerformsg\">RegisterforMsg</a> and contain a <a href=\"/wiki/doku.php?id=4rpl:commands:closegamemessage\" class=\"wikilink1\" title=\"4rpl:commands:closegamemessage\" data-wiki-id=\"4rpl:commands:closegamemessage\">CloseGameMessage</a> instruction in the callback function, with the parameter set to “True” The callback function need not be the same script as the script making the call.\n</p>\n\n<p>\nIf a message is already showing, then calling this function will do nothing. If you want to replace the message, you must first call <a href=\"/wiki/doku.php?id=4rpl:commands:closegamemessage\" class=\"wikilink1\" title=\"4rpl:commands:closegamemessage\" data-wiki-id=\"4rpl:commands:closegamemessage\">CloseGameMessage</a> if there is already a message showing.\n</p>\n\n<p>\n<strong>Note:</strong> You can use “\\n” to create a line break in the button text.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:showgamemessage","kind":"Function"},{"name":"showraster","displayName":"ShowRaster","usage":"ShowRaster(<-visible)","description":"<p>\nShows or hides the raster display. The raster display is a visual texture in the lower right corner. Its pixels can be set.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:showraster","kind":"Function"},{"name":"showterrainrangeindicator","displayName":"ShowTerrainRangeIndicator","usage":"ShowTerrainRangeIndicator(<-cellX <-cellZ <-radius <-isSquare)","description":"<p>\nCreates a grid that show a range.\nThe cellX and cellZ coordinates are the integer map coordinates to center the indicator\nThe radius is the range, or how big to make the indicator\nThe isSquare argument makes the indicate a square if true and a circle otherwise.\nNote: The indicator object is created when this <abbr title=\"Application Programming Interface\">API</abbr> is called and must be later destroyed when no longer needed by the <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:destroyterrainrangeindicator\" class=\"wikilink1\" title=\"4rpl:commands:destroyterrainrangeindicator\" data-wiki-id=\"4rpl:commands:destroyterrainrangeindicator\">DestroyTerrainRangeIndicator</a> <abbr title=\"Application Programming Interface\">API</abbr>.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:showterrainrangeindicator","kind":"Function"},{"name":"showuiindicator","displayName":"ShowUIIndicator","usage":"ShowUIIndicator(<-indicatorName <-controlName)","description":"<p>\nShows a pulsing <abbr title=\"User Interface\">UI</abbr> indicator over the specified control. Used to draw attention to something in the <abbr title=\"User Interface\">UI</abbr>.\nThis function must be called repeatedly in order to keep the indicator on the screen. A <abbr title=\"User Interface\">UI</abbr> indicator will disappear automatically within 1 frame,\nso there is no reason to &#039;close&#039;. Just stop calling ShowUIIndicator and the indicator will disappear.<br>\n\nThe &#039;indicatorName&#039; should be a unique string for the indicator that is created. When multiple different indicators are shown at the same time, a differernt indicatorName should be used for each.<br>\n\nThe &#039;controlName&#039; is a string that specifies where in the <abbr title=\"User Interface\">UI</abbr> to show the indicator. Values are:\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n buildbutton0\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildbutton1\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildbutton2\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildbutton3\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildbutton4\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildbutton5\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildbutton6\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildtab0\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildtab1\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildtab2\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildtab3\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n buildtab4\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n adaclosebutton\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n cancelbutton\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n resetcambutton\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n pausebutton\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n pausebuttontop\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n departbutton\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n rematerializeButton\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n minerenergytoggle\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n minerbluitetoggle\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n visiblebutton\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n terraformbutton\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:showuiindicator","kind":"Function"},{"name":"sign","displayName":"sign","usage":"SIGN(<-val)","description":"<p>\nReturns the sign of the input value.\nReturn value is 1 when f is positive or zero, -1 when f is negative.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sign","kind":"Function"},{"name":"sign0","displayName":"sign0","usage":"SIGN0(<-val)","description":"<p>\nReturns the sign of the input value.\nReturn value is 1 when f is positive, -1 when f is negative, and 0 if the input value is 0.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sign0","kind":"Function"},{"name":"signalgenerator","displayName":"SignalGenerator","usage":"SignalGenerator(<-time <-frequency <-phaseShift <-invert <-signalType) ->sigValue","description":"<div class=\"li\"><a href=\"https://knucklecracker.com#description\">Description</a></div>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:signalgenerator","kind":"Function"},{"name":"sin","displayName":"sin","usage":"sin (PI)","description":"<p>\nCalculates the sine of the input angle\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sin","kind":"Function"},{"name":"specialtargets","displayName":"","usage":"GetSpecialTargets(<-specialTarget <-worldPosition <-range <-includeIsBuilding) ->units","description":"<p>\nFinds the units that are tagged as a special target within range (a float) from worldPosition (a vector3). The &#039;specialTarget&#039; argument is a V4 that specifies the target types. See <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:getunitspecialtarget\" class=\"wikilink1\" title=\"4rpl:commands:getunitspecialtarget\" data-wiki-id=\"4rpl:commands:getunitspecialtarget\">GetUnitSpecialTarget</a>. The return value is a list of units. The units in the list are sorted with the closest at position 0.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:specialtargets","kind":"Function"},{"name":"split","displayName":"Split","usage":"Split (<-string <-delimiter) ->list","description":"<p>\nTakes two strings from the stack and splits the first wherever the second occurs. Returns a list of strings.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:split","kind":"Function"},{"name":"sqrmagnitude","displayName":"SqrMagnitude","usage":"SqrMagnitude(<-vector) ->length","description":"<p>\nReturns the squared length of the specified vector.  More efficient than magnitude, since no square root is preformed.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sqrmagnitude","kind":"Function"},{"name":"sqrt","displayName":"sqrt","usage":"SQRT (<-value)","description":"<p>\nPops an item from the stack and pushes the square root of that number to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sqrt","kind":"Function"},{"name":"stacksize","displayName":"StackSize","usage":"StackSize ->stackDepth","description":"<p>\nReturns the number of items currently on the stack\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:stacksize","kind":"Function"},{"name":"startswith","displayName":"StartsWith","usage":"StartsWith (<-thisString <-preamble)","description":"<p>\nTakes two strings from the stack and returns whether the first string starts with the second (case sensitive)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:startswith","kind":"Function"},{"name":"stopconsole","displayName":"StopConsole","usage":"StopConsole","description":"<p>\nStops execution of a script, if the script is running in the console. Same as pressing the stop button on a script in the console.\nHas no effect on scripts not in the console.  Note that the execution of the script does not stop immediately, but after the current script invocation has completed.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:stopconsole","kind":"Function"},{"name":"stopsoundloop","displayName":"StopSoundLoop","usage":"StopSoundLoop(<-unit)","description":"<p>\nStops a sound loop on the specified unit.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:stopsoundloop","kind":"Function"},{"name":"stringlength","displayName":"StringLength","usage":"Stringlength (<-thisString) ->numchar","description":"<p>\nReturns the number of characters in a string.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:stringlength","kind":"Function"},{"name":"stringreplace","displayName":"StringReplace","usage":"StringReplace(<-inputString <-match <-replace) ->newString","description":"<p>\nSearches a string for all instances for another string, and replaces them with a different string.\n</p>\n<ul>\n<li class=\"level1\"><div class=\"li\">\n <strong>inputString</strong>: The string to be searched\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>match</strong>: The string to search for in inputString\n</div></li>\n<li class=\"level1\"><div class=\"li\">\n <strong>replace</strong>:The string to replace all match occurrences with\n</div></li>\n</ul>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:stringreplace","kind":"Function"},{"name":"stringtolist","displayName":"StringToList","usage":"StringToList (<-inputstring) ->charList","description":"<p>\nTakes a string from the stack and returns the list of characters in the string.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:stringtolist","kind":"Function"},{"name":"stununit","displayName":"StunUnit","usage":"StunUnit(<-unitUID)","description":"<p>\nStuns the unit. Each time stun is called it adds to the total stun count (the total time the unit is stunned). The amount of time, in frames, for each stun is 300.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:stununit","kind":"Function"},{"name":"stununitsinrange","displayName":"StunUnitsInRange","usage":"StunUnitsInRange(<-cellX <-cellY <-range <-enemy)","description":"<p>\nStuns the units in range of the specified cell coordinates. This is the same routine that shrapnel uses to stun units. The &#039;enemy&#039; parameter is a bool indicting if only enemy, or non enemies, should be stunned. Note that for a unit to be stunned, it must also have the CAN_STUN property set (regardless of the enemy parameter).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:stununitsinrange","kind":"Function"},{"name":"sub","displayName":"sub","usage":"<-a <-b sub ->result","description":"<p>\nSubtracts the two arguments together and pushes the result on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:sub","kind":"Function"},{"name":"substring","displayName":"Substring","usage":"Substring (<-aString <-startAt <-length) ->aPiece","description":"<p>\nExtracts a portion of a string into a new item on the stack.\n</p>\n\n<p>\nThe command has 3 arguments. First the string to be examined, second the starting position of the substring within the original string, starting from offset 0 (zero) and thirdly the length of the extracted string.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:substring","kind":"Function"},{"name":"suppresstotemactivation","displayName":"SuppressTotemActivation","usage":"SuppressTotemActivation(<-suppress)","description":"<p>\nGlobally toggles whether totems can activate. If false, then a fully loaded totem will not activate. It will hold a full load of ammo, but will not raise its shield or initiate the rift.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:suppresstotemactivation","kind":"Function"},{"name":"swap","displayName":"swap","usage":"swap","description":"<p>\nSwaps the order of the top two items on the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:swap","kind":"Function"},{"name":"switch","displayName":"Switch","usage":"switch","description":"<p>\nAllow for multiple selection control in a single, more compact form that multiple if/else if/endif endif format. This is intended to improve clarity by reducing otherwise repetitive coding. \n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:switch","kind":"Keyword"},{"name":"tab","displayName":"TAB","usage":"TAB","description":"<p>\nPushes a tab character to the stack as a string. Useful for printing\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:tab","kind":"Function"},{"name":"table","displayName":"Table","usage":"Table ->table","description":"<p>\nCreates a Table and populates it with the contents of the ENTIRE stack. The entire contents of the stack will be added to a newly created table. The stack will be treated as\npairs of data consisting of strings and values.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:table","kind":"Function"},{"name":"tablen","displayName":"TableN","usage":"TableN(<-N) ->table","description":"<p>\nCreates a Table and populates it with N items from the stack. The N items of the stack will be added to a newly created table. The stack will be treated as\npairs of data consisting of strings and values. N represents each PAIR of data. So for two items on the stack, a key and a value, set N to 1.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:tablen","kind":"Function"},{"name":"tan","displayName":"tan","usage":"tan (PI) ->tangent","description":"<p>\nCalculates the tangent of the input angle.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:tan","kind":"Function"},{"name":"tau","displayName":"TAU","usage":"TAU","description":"<p>\nPushes the value of TAU (2PI) to the stack (6.2831853…)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:tau","kind":"Constant"},{"name":"threehalvespi","displayName":"ThreeHalvesPI","usage":"ThreeHalvesPI","description":"<p>\nPushes the value of 3/2 PI to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:threehalvespi","kind":"Constant"},{"name":"threequarterpi","displayName":"ThreeQuarterPI","usage":"ThreeQuarterPI","description":"<p>\nPushes the value of 3/4 PI to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:threequarterpi","kind":"Constant"},{"name":"tocell","displayName":"ToCell","usage":"ToCell(<-cell) ->cellZ ->cellX","description":"<p>\nExtracts the x and z coordinates from a vector and rounds them to ints, pushing the two results to the stack. The inverse operation is <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:fromcell\" class=\"wikilink1\" title=\"4rpl:commands:fromcell\" data-wiki-id=\"4rpl:commands:fromcell\">FromCell</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:tocell","kind":"Function"},{"name":"tolower","displayName":"ToLower","usage":"ToLower(<-string) ->string","description":"<p>\nConverts a string to lowercase.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:tolower","kind":"Function"},{"name":"toupper","displayName":"ToUpper","usage":"ToUpper (<-string) ->string ## Description Converts a string to uppercase.","description":"<pre class=\"code 4rpl\">Trace<span class=\"br0\">&#40;</span> ToUpper<span class=\"br0\">&#40;</span><span class=\"st0\">&quot;knuckle&quot;</span><span class=\"br0\">&#41;</span><span class=\"br0\">&#41;</span></pre>\n\n<p>\n⇐<a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:start\" class=\"wikilink1\" title=\"4rpl:start\" data-wiki-id=\"4rpl:start\"> Index</a>\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:toupper","kind":"Function"},{"name":"trace","displayName":"Trace","usage":"Trace (&quot;ABC&quot;)","description":"<p>\nPrints a value from the stack into the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:trace","kind":"Function"},{"name":"trace2","displayName":"Trace2","usage":"Trace2 (<-thing1 <-thing2)","description":"<p>\nPrints 2 values from the stack into the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:trace2","kind":"Function"},{"name":"trace3","displayName":"Trace3","usage":"Trace3 (<-thing1 <-thing2 <-thing3)","description":"<p>\nPrints 3 values from the stack into the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:trace3","kind":"Function"},{"name":"trace4","displayName":"Trace4","usage":"Trace4 (<-thing1 <-thing2 <-thing3 <-thing4)","description":"<p>\nPrints 4 values from the stack into the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:trace4","kind":"Function"},{"name":"trace5","displayName":"Trace5","usage":"Trace5 (<-thing1 <-thing2 <-thing3 <-thing4 <-thing5)","description":"<p>\nPrints 5 values from the stack to the debug window. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:trace5","kind":"Function"},{"name":"traceall","displayName":"TraceAll","usage":"TraceAll","description":"<p>\nRemoves all the values from the stack and prints them into the debug console. The values will be on a single line and <strong>not</strong> separated by a space when printed. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:traceall","kind":"Function"},{"name":"traceallsp","displayName":"TraceAllSp","usage":"TraceAllSp","description":"<p>\nRemoves all the values from the stack and prints them into the debug console. The values will be on a single line and <strong>will</strong> be separated by a space when printed. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:traceallsp","kind":"Function"},{"name":"tracestack","displayName":"TraceStack","usage":"TraceStack","description":"<p>\nPrints all the items from the stack to the debug window without removing them. Items are printed one per line and the type of each is also provided. Only works with the <abbr title=\"CW4 Scripting Language\">4RPL</abbr> Console.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:tracestack","kind":"Function"},{"name":"true","displayName":"true","usage":"true","description":"<p>\nPushes a 1 onto the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:true","kind":"Constant"},{"name":"twopi","displayName":"TwoPI","usage":"TwoPI","description":"<p>\nPushes the value of TAU (2PI) to the stack (6.2831853…)\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:twopi","kind":"Constant"},{"name":"ufc","displayName":"UFC","usage":"UFC(<-cell) ->cellZ ->cellX","description":"<p>\nTakes a flattened map cell and returns the map cell coordinates. The flat cell location is equal to: cellX + cellZ * MAP_WIDTH. This routine reverse this.\nNote: THe X and Z coordinates will be clipped to the map bounds. So values less than 0 are permuted to 0, x is limited to MAP_WIDTH-1, etc.\n</p>\n\n<p>\nSee <a href=\"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:fc\" class=\"wikilink1\" title=\"4rpl:commands:fc\" data-wiki-id=\"4rpl:commands:fc\">FC</a> for the reverse calculation.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:ufc","kind":"Function"},{"name":"unattachbeam","displayName":"UnattachBeam","usage":"UnattachBeam(<-beamUID)","description":"<p>\nUnattaches a beam to a unit. When a beam is attached to a unit, the beam&#039;s start position becomes relative to the unit.\nThis allows the beam start to follow the unit around if the unit moves.  The end position remains in world coordinates, unless SetBeamForceLocalEnd is called on the beam.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:unattachbeam","kind":"Function"},{"name":"uselegalunitcells","displayName":"UseLegalUnitCells","usage":"UseLegalUnitCells(<-use)","description":"<p>\nWhen &#039;use&#039; is set to true, unit build and movement will only be allowed on cells specified by the SetLegalUnitCells call.\nWhen &#039;use&#039; is set to false, legalUnitCells are not used.  Note that be default all cells are in the disallowed state. So if you call UseLegalUnitCells\nwithout calling SetLegalUnitCells, then no place on the map can be used for building or moving.\n</p>\n\n<p>\n<img src=\"/wiki/lib/images/smileys/exclaim.svg\" class=\"icon smiley\" alt=\":!:\" > NOTE: LEGAL UNIT MOVEMENT AND BUILDING IS ONLY IN EFFECT WHEN NOT IN EDIT MODE. IN EDIT MODE YOU MAY STILL BUILD AND MOVE UNITS REGARDLESS.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:uselegalunitcells","kind":"Function"},{"name":"v2","displayName":"V2","usage":"V2(2 3) ->vector","description":"<p>\nPops two items from the stack, treats them as float, and creates a new Vector and pushes it to the stack.  The two values popped from the\nstack occupy the x and y positions in the new vector.  The z and w positions will be zero.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:v2","kind":"Function"},{"name":"v3","displayName":"V3","usage":"V3(2 3 4) ->vector","description":"<p>\nPops three items from the stack, treats them as float, and creates a new Vector and pushes it to the stack.  The three values popped from the\nstack occupy the x, y, and z positions in the new vector.  The w position will be zero.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:v3","kind":"Function"},{"name":"v4","displayName":"V4","usage":"V4(2 3 4 5) ->vector","description":"<p>\nPops four items from the stack, treats them as float, and creates a new Vector and pushes it to the stack.  The four values popped from the\nstack occupy the x, y, z, and w positions in the new vector.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:v4","kind":"Function"},{"name":"vector0","displayName":"Vector0","usage":"Vector0","description":"<p>\nPushes a vector with all zeros on the stack\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:vector0","kind":"Constant"},{"name":"vectorangle","displayName":"VectorAngle","usage":"VectorAngle(<-from <-to) ->rotAngle","description":"<p>\nReturns the angle in degrees between from and to.\nThe angle returned is always the non reflex angle between the two vectors - ie the smaller of the two possible angles between them and never greater than 180 degrees.\nNOTE: This routine does NOT work with 4 dimensional vectors.  The 4th dimension will be ignored (treated as 0).\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:vectorangle","kind":"Function"},{"name":"vectoranglecell","displayName":"VectorAngleCell","usage":"VectorAngleCell(<-fromX <-fromZ <-toX <-toZ) ->rotAngle","description":"<p>\nReturns the angle in degrees between from and to.\nThe angle returned is always the non reflex angle between the two vectors - ie the smaller of the two possible angles between them and never greater than 180 degrees.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:vectoranglecell","kind":"Function"},{"name":"while","displayName":"while","usage":"While","description":"<p>\nBeginning of a while loop. The statements between a ‘while’ and a ‘repeat’ should ultimately push a value to the stack that will determine if the loop executes the body of the ‘repeat’ block.\n</p>\n\n<p>\nA while loop is a control flow statement that allows code to be executed repeatedly based on a given Boolean condition. The while loop can be thought of as a repeating if statement.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:while","kind":"Function"},{"name":"xor","displayName":"xor","usage":"XOR","description":"<p>\nPops two items from the stack, treats them as boolean values, ‘xors’ them, and pushes 0 or 1 back to the stack. If both items are TRUE, 0 is pushed to the stack. If both items are FALSE, 0 is pushed to the stack. If one item is TRUE and the other is FALSE, 1 is pushed to the stack.\n</p>","url":"https://knucklecracker.com/wiki/doku.php?id=4rpl:commands:xor","kind":"Function"}]